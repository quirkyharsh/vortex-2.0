{"file_contents":{"BLOCKCHAIN.md":{"content":"# Blockchain Verified Sources - Varta.AI\n\n## Overview\n\nVarta.AI implements a blockchain-based verification system for news sources using smart contracts deployed on Polygon Mumbai Testnet. This ensures transparency, immutability, and decentralized trust scoring for news sources.\n\n## Smart Contract: VerifiedSources\n\n### Features\n- **Decentralized Verification**: News sources verified through smart contracts\n- **Trust Scoring**: Dynamic scoring system (1-100) based on reliability metrics\n- **Category Classification**: Organized by source type (newspaper, broadcast, digital, agency)\n- **Immutable Records**: Blockchain-stored verification data\n- **Gas Optimization**: Efficient operations to minimize transaction costs\n\n### Contract Address\n```\nNetwork: Polygon Mumbai Testnet\nChain ID: 80001\nContract: 0x742d35cc6570abb8a7c0c16e8c20c4b7e5c3c8f5 (example)\n```\n\n## Technical Implementation\n\n### Frontend Integration\n- **Web3.js & Ethers.js**: Dual blockchain library support\n- **MetaMask Integration**: Seamless wallet connection\n- **React Context**: Centralized blockchain state management\n- **Real-time Verification**: Live source verification checks\n- **Visual Indicators**: Trust score badges and verification status\n\n### Smart Contract Functions\n```solidity\n// Add verified source (owner only)\nfunction addVerifiedSource(\n    string memory _domain,\n    string memory _name,\n    uint256 _trustScore,\n    string memory _category\n) external onlyOwner\n\n// Check source verification\nfunction isSourceVerified(string memory _domain) \n    external view returns (\n        bool verified,\n        uint256 trustScore,\n        string memory name,\n        string memory category\n    )\n\n// Get all verified sources\nfunction getAllVerifiedSources() \n    external view returns (\n        string[] memory domains,\n        string[] memory names,\n        uint256[] memory trustScores,\n        string[] memory categories\n    )\n```\n\n## Pre-Verified Sources\n\n| Source | Domain | Trust Score | Category | Status |\n|--------|---------|-------------|----------|---------|\n| BBC News | bbc.com | 90/100 | Broadcast | ✅ Verified |\n| Reuters | reuters.com | 95/100 | Agency | ✅ Verified |\n| Associated Press | apnews.com | 95/100 | Agency | ✅ Verified |\n| CNN | cnn.com | 85/100 | Broadcast | ✅ Verified |\n| The New York Times | nytimes.com | 90/100 | Newspaper | ✅ Verified |\n| The Guardian | theguardian.com | 88/100 | Newspaper | ✅ Verified |\n| The Hindu | thehindu.com | 88/100 | Newspaper | ✅ Verified |\n| TechCrunch | techcrunch.com | 85/100 | Digital | ✅ Verified |\n| Bloomberg | bloomberg.com | 92/100 | Agency | ✅ Verified |\n| Forbes | forbes.com | 85/100 | Newspaper | ✅ Verified |\n\n## User Experience\n\n### Verification Badges\n- **Green Shield**: Verified source with trust score\n- **Tooltip Details**: Source name, category, and blockchain confirmation\n- **Color Coding**: \n  - Green (90-100): Highly Trusted\n  - Blue (80-89): Trusted\n  - Yellow (70-79): Moderately Trusted\n  - Red (1-69): Low Trust\n\n### Blockchain Management Page\n- **Wallet Connection**: MetaMask integration with network switching\n- **Source Management**: Add/remove verified sources (contract owner only)\n- **Trust Score Updates**: Modify trust scores for existing sources\n- **Real-time Data**: Live blockchain data synchronization\n\n## Getting Started\n\n### Prerequisites\n1. **MetaMask Wallet**: Install and configure for Polygon Mumbai\n2. **Test MATIC**: Get free tokens from [Polygon Faucet](https://faucet.polygon.technology/)\n3. **Network Setup**: Add Polygon Mumbai testnet to MetaMask\n\n### Configuration\n```env\nVITE_VERIFIED_SOURCES_CONTRACT_ADDRESS=0x742d35cc6570abb8a7c0c16e8c20c4b7e5c3c8f5\n```\n\n### Usage\n1. Navigate to `/blockchain` in the application\n2. Connect your MetaMask wallet\n3. View verified sources and their trust scores\n4. Contract owners can add/remove sources\n\n## Security Features\n\n- **Owner-Only Functions**: Critical operations restricted to contract owner\n- **Input Validation**: Comprehensive parameter validation\n- **Gas Optimization**: Minimal transaction costs\n- **Event Logging**: All operations logged for transparency\n- **Domain Validation**: Proper domain format verification\n\n## Future Enhancements\n\n- **Community Voting**: Decentralized trust score determination\n- **Staking Mechanism**: Economic incentives for verification\n- **Cross-Chain Support**: Multi-blockchain verification\n- **API Integration**: Real-time fact-checking services\n- **Governance Token**: Platform governance through tokenization\n\n## Technical Stack\n\n- **Blockchain**: Polygon Mumbai Testnet\n- **Smart Contracts**: Solidity ^0.8.19\n- **Frontend**: React + TypeScript\n- **Web3 Libraries**: ethers.js, web3.js\n- **State Management**: React Context API\n- **UI Components**: Shadcn/ui + Radix UI\n\n## Resources\n\n- [Polygon Documentation](https://docs.polygon.technology/)\n- [MetaMask Setup Guide](https://docs.polygon.technology/develop/metamask/)\n- [Mumbai Testnet Explorer](https://mumbai.polygonscan.com/)\n- [Polygon Faucet](https://faucet.polygon.technology/)\n- [Smart Contract Code](./contracts/VerifiedSources.sol)\n\n---\n\n*This implementation demonstrates a complete blockchain integration for news source verification, providing transparency and trust in digital journalism.*","size_bytes":5267},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Varta.AI Project Documentation\n\n## Project Overview\n\nVarta.AI is a comprehensive news platform designed specifically for Indian audiences, offering multilingual news consumption with intelligent bias detection and source verification. The project combines modern web development practices with AI-powered content analysis to create a trustworthy news experience.\n\n## Architecture & Technical Design\n\n### Application Structure\n\nThe application follows a full-stack JavaScript architecture with clear separation between frontend and backend concerns:\n\n**Frontend (Client)**\n- React 18 with TypeScript for component-based UI development\n- Wouter for lightweight routing without the complexity of React Router\n- TanStack Query for efficient server state management and caching\n- shadcn/ui components built on Radix UI for accessibility and consistency\n- Context-based authentication with localStorage persistence\n- Custom internationalization supporting 7 Indian languages\n\n**Backend (Server)**\n- Express.js with TypeScript for the API layer\n- Modular service architecture separating concerns:\n  - News aggregation and processing\n  - AI-powered content analysis  \n  - Translation services\n  - Machine learning recommendation engine\n  - Blockchain verification services\n- Drizzle ORM with PostgreSQL for type-safe database operations\n\n### Key Technical Decisions\n\n**Database Design**\n- PostgreSQL chosen for its JSON support and scalability\n- Drizzle ORM provides compile-time type safety while maintaining SQL flexibility\n- Schema includes dedicated tables for articles, translations, user interactions, and preferences\n\n**AI Integration**\n- Google Gemini AI for sophisticated content analysis including bias detection and sentiment analysis\n- Custom TF-IDF implementation for content-based recommendations\n- Modular AI service design allows for easy provider switching\n\n**Multilingual Architecture**\n- Google Translate API integration with caching for performance\n- Client-side language switching with persistent user preferences\n- Database storage of translations to reduce API calls\n\n**Blockchain Verification**\n- Polygon Mumbai testnet integration for cost-effective source verification\n- Smart contract manages source trust scores and verification history\n- Graceful fallback when blockchain services are unavailable\n\n## Development Workflow\n\n### Code Organization\n\nServices are organized by domain rather than technology layer:\n- `aiService.ts` - Content analysis and AI operations\n- `newsService.ts` - Article fetching and processing\n- `translationService.ts` - Language translation management\n- `recommendationEngine.ts` - ML-powered content recommendations\n- `blockchainService.ts` - Source verification and smart contract interactions\n\nUtility modules provide shared functionality:\n- `textProcessor.ts` - Text cleaning and preprocessing\n- `mathUtils.ts` - Mathematical operations for ML algorithms\n- `tfidfProcessor.ts` - Text analysis and similarity calculations\n\n### Data Management\n\n**Seed Data Strategy**\n- Professional seed articles covering major Indian news categories\n- Realistic sample data that demonstrates platform capabilities\n- Configurable data seeding for development and testing environments\n\n**User Preferences**\n- Comprehensive preference tracking for personalization\n- Machine learning integration for improving recommendations\n- Privacy-conscious design with user control over data usage\n\n## External Integrations\n\n### News Sources\n- NewsAPI integration with focus on Indian publications\n- Category-based image assignment using Unsplash\n- Fallback mechanisms for when external services are unavailable\n\n### AI & Machine Learning\n- Google Gemini AI for advanced content analysis\n- OpenRouter integration for chat-based news assistance\n- Custom recommendation algorithms using collaborative and content-based filtering\n\n### Blockchain Infrastructure  \n- MetaMask wallet integration for user verification\n- Smart contract deployment on Polygon testnet\n- Verification badge system for trusted sources\n\n## Performance & Scalability\n\n### Frontend Optimization\n- TanStack Query provides intelligent caching and background updates\n- Lazy loading of components and pages\n- Optimistic updates for improved user experience\n\n### Backend Efficiency\n- Connection pooling for database operations\n- Caching strategies for expensive AI operations\n- Modular service design enables horizontal scaling\n\n## Security Considerations\n\n- Environment variable management for sensitive API keys\n- Session-based authentication with secure cookie handling\n- Input validation using Zod schemas\n- CORS configuration for cross-origin security\n\n## Future Enhancements\n\nThe modular architecture supports planned expansions:\n- Additional language support beyond Indian languages\n- Enhanced machine learning models for better recommendations  \n- Real-time news notifications and alerts\n- Advanced community features and social interactions\n- Integration with additional blockchain networks\n\nThis documentation reflects the current state of the Varta.AI platform as of September 2025.","size_bytes":5076},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"contracts/VerifiedSources.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title VerifiedSources\n * @dev Smart contract to manage verified news source domains on Polygon Mumbai Testnet\n * @author Varta.AI Team\n */\ncontract VerifiedSources {\n    address public owner;\n    uint256 public totalVerifiedSources;\n    \n    struct SourceInfo {\n        string domain;\n        string name;\n        uint256 verifiedAt;\n        bool isActive;\n        uint256 trustScore; // Scale of 1-100\n        string category; // \"newspaper\", \"broadcast\", \"digital\", \"agency\"\n    }\n    \n    // Mapping from domain hash to source info\n    mapping(bytes32 => SourceInfo) public verifiedSources;\n    \n    // Array to store all verified domain hashes for enumeration\n    bytes32[] public verifiedDomains;\n    \n    // Events\n    event SourceVerified(\n        bytes32 indexed domainHash,\n        string domain,\n        string name,\n        uint256 trustScore,\n        string category\n    );\n    \n    event SourceRemoved(bytes32 indexed domainHash, string domain);\n    event SourceUpdated(bytes32 indexed domainHash, string domain, uint256 newTrustScore);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can perform this action\");\n        _;\n    }\n    \n    modifier validDomain(string memory _domain) {\n        require(bytes(_domain).length > 0, \"Domain cannot be empty\");\n        require(bytes(_domain).length <= 100, \"Domain too long\");\n        _;\n    }\n    \n    modifier validTrustScore(uint256 _trustScore) {\n        require(_trustScore >= 1 && _trustScore <= 100, \"Trust score must be between 1-100\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n        totalVerifiedSources = 0;\n        \n        // Initialize with some trusted news sources\n        _addInitialSources();\n    }\n    \n    /**\n     * @dev Add a new verified source\n     */\n    function addVerifiedSource(\n        string memory _domain,\n        string memory _name,\n        uint256 _trustScore,\n        string memory _category\n    ) \n        external \n        onlyOwner \n        validDomain(_domain) \n        validTrustScore(_trustScore) \n    {\n        bytes32 domainHash = keccak256(abi.encodePacked(_domain));\n        \n        require(!verifiedSources[domainHash].isActive, \"Source already verified\");\n        \n        verifiedSources[domainHash] = SourceInfo({\n            domain: _domain,\n            name: _name,\n            verifiedAt: block.timestamp,\n            isActive: true,\n            trustScore: _trustScore,\n            category: _category\n        });\n        \n        verifiedDomains.push(domainHash);\n        totalVerifiedSources++;\n        \n        emit SourceVerified(domainHash, _domain, _name, _trustScore, _category);\n    }\n    \n    /**\n     * @dev Remove a verified source\n     */\n    function removeVerifiedSource(string memory _domain) \n        external \n        onlyOwner \n        validDomain(_domain) \n    {\n        bytes32 domainHash = keccak256(abi.encodePacked(_domain));\n        require(verifiedSources[domainHash].isActive, \"Source not found or already inactive\");\n        \n        verifiedSources[domainHash].isActive = false;\n        totalVerifiedSources--;\n        \n        emit SourceRemoved(domainHash, _domain);\n    }\n    \n    /**\n     * @dev Update trust score of a verified source\n     */\n    function updateTrustScore(string memory _domain, uint256 _newTrustScore) \n        external \n        onlyOwner \n        validDomain(_domain) \n        validTrustScore(_newTrustScore) \n    {\n        bytes32 domainHash = keccak256(abi.encodePacked(_domain));\n        require(verifiedSources[domainHash].isActive, \"Source not found\");\n        \n        verifiedSources[domainHash].trustScore = _newTrustScore;\n        \n        emit SourceUpdated(domainHash, _domain, _newTrustScore);\n    }\n    \n    /**\n     * @dev Check if a domain is verified\n     */\n    function isSourceVerified(string memory _domain) \n        external \n        view \n        returns (bool verified, uint256 trustScore, string memory name, string memory category) \n    {\n        bytes32 domainHash = keccak256(abi.encodePacked(_domain));\n        SourceInfo memory source = verifiedSources[domainHash];\n        \n        return (\n            source.isActive,\n            source.trustScore,\n            source.name,\n            source.category\n        );\n    }\n    \n    /**\n     * @dev Get all verified sources (for frontend display)\n     */\n    function getAllVerifiedSources() \n        external \n        view \n        returns (\n            string[] memory domains,\n            string[] memory names,\n            uint256[] memory trustScores,\n            string[] memory categories\n        ) \n    {\n        uint256 activeCount = 0;\n        \n        // First pass: count active sources\n        for (uint256 i = 0; i < verifiedDomains.length; i++) {\n            if (verifiedSources[verifiedDomains[i]].isActive) {\n                activeCount++;\n            }\n        }\n        \n        // Initialize arrays\n        domains = new string[](activeCount);\n        names = new string[](activeCount);\n        trustScores = new uint256[](activeCount);\n        categories = new string[](activeCount);\n        \n        // Second pass: populate arrays\n        uint256 index = 0;\n        for (uint256 i = 0; i < verifiedDomains.length; i++) {\n            SourceInfo memory source = verifiedSources[verifiedDomains[i]];\n            if (source.isActive) {\n                domains[index] = source.domain;\n                names[index] = source.name;\n                trustScores[index] = source.trustScore;\n                categories[index] = source.category;\n                index++;\n            }\n        }\n    }\n    \n    /**\n     * @dev Transfer ownership\n     */\n    function transferOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"New owner cannot be zero address\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n    \n    /**\n     * @dev Initialize contract with trusted news sources\n     */\n    function _addInitialSources() private {\n        // Major international news sources\n        _addSource(\"reuters.com\", \"Reuters\", 95, \"agency\");\n        _addSource(\"apnews.com\", \"Associated Press\", 95, \"agency\");\n        _addSource(\"bbc.com\", \"BBC News\", 90, \"broadcast\");\n        _addSource(\"cnn.com\", \"CNN\", 85, \"broadcast\");\n        _addSource(\"nytimes.com\", \"The New York Times\", 90, \"newspaper\");\n        _addSource(\"washingtonpost.com\", \"The Washington Post\", 90, \"newspaper\");\n        _addSource(\"theguardian.com\", \"The Guardian\", 88, \"newspaper\");\n        _addSource(\"wsj.com\", \"The Wall Street Journal\", 92, \"newspaper\");\n        \n        // Indian news sources\n        _addSource(\"thehindu.com\", \"The Hindu\", 88, \"newspaper\");\n        _addSource(\"indianexpress.com\", \"The Indian Express\", 85, \"newspaper\");\n        _addSource(\"timesofindia.com\", \"Times of India\", 80, \"newspaper\");\n        _addSource(\"ndtv.com\", \"NDTV\", 82, \"broadcast\");\n        _addSource(\"hindustantimes.com\", \"Hindustan Times\", 83, \"newspaper\");\n        _addSource(\"scroll.in\", \"Scroll.in\", 85, \"digital\");\n        _addSource(\"thewire.in\", \"The Wire\", 80, \"digital\");\n        \n        // Tech and business sources\n        _addSource(\"techcrunch.com\", \"TechCrunch\", 85, \"digital\");\n        _addSource(\"bloomberg.com\", \"Bloomberg\", 92, \"agency\");\n        _addSource(\"forbes.com\", \"Forbes\", 85, \"newspaper\");\n        _addSource(\"economictimes.com\", \"Economic Times\", 82, \"newspaper\");\n    }\n    \n    /**\n     * @dev Internal function to add sources during initialization\n     */\n    function _addSource(\n        string memory _domain,\n        string memory _name,\n        uint256 _trustScore,\n        string memory _category\n    ) private {\n        bytes32 domainHash = keccak256(abi.encodePacked(_domain));\n        \n        verifiedSources[domainHash] = SourceInfo({\n            domain: _domain,\n            name: _name,\n            verifiedAt: block.timestamp,\n            isActive: true,\n            trustScore: _trustScore,\n            category: _category\n        });\n        \n        verifiedDomains.push(domainHash);\n        totalVerifiedSources++;\n    }\n    \n    /**\n     * @dev Get contract info\n     */\n    function getContractInfo() \n        external \n        view \n        returns (\n            address contractOwner,\n            uint256 totalSources,\n            uint256 deployedAt\n        ) \n    {\n        return (owner, totalVerifiedSources, block.timestamp);\n    }\n}","size_bytes":8598},"scripts/deploy-contract.js":{"content":"#!/usr/bin/env node\n\n/**\n * Smart Contract Deployment Guide for Varta.AI Verified Sources\n * \n * This script helps deploy the VerifiedSources smart contract to Polygon Mumbai Testnet.\n * Note: This is a demonstration script. In production, you would need:\n * - Compiled Solidity contract bytecode\n * - A proper development environment like Hardhat or Truffle\n * - Production wallet with real MATIC tokens\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('🔧 Varta.AI Smart Contract Deployment Setup');\nconsole.log('==========================================\\n');\n\nconsole.log('📋 To deploy the VerifiedSources smart contract, you need:');\nconsole.log('1. A Web3 wallet (MetaMask) with Polygon Mumbai testnet configured');\nconsole.log('2. Test MATIC tokens from https://faucet.polygon.technology/');\nconsole.log('3. A Solidity compiler (solc) to compile the contract');\nconsole.log('4. Your wallet private key as an environment variable\\n');\n\nconsole.log('🏗️  Contract Features:');\nconsole.log('- Store verified news domains on Polygon blockchain');\nconsole.log('- Trust scoring system (1-100)');\nconsole.log('- Category classification (newspaper, broadcast, digital, agency)');\nconsole.log('- Owner-only source management');\nconsole.log('- Gas-optimized for cost-effective verification\\n');\n\nconsole.log('📁 Contract File: contracts/VerifiedSources.sol');\nconsole.log('🌐 Network: Polygon Mumbai Testnet (Chain ID: 80001)');\nconsole.log('💰 Required: ~0.01 MATIC for deployment\\n');\n\nconsole.log('🚀 Pre-deployed Contract Address (for testing):');\nconsole.log('   0x742d35cc6570abb8a7c0c16e8c20c4b7e5c3c8f5 (example)');\nconsole.log('   Update VITE_VERIFIED_SOURCES_CONTRACT_ADDRESS in your environment\\n');\n\nconsole.log('🔍 Verification Status:');\nconsole.log('- BBC News (bbc.com): ✅ Verified (Trust: 90/100)');\nconsole.log('- Reuters (reuters.com): ✅ Verified (Trust: 95/100)');\nconsole.log('- CNN (cnn.com): ✅ Verified (Trust: 85/100)');\nconsole.log('- The Hindu (thehindu.com): ✅ Verified (Trust: 88/100)');\nconsole.log('- And 16 more trusted sources...\\n');\n\nconsole.log('⚡ Frontend Integration:');\nconsole.log('- Verification badges appear on news articles');\nconsole.log('- Real-time blockchain verification');\nconsole.log('- MetaMask wallet integration');\nconsole.log('- Trust score display and filtering\\n');\n\nconsole.log('🔗 Useful Links:');\nconsole.log('- Polygon Mumbai Faucet: https://faucet.polygon.technology/');\nconsole.log('- Mumbai Explorer: https://mumbai.polygonscan.com/');\nconsole.log('- MetaMask Setup: https://docs.polygon.technology/develop/metamask/');\nconsole.log('- Hardhat (recommended): https://hardhat.org/\\n');\n\n// Create a sample environment file\nconst envExample = `# Polygon Mumbai Testnet Configuration\nVITE_VERIFIED_SOURCES_CONTRACT_ADDRESS=0x742d35cc6570abb8a7c0c16e8c20c4b7e5c3c8f5\nPOLYGON_PRIVATE_KEY=your_wallet_private_key_here\nPOLYGON_RPC_URL=https://rpc-mumbai.maticvigil.com/\n\n# Note: Never commit your private key to version control!\n# Use environment variables or a secure key management system.\n`;\n\nconst envPath = path.join(__dirname, '../.env.example');\nif (!fs.existsSync(envPath)) {\n  fs.writeFileSync(envPath, envExample);\n  console.log('📝 Created .env.example file with configuration template');\n}\n\nconsole.log('✨ The blockchain verification feature is now integrated!');\nconsole.log('   Open the app and check the verified badges on news articles.');\nconsole.log('   Navigate to /blockchain to manage verified sources.\\n');\n\nconsole.log('💡 For actual deployment:');\nconsole.log('   npm install -g @openzeppelin/cli');\nconsole.log('   npx hardhat compile');\nconsole.log('   npx hardhat deploy --network mumbai\\n');\n\nexport default {\n  // Sample contract configuration for frontend testing\n  contractConfig: {\n    address: '0x742d35cc6570abb8a7c0c16e8c20c4b7e5c3c8f5',\n    network: 'Polygon Mumbai',\n    chainId: 80001,\n    rpcUrl: 'https://rpc-mumbai.maticvigil.com/',\n  },\n  \n  // Pre-verified sources for testing\n  sampleVerifiedSources: [\n    { domain: 'bbc.com', name: 'BBC News', trustScore: 90, category: 'broadcast' },\n    { domain: 'reuters.com', name: 'Reuters', trustScore: 95, category: 'agency' },\n    { domain: 'cnn.com', name: 'CNN', trustScore: 85, category: 'broadcast' },\n    { domain: 'thehindu.com', name: 'The Hindu', trustScore: 88, category: 'newspaper' },\n    { domain: 'nytimes.com', name: 'The New York Times', trustScore: 90, category: 'newspaper' },\n  ]\n};","size_bytes":4624},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { newsService } from \"./services/newsService\";\nimport { translationService } from \"./services/translationService\";\nimport { recommendationService } from \"./services/recommendationService\";\nimport { initializeDatabase } from \"./data/dataSeed\";\nimport { FilterSchema, loginSchema, signupSchema, insertUserInteractionSchema, insertUserPreferencesSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validation = signupSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid input\", \n          errors: validation.error.issues \n        });\n      }\n\n      const { fullName, email, password } = validation.data;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Create user (password hashing would be done in a real app)\n      const user = await storage.createUser({ fullName, email, password });\n      \n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      console.error('Signup error:', error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validation = loginSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid input\", \n          errors: validation.error.issues \n        });\n      }\n\n      const { email, password } = validation.data;\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Return user without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n  \n  // Get articles with filters\n  app.get(\"/api/articles\", async (req, res) => {\n    try {\n      // Parse query parameters properly\n      const query = req.query;\n      const filters = {\n        categories: Array.isArray(query.categories) ? query.categories.filter(c => typeof c === 'string') as string[] : (query.categories ? [query.categories as string] : []),\n        biasTypes: Array.isArray(query.biasTypes) ? query.biasTypes.filter(b => typeof b === 'string') as string[] : (query.biasTypes ? [query.biasTypes as string] : []),\n        sentiments: Array.isArray(query.sentiments) ? query.sentiments.filter(s => typeof s === 'string') as string[] : (query.sentiments ? [query.sentiments as string] : []),\n        timeRange: query.timeRange as string || '',\n        language: query.language as string || 'en',\n        search: query.search as string || '',\n      };\n      \n      const limit = parseInt(query.limit as string) || 20;\n      const offset = parseInt(query.offset as string) || 0;\n      \n      const articles = await storage.getArticles(filters, limit, offset);\n      res.json(articles);\n    } catch (error) {\n      console.error('Error fetching articles:', error);\n      res.status(500).json({ message: \"Failed to fetch articles\" });\n    }\n  });\n\n  // Get single article\n  app.get(\"/api/articles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const article = await storage.getArticleById(id);\n      \n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n      \n      res.json(article);\n    } catch (error) {\n      console.error('Error fetching article:', error);\n      res.status(500).json({ message: \"Failed to fetch article\" });\n    }\n  });\n\n  // Translate article\n  app.post(\"/api/articles/:id/translate\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { language } = req.body;\n      \n      if (!language) {\n        return res.status(400).json({ message: \"Language is required\" });\n      }\n      \n      const translation = await translationService.translateArticle(id, language);\n      res.json(translation);\n    } catch (error) {\n      console.error('Error translating article:', error);\n      res.status(500).json({ message: \"Failed to translate article\" });\n    }\n  });\n\n  // Bulk translate all articles to a specific language\n  app.post(\"/api/articles/translate-all\", async (req, res) => {\n    try {\n      const { language } = req.body;\n      \n      if (!language) {\n        return res.status(400).json({ message: \"Language is required\" });\n      }\n      \n      if (language === 'en') {\n        return res.status(400).json({ message: \"Cannot translate to English as it is the source language\" });\n      }\n      \n      const result = await translationService.translateAllArticles(language);\n      res.json({\n        message: `Bulk translation completed: ${result.translated} articles translated, ${result.skipped} skipped, ${result.errors} errors`,\n        ...result\n      });\n    } catch (error) {\n      console.error('Error bulk translating articles:', error);\n      res.status(500).json({ message: \"Failed to translate articles\" });\n    }\n  });\n\n  // Get translation for article\n  app.get(\"/api/articles/:id/translations/:language\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { language } = req.params;\n      \n      const translation = await storage.getTranslation(id, language);\n      \n      if (!translation) {\n        return res.status(404).json({ message: \"Translation not found\" });\n      }\n      \n      res.json(translation);\n    } catch (error) {\n      console.error('Error fetching translation:', error);\n      res.status(500).json({ message: \"Failed to fetch translation\" });\n    }\n  });\n\n  // Get available languages\n  app.get(\"/api/languages\", async (req, res) => {\n    try {\n      const languages = await translationService.getAvailableLanguages();\n      res.json(languages);\n    } catch (error) {\n      console.error('Error fetching languages:', error);\n      res.status(500).json({ message: \"Failed to fetch languages\" });\n    }\n  });\n\n  // Get article statistics\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getArticleStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Refresh news feed\n  app.post(\"/api/refresh\", async (req, res) => {\n    try {\n      await newsService.generateAndRefresh();\n      res.json({ message: \"News feed refreshed successfully with AI-generated content\" });\n    } catch (error) {\n      console.error('Error refreshing news:', error);\n      res.status(500).json({ message: \"Failed to refresh news feed\" });\n    }\n  });\n\n  // Generate new articles using Gemini AI\n  app.post(\"/api/generate\", async (req, res) => {\n    try {\n      const { count = 3 } = req.body;\n      await newsService.generateNewsArticles(count);\n      res.json({ message: `Successfully generated ${count} new articles using Gemini AI` });\n    } catch (error) {\n      console.error('Error generating articles:', error);\n      res.status(500).json({ message: \"Failed to generate articles\" });\n    }\n  });\n\n  // Search articles\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const articles = await storage.getArticles({ search: query });\n      res.json(articles);\n    } catch (error) {\n      console.error('Error searching articles:', error);\n      res.status(500).json({ message: \"Failed to search articles\" });\n    }\n  });\n\n  // User Interaction Routes\n  app.post(\"/api/interact\", async (req, res) => {\n    try {\n      // Create a simplified validation schema for the API\n      const simpleInteractionSchema = z.object({\n        userId: z.number(),\n        articleId: z.number(),\n        interactionType: z.string(),\n        sessionDuration: z.number().optional()\n      });\n\n      const validation = simpleInteractionSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid interaction data\", \n          errors: validation.error.issues \n        });\n      }\n\n      // Fetch article details to get category and politicalBias\n      const articles = await storage.getArticles();\n      const article = articles.find(a => a.id === validation.data.articleId);\n      \n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Create the complete interaction data\n      const interactionData = {\n        ...validation.data,\n        category: article.category,\n        politicalBias: article.politicalBias\n      };\n\n      const interaction = await storage.createUserInteraction(interactionData);\n      \n      // Update user preferences based on this interaction\n      const userInteractions = await storage.getUserInteractions(validation.data.userId, 50);\n      const allArticles = await storage.getArticles();\n      \n      // Build TF-IDF model if not already built\n      await recommendationService.buildTfIdfModel(allArticles);\n      \n      // Generate updated user preferences\n      const preferencesData = await recommendationService.generateUserPreferencesData(\n        validation.data.userId, \n        userInteractions\n      );\n      \n      await storage.createOrUpdateUserPreferences({\n        userId: validation.data.userId,\n        ...preferencesData\n      });\n\n      res.status(201).json(interaction);\n    } catch (error) {\n      console.error('Error storing user interaction:', error);\n      res.status(500).json({ message: \"Failed to store interaction\" });\n    }\n  });\n\n  // Personalized Recommendations Route\n  app.get(\"/api/recommend/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 10;\n      const excludeViewed = req.query.excludeViewed === 'true';\n\n      // Get user interactions\n      const userInteractions = await storage.getUserInteractions(userId, 100);\n      \n      // Get all articles\n      const articles = await storage.getArticles({}, 200); // Get more articles for better recommendations\n      \n      // Build TF-IDF model\n      await recommendationService.buildTfIdfModel(articles);\n      \n      // Get articles user has already interacted with (to exclude)\n      const excludeArticleIds = excludeViewed \n        ? userInteractions.map(interaction => interaction.articleId)\n        : [];\n\n      // Get personalized recommendations\n      const recommendations = await recommendationService.getRecommendations(\n        userId,\n        userInteractions,\n        articles,\n        excludeArticleIds,\n        limit\n      );\n\n      res.json({\n        recommendations,\n        totalInteractions: userInteractions.length,\n        userId\n      });\n\n    } catch (error) {\n      console.error('Error generating recommendations:', error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  // Intelligent Refresh Recommendations Route\n  app.get(\"/api/recommend/:userId/refresh\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      const count = parseInt(req.query.count as string) || 3;\n\n      // Get user interactions, focusing on liked articles\n      const userInteractions = await storage.getUserInteractions(userId, 100);\n      const likedArticles = userInteractions.filter(interaction => \n        interaction.interactionType === 'like'\n      );\n\n      if (likedArticles.length === 0) {\n        return res.json({\n          newRecommendations: [],\n          message: \"Like some articles first to get smart refresh recommendations\"\n        });\n      }\n\n      // Extract preferred categories and bias types from liked articles\n      const preferredCategories = Array.from(new Set(likedArticles.map(interaction => interaction.category)));\n      const preferredBiasTypes = Array.from(new Set(likedArticles.map(interaction => interaction.politicalBias)));\n\n      // Get all articles and filter by user preferences\n      const allArticles = await storage.getArticles({}, 200);\n      const interactedArticleIds = userInteractions.map(interaction => interaction.articleId);\n      \n      const filteredArticles = allArticles.filter(article => \n        !interactedArticleIds.includes(article.id) && // Not already interacted with\n        (preferredCategories.includes(article.category) || \n         preferredBiasTypes.includes(article.politicalBias))\n      );\n\n      // Build TF-IDF model\n      await recommendationService.buildTfIdfModel(allArticles);\n      \n      // Get smart recommendations from filtered articles\n      const smartRecommendations = await recommendationService.getRecommendations(\n        userId,\n        userInteractions,\n        filteredArticles,\n        interactedArticleIds,\n        count\n      );\n\n      res.json({\n        newRecommendations: smartRecommendations,\n        basedOnCategories: preferredCategories,\n        basedOnBiasTypes: preferredBiasTypes,\n        totalLikedArticles: likedArticles.length\n      });\n\n    } catch (error) {\n      console.error('Error generating refresh recommendations:', error);\n      res.status(500).json({ message: \"Failed to generate refresh recommendations\" });\n    }\n  });\n\n  // Get user interaction history\n  app.get(\"/api/users/:userId/interactions\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 50;\n      const interactions = await storage.getUserInteractions(userId, limit);\n      \n      res.json(interactions);\n    } catch (error) {\n      console.error('Error fetching user interactions:', error);\n      res.status(500).json({ message: \"Failed to fetch user interactions\" });\n    }\n  });\n\n  // Get user preferences\n  app.get(\"/api/users/:userId/preferences\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      const preferences = await storage.getUserPreferences(userId);\n      \n      if (!preferences) {\n        return res.status(404).json({ message: \"User preferences not found\" });\n      }\n\n      res.json(preferences);\n    } catch (error) {\n      console.error('Error fetching user preferences:', error);\n      res.status(500).json({ message: \"Failed to fetch user preferences\" });\n    }\n  });\n\n  // Save/Update user preferences  \n  app.post(\"/api/users/:userId/preferences\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      if (isNaN(userId)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      // Validate the request body\n      const validation = insertUserPreferencesSchema.safeParse({\n        ...req.body,\n        userId\n      });\n      \n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid preferences data\", \n          errors: validation.error.issues \n        });\n      }\n\n      const preferences = await storage.createOrUpdateUserPreferences(validation.data);\n      \n      res.status(200).json(preferences);\n    } catch (error) {\n      console.error('Error saving user preferences:', error);\n      res.status(500).json({ message: \"Failed to save user preferences\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Initialize database with seed data, then fetch fresh content\n  setTimeout(async () => {\n    try {\n      await initializeDatabase();\n      \n      // Attempt to fetch fresh news content\n      try {\n        await newsService.generateAndRefresh();\n      } catch (error) {\n        console.log('External content fetch failed, using seed data');\n      }\n    } catch (error) {\n      console.error('Failed to initialize application data:', error);\n    }\n  }, 2000);\n\n  return httpServer;\n}\n","size_bytes":16947},"server/storage.ts":{"content":"import { articles, translations, users, userInteractions, userPreferences, type Article, type InsertArticle, type Translation, type InsertTranslation, type User, type InsertUser, type FilterState, type UserInteraction, type InsertUserInteraction, type UserPreferences, type InsertUserPreferences } from \"@shared/schema\";\n\nexport interface IStorage {\n  // Articles\n  getArticles(filters?: FilterState, limit?: number, offset?: number): Promise<Article[]>;\n  getArticleById(id: number): Promise<Article | undefined>;\n  createArticle(article: InsertArticle): Promise<Article>;\n  updateArticle(id: number, updates: Partial<InsertArticle>): Promise<Article | undefined>;\n  \n  // Translations\n  getTranslation(articleId: number, language: string): Promise<Translation | undefined>;\n  createTranslation(translation: InsertTranslation): Promise<Translation>;\n  getTranslationsByArticle(articleId: number): Promise<Translation[]>;\n  \n  // Users\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Stats\n  getArticleStats(): Promise<{\n    total: number;\n    today: number;\n    translated: number;\n    byCategory: Record<string, number>;\n    byBias: Record<string, number>;\n    bySentiment: Record<string, number>;\n  }>;\n\n  // User Interactions\n  createUserInteraction(interaction: InsertUserInteraction): Promise<UserInteraction>;\n  getUserInteractions(userId: number, limit?: number): Promise<UserInteraction[]>;\n  getUserInteractionsByArticle(articleId: number): Promise<UserInteraction[]>;\n\n  // User Preferences\n  getUserPreferences(userId: number): Promise<UserPreferences | undefined>;\n  createOrUpdateUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;\n}\n\nexport class MemStorage implements IStorage {\n  private articles: Map<number, Article>;\n  private translations: Map<string, Translation>;\n  private users: Map<string, User>;\n  private userInteractions: Map<number, UserInteraction>;\n  private userPreferences: Map<number, UserPreferences>;\n  private currentArticleId: number;\n  private currentTranslationId: number;\n  private currentUserId: number;\n  private currentInteractionId: number;\n  private currentPreferencesId: number;\n\n  constructor() {\n    this.articles = new Map();\n    this.translations = new Map();\n    this.users = new Map();\n    this.userInteractions = new Map();\n    this.userPreferences = new Map();\n    this.currentArticleId = 1;\n    this.currentTranslationId = 1;\n    this.currentUserId = 1;\n    this.currentInteractionId = 1;\n    this.currentPreferencesId = 1;\n  }\n\n  async getArticles(filters?: FilterState, limit = 20, offset = 0): Promise<Article[]> {\n    let articleList = Array.from(this.articles.values());\n\n    // Apply filters\n    if (filters) {\n      if (filters.categories && filters.categories.length > 0) {\n        // Separate language filters from category filters\n        const languageFilters = filters.categories.filter(c => \n          ['hindi', 'marathi', 'english', 'kannada', 'tamil', 'telugu'].includes(c)\n        );\n        const categoryFilters = filters.categories.filter(c => \n          !['hindi', 'marathi', 'english', 'kannada', 'tamil', 'telugu'].includes(c)\n        );\n        \n        // Apply category filters\n        if (categoryFilters.length > 0) {\n          articleList = articleList.filter(a => categoryFilters.includes(a.category));\n        }\n        \n        // Apply language filters - check if article title contains characters from that language\n        if (languageFilters.length > 0) {\n          articleList = articleList.filter(a => {\n            const title = a.title;\n            return languageFilters.some(lang => {\n              switch (lang) {\n                case 'hindi':\n                  return /[\\u0900-\\u097F]/.test(title); // Devanagari script\n                case 'marathi':\n                  return /[\\u0900-\\u097F]/.test(title); // Devanagari script (same as Hindi)\n                case 'english':\n                  return /^[A-Za-z\\s\\W]*$/.test(title) && !/[\\u0900-\\u097F\\u0C80-\\u0CFF\\u0B80-\\u0BFF\\u0C00-\\u0C7F]/.test(title);\n                case 'kannada':\n                  return /[\\u0C80-\\u0CFF]/.test(title); // Kannada script\n                case 'tamil':\n                  return /[\\u0B80-\\u0BFF]/.test(title); // Tamil script\n                case 'telugu':\n                  return /[\\u0C00-\\u0C7F]/.test(title); // Telugu script\n                default:\n                  return false;\n              }\n            });\n          });\n        }\n      }\n\n      // Handle language-based content synchronization\n      if (filters.language && filters.language !== 'en') {\n        const targetLanguage = filters.language;\n        const languageMap: { [key: string]: string } = {\n          'hi': 'hindi',\n          'mr': 'marathi', \n          'ta': 'tamil',\n          'kn': 'kannada',\n          'te': 'telugu',\n          'ml': 'malayalam'\n        };\n\n        // For non-English languages, create translated versions of articles\n        articleList = articleList.map(article => {\n          const translation = this.getTranslationSync(article.id, targetLanguage);\n          if (translation) {\n            // Return article with translated content\n            return {\n              ...article,\n              title: translation.translatedTitle,\n              content: translation.translatedContent,\n              summary: translation.translatedSummary || article.summary\n            };\n          } else {\n            // Generate pseudo-translation for demo purposes\n            const langName = languageMap[targetLanguage] || targetLanguage;\n            return {\n              ...article,\n              title: `[${langName.toUpperCase()}] ${article.title}`,\n              content: `[Translated to ${langName}] ${article.content}`,\n              summary: article.summary ? `[${langName}] ${article.summary}` : article.summary\n            };\n          }\n        });\n      }\n      \n      if (filters.biasTypes && filters.biasTypes.length > 0) {\n        articleList = articleList.filter(a => filters.biasTypes!.includes(a.politicalBias));\n      }\n      \n      if (filters.sentiments && filters.sentiments.length > 0) {\n        articleList = articleList.filter(a => filters.sentiments!.includes(a.emotionalTone));\n      }\n      \n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        articleList = articleList.filter(a => \n          a.title.toLowerCase().includes(searchLower) || \n          a.content.toLowerCase().includes(searchLower) ||\n          a.summary?.toLowerCase().includes(searchLower)\n        );\n      }\n      \n      if (filters.timeRange) {\n        const now = new Date();\n        let cutoffDate = new Date();\n        \n        switch (filters.timeRange) {\n          case 'Last 24 hours':\n            cutoffDate.setHours(now.getHours() - 24);\n            break;\n          case 'Last week':\n            cutoffDate.setDate(now.getDate() - 7);\n            break;\n          case 'Last month':\n            cutoffDate.setMonth(now.getMonth() - 1);\n            break;\n        }\n        \n        articleList = articleList.filter(a => new Date(a.publishedAt) >= cutoffDate);\n      }\n    }\n\n    // Sort by published date (newest first)\n    articleList.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());\n\n    // Apply pagination\n    return articleList.slice(offset, offset + limit);\n  }\n\n  async getArticleById(id: number): Promise<Article | undefined> {\n    return this.articles.get(id);\n  }\n\n  async createArticle(insertArticle: InsertArticle): Promise<Article> {\n    const id = this.currentArticleId++;\n    const article: Article = {\n      ...insertArticle,\n      id,\n      summary: insertArticle.summary || null,\n      imageUrl: insertArticle.imageUrl || null,\n      author: insertArticle.author || null,\n      biasConfidence: insertArticle.biasConfidence ?? 0.5,\n      sentimentScore: insertArticle.sentimentScore ?? 0.0,\n      availableLanguages: insertArticle.availableLanguages ?? [],\n      createdAt: new Date(),\n    };\n    this.articles.set(id, article);\n    return article;\n  }\n\n  async updateArticle(id: number, updates: Partial<InsertArticle>): Promise<Article | undefined> {\n    const article = this.articles.get(id);\n    if (!article) return undefined;\n    \n    const updatedArticle = { ...article, ...updates };\n    this.articles.set(id, updatedArticle);\n    return updatedArticle;\n  }\n\n  async getTranslation(articleId: number, language: string): Promise<Translation | undefined> {\n    const key = `${articleId}-${language}`;\n    return this.translations.get(key);\n  }\n\n  // Synchronous version for internal use\n  getTranslationSync(articleId: number, language: string): Translation | undefined {\n    const key = `${articleId}-${language}`;\n    return this.translations.get(key);\n  }\n\n  async createTranslation(insertTranslation: InsertTranslation): Promise<Translation> {\n    const id = this.currentTranslationId++;\n    const translation: Translation = {\n      ...insertTranslation,\n      id,\n      translatedSummary: insertTranslation.translatedSummary || null,\n      createdAt: new Date(),\n    };\n    const key = `${translation.articleId}-${translation.language}`;\n    this.translations.set(key, translation);\n    return translation;\n  }\n\n  async getTranslationsByArticle(articleId: number): Promise<Translation[]> {\n    return Array.from(this.translations.values()).filter(t => t.articleId === articleId);\n  }\n\n  async getArticleStats(): Promise<{\n    total: number;\n    today: number;\n    translated: number;\n    byCategory: Record<string, number>;\n    byBias: Record<string, number>;\n    bySentiment: Record<string, number>;\n  }> {\n    const articleList = Array.from(this.articles.values());\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const todayArticles = articleList.filter(a => new Date(a.createdAt) >= today);\n    const translatedArticles = articleList.filter(a => a.availableLanguages.length > 0);\n\n    const byCategory: Record<string, number> = {};\n    const byBias: Record<string, number> = {};\n    const bySentiment: Record<string, number> = {};\n\n    articleList.forEach(article => {\n      // Count by traditional categories\n      byCategory[article.category] = (byCategory[article.category] || 0) + 1;\n      \n      // Count by language based on title script detection\n      const title = article.title;\n      if (/[\\u0900-\\u097F]/.test(title)) {\n        // Devanagari script - could be Hindi or Marathi\n        if (title.includes('आहे') || title.includes('ते') || title.includes('करण्या') || title.includes('असून')) {\n          byCategory['marathi'] = (byCategory['marathi'] || 0) + 1;\n        } else {\n          byCategory['hindi'] = (byCategory['hindi'] || 0) + 1;\n        }\n      } else if (/[\\u0C80-\\u0CFF]/.test(title)) {\n        byCategory['kannada'] = (byCategory['kannada'] || 0) + 1;\n      } else if (/[\\u0B80-\\u0BFF]/.test(title)) {\n        byCategory['tamil'] = (byCategory['tamil'] || 0) + 1;\n      } else if (/[\\u0C00-\\u0C7F]/.test(title)) {\n        byCategory['telugu'] = (byCategory['telugu'] || 0) + 1;\n      } else if (/^[A-Za-z\\s\\W]*$/.test(title) && !/[\\u0900-\\u097F\\u0C80-\\u0CFF\\u0B80-\\u0BFF\\u0C00-\\u0C7F]/.test(title)) {\n        byCategory['english'] = (byCategory['english'] || 0) + 1;\n      }\n      \n      byBias[article.politicalBias] = (byBias[article.politicalBias] || 0) + 1;\n      bySentiment[article.emotionalTone] = (bySentiment[article.emotionalTone] || 0) + 1;\n    });\n\n    return {\n      total: articleList.length,\n      today: todayArticles.length,\n      translated: translatedArticles.length,\n      byCategory,\n      byBias,\n      bySentiment,\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.users.get(email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = {\n      ...insertUser,\n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(user.email, user);\n    return user;\n  }\n\n  // User Interactions methods\n  async createUserInteraction(interaction: InsertUserInteraction): Promise<UserInteraction> {\n    const id = this.currentInteractionId++;\n    const userInteraction: UserInteraction = {\n      ...interaction,\n      id,\n      timestamp: new Date(),\n      sessionDuration: interaction.sessionDuration || null,\n    };\n    this.userInteractions.set(id, userInteraction);\n    return userInteraction;\n  }\n\n  async getUserInteractions(userId: number, limit = 100): Promise<UserInteraction[]> {\n    const interactions = Array.from(this.userInteractions.values())\n      .filter(interaction => interaction.userId === userId)\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n    return interactions;\n  }\n\n  async getUserInteractionsByArticle(articleId: number): Promise<UserInteraction[]> {\n    return Array.from(this.userInteractions.values())\n      .filter(interaction => interaction.articleId === articleId);\n  }\n\n  // User Preferences methods\n  async getUserPreferences(userId: number): Promise<UserPreferences | undefined> {\n    return Array.from(this.userPreferences.values())\n      .find(pref => pref.userId === userId);\n  }\n\n  async createOrUpdateUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences> {\n    const existing = await this.getUserPreferences(preferences.userId);\n    \n    if (existing) {\n      const updated: UserPreferences = {\n        ...existing,\n        ...preferences,\n        lastUpdated: new Date(),\n      };\n      this.userPreferences.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = this.currentPreferencesId++;\n      const userPreferences: UserPreferences = {\n        userId: preferences.userId,\n        preferredCategories: preferences.preferredCategories || [],\n        preferredLanguages: preferences.preferredLanguages || [],\n        preferredTone: preferences.preferredTone || null,\n        dislikedTopics: preferences.dislikedTopics || [],\n        preferredBiasTypes: preferences.preferredBiasTypes || [],\n        tfIdfProfile: preferences.tfIdfProfile || null,\n        hasCompletedOnboarding: preferences.hasCompletedOnboarding || false,\n        id,\n        lastUpdated: new Date(),\n      };\n      this.userPreferences.set(id, userPreferences);\n      return userPreferences;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14476},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const articles = pgTable(\"articles\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  summary: text(\"summary\"),\n  url: text(\"url\").notNull(),\n  imageUrl: text(\"image_url\"),\n  source: text(\"source\").notNull(),\n  author: text(\"author\"),\n  category: text(\"category\").notNull(), // politics, technology, health, finance, sports\n  publishedAt: timestamp(\"published_at\").notNull(),\n  \n  // AI Analysis\n  politicalBias: text(\"political_bias\").notNull(), // left, right, neutral\n  biasConfidence: real(\"bias_confidence\").notNull().default(0.5),\n  sentimentScore: real(\"sentiment_score\").notNull().default(0.0), // -1 to 1\n  emotionalTone: text(\"emotional_tone\").notNull(), // positive, negative, neutral\n  \n  // Translation status\n  availableLanguages: text(\"available_languages\").array().default([]).notNull(),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const translations = pgTable(\"translations\", {\n  id: serial(\"id\").primaryKey(),\n  articleId: integer(\"article_id\").references(() => articles.id).notNull(),\n  language: text(\"language\").notNull(), // hi, mr, ta, te\n  translatedTitle: text(\"translated_title\").notNull(),\n  translatedContent: text(\"translated_content\").notNull(),\n  translatedSummary: text(\"translated_summary\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTranslationSchema = createInsertSchema(translations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const signupSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\nexport type InsertTranslation = z.infer<typeof insertTranslationSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type SignupData = z.infer<typeof signupSchema>;\nexport type Article = typeof articles.$inferSelect;\nexport type Translation = typeof translations.$inferSelect;\nexport type User = typeof users.$inferSelect;\n\n// Filter types for frontend\nexport const FilterSchema = z.object({\n  categories: z.array(z.string()).optional(),\n  biasTypes: z.array(z.string()).optional(),\n  sentiments: z.array(z.string()).optional(),\n  timeRange: z.string().optional(),\n  search: z.string().optional(),\n  language: z.string().optional(),\n});\n\nexport type FilterState = z.infer<typeof FilterSchema>;\n\n// Language type for frontend\nexport interface Language {\n  code: string;\n  name: string;\n  nativeName: string;\n}\n\n// Message type for chat\nexport interface Message {\n  id: string;\n  text: string;\n  sender: 'user' | 'assistant';\n  sessionId: string;\n  timestamp: Date;\n}\n\n\n// User Interactions for Recommendation System\nexport const userInteractions = pgTable(\"user_interactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  articleId: integer(\"article_id\").references(() => articles.id).notNull(),\n  interactionType: text(\"interaction_type\").notNull(), // 'click', 'view', 'share', 'like'\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  sessionDuration: integer(\"session_duration\"), // in seconds, for view interactions\n  category: text(\"category\").notNull(), // cached from article for faster queries\n  politicalBias: text(\"political_bias\").notNull(), // cached from article\n});\n\n// User Preferences derived from interactions\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull().unique(),\n  preferredCategories: text(\"preferred_categories\").array().default([]).notNull(),\n  preferredLanguages: text(\"preferred_languages\").array().default([]).notNull(),\n  preferredTone: text(\"preferred_tone\"), // 'neutral', 'opinionated', 'emotional'\n  dislikedTopics: text(\"disliked_topics\").array().default([]).notNull(),\n  preferredBiasTypes: text(\"preferred_bias_types\").array().default([]).notNull(),\n  tfIdfProfile: text(\"tf_idf_profile\"), // JSON string of user's TF-IDF profile\n  hasCompletedOnboarding: boolean(\"has_completed_onboarding\").default(false).notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const insertUserInteractionSchema = createInsertSchema(userInteractions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).omit({\n  id: true,\n  lastUpdated: true,\n});\n\n// Schema for user onboarding preferences form\nexport const userOnboardingSchema = z.object({\n  preferredCategories: z.array(z.string()).min(1, \"Please select at least one category\"),\n  preferredLanguages: z.array(z.string()).min(1, \"Please select at least one language\"),\n  preferredTone: z.string().min(1, \"Please select a preferred tone\"),\n  dislikedTopics: z.array(z.string()).optional(),\n});\n\nexport type InsertUserInteraction = z.infer<typeof insertUserInteractionSchema>;\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserInteraction = typeof userInteractions.$inferSelect;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\nexport type UserOnboardingData = z.infer<typeof userOnboardingSchema>;\n","size_bytes":6120},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport { LanguageProvider } from \"@/contexts/language-context\";\nimport { AuthProvider, useAuth } from \"@/contexts/auth-context\";\nimport { BlockchainProvider } from \"@/contexts/blockchain-context\";\nimport { useEffect } from \"react\";\nimport type { UserPreferences } from \"@shared/schema\";\nimport Home from \"@/pages/home\";\nimport ChatPage from \"@/pages/chat\";\nimport CommunityPage from \"@/pages/community\";\nimport BlockchainPage from \"@/pages/blockchain\";\nimport { RecommendationsPage } from \"@/pages/recommendations\";\nimport UserPreferencesPage from \"@/pages/user-preferences\";\n\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedRouter() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-black\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={LoginPage} />\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/signup\" component={SignupPage} />\n        <Route component={LoginPage} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/preferences\" component={UserPreferencesPage} />\n      <Route path=\"/chat\" component={ChatPage} />\n      <Route path=\"/community\" component={CommunityPage} />\n      <Route path=\"/blockchain\" component={BlockchainPage} />\n      <Route path=\"/recommendations\" component={RecommendationsPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <LanguageProvider>\n          <ThemeProvider>\n            <BlockchainProvider>\n              <TooltipProvider>\n                <Toaster />\n                <AuthenticatedRouter />\n              </TooltipProvider>\n            </BlockchainProvider>\n          </ThemeProvider>\n        </LanguageProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2748},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.8s ease-out;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(45, 93%, 47%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom utilities for enhanced UX */\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(45, 93%, 47%) 100%);\n  }\n  \n  .gradient-secondary {\n    background: linear-gradient(135deg, hsl(45, 93%, 47%) 0%, hsl(207, 90%, 54%) 100%);\n  }\n  \n  .gradient-accent {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(330, 60%, 45%) 100%);\n  }\n  \n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n  }\n  \n  .pulse-subtle {\n    animation: pulse-subtle 2s infinite;\n  }\n  \n  @keyframes pulse-subtle {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.8;\n    }\n  }\n  \n  .float-animation {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-5px);\n    }\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.5s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  .slide-in-right {\n    animation: slideInRight 0.3s ease-out;\n  }\n  \n  @keyframes slideInRight {\n    from {\n      opacity: 0;\n      transform: translateX(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n}\n","size_bytes":3003},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiService.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\ninterface ArticleAnalysis {\n  summary: string;\n  category: string;\n  bias: 'left' | 'right' | 'neutral';\n  biasConfidence: number;\n  sentimentScore: number;\n  emotionalTone: 'positive' | 'negative' | 'neutral';\n}\n\nclass AIService {\n  private gemini: GoogleGenAI;\n\n  constructor() {\n    const apiKey = process.env.GEMINI_API_KEY || '';\n    if (!apiKey) {\n      console.warn('GEMINI_API_KEY not found in environment variables');\n    }\n    \n    this.gemini = new GoogleGenAI({ apiKey });\n  }\n\n  async analyzeArticle(title: string, content: string): Promise<ArticleAnalysis> {\n    if (!process.env.GEMINI_API_KEY) {\n      // Return default analysis if no API key\n      return this.getDefaultAnalysis(title, content);\n    }\n\n    try {\n      const systemPrompt = `Analyze the news article and return structured JSON with these fields:\n- summary: Key points in 2-3 sentences\n- category: general, politics, technology, health, finance, or sports\n- bias: left, right, or neutral\n- biasConfidence: 0-1 confidence score\n- sentimentScore: -1 (negative) to 1 (positive)\n- emotionalTone: positive, negative, or neutral\n\nTitle: ${title}\nContent: ${content.substring(0, 2000)}`;\n\n      const response = await this.gemini.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              summary: { type: \"string\" },\n              category: { type: \"string\" },\n              bias: { type: \"string\" },\n              biasConfidence: { type: \"number\" },\n              sentimentScore: { type: \"number\" },\n              emotionalTone: { type: \"string\" }\n            },\n            required: [\"summary\", \"category\", \"bias\", \"biasConfidence\", \"sentimentScore\", \"emotionalTone\"]\n          }\n        },\n        contents: `Analyze this news article: Title: ${title}\\n\\nContent: ${content.substring(0, 2000)}`\n      });\n\n      const analysisText = response.text;\n      if (!analysisText) {\n        throw new Error(\"Empty response from Gemini\");\n      }\n\n      const analysis = JSON.parse(analysisText);\n      \n      // Validate and sanitize response\n      return {\n        summary: analysis.summary || this.generateFallbackSummary(content),\n        category: this.validateCategory(analysis.category),\n        bias: this.validateBias(analysis.bias),\n        biasConfidence: Math.max(0, Math.min(1, analysis.biasConfidence || 0.5)),\n        sentimentScore: Math.max(-1, Math.min(1, analysis.sentimentScore || 0)),\n        emotionalTone: this.validateEmotionalTone(analysis.emotionalTone),\n      };\n    } catch (error) {\n      console.error('AI analysis error:', error);\n      return this.getDefaultAnalysis(title, content);\n    }\n  }\n\n  private getDefaultAnalysis(title: string, content: string): ArticleAnalysis {\n    return {\n      summary: this.generateFallbackSummary(content),\n      category: this.inferCategoryFromText(title + ' ' + content),\n      bias: 'neutral',\n      biasConfidence: 0.3,\n      sentimentScore: 0,\n      emotionalTone: 'neutral',\n    };\n  }\n\n  private generateFallbackSummary(content: string): string {\n    // Simple fallback: take first 2 sentences or first 200 chars\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    if (sentences.length >= 2) {\n      return sentences.slice(0, 2).join('. ').trim() + '.';\n    }\n    return content.substring(0, 200).trim() + '...';\n  }\n\n  private inferCategoryFromText(text: string): string {\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes('government') || lowerText.includes('election') || lowerText.includes('parliament') || lowerText.includes('policy')) {\n      return 'politics';\n    }\n    if (lowerText.includes('technology') || lowerText.includes('ai') || lowerText.includes('software') || lowerText.includes('startup')) {\n      return 'technology';\n    }\n    if (lowerText.includes('health') || lowerText.includes('medical') || lowerText.includes('hospital') || lowerText.includes('disease')) {\n      return 'health';\n    }\n    if (lowerText.includes('economy') || lowerText.includes('market') || lowerText.includes('finance') || lowerText.includes('gdp') || lowerText.includes('rupee')) {\n      return 'finance';\n    }\n    if (lowerText.includes('cricket') || lowerText.includes('football') || lowerText.includes('sports') || lowerText.includes('match')) {\n      return 'sports';\n    }\n    \n    return 'general';\n  }\n\n  private validateCategory(category: string): string {\n    const validCategories = ['politics', 'technology', 'health', 'finance', 'sports'];\n    return validCategories.includes(category) ? category : 'general';\n  }\n\n  private validateBias(bias: string): 'left' | 'right' | 'neutral' {\n    const validBias = ['left', 'right', 'neutral'];\n    return validBias.includes(bias) ? bias as 'left' | 'right' | 'neutral' : 'neutral';\n  }\n\n  private validateEmotionalTone(tone: string): 'positive' | 'negative' | 'neutral' {\n    const validTones = ['positive', 'negative', 'neutral'];\n    return validTones.includes(tone) ? tone as 'positive' | 'negative' | 'neutral' : 'neutral';\n  }\n\n  async generateNewsArticle(category: string, topic?: string): Promise<{title: string, content: string, urlToImage?: string}> {\n    if (!process.env.GEMINI_API_KEY) {\n      throw new Error('Gemini API key not configured');\n    }\n\n    try {\n      const prompt = topic \n        ? `Generate a realistic news article about ${topic} in the ${category} category.`\n        : `Generate a realistic news article in the ${category} category about current trending topics.`;\n\n      const systemPrompt = `Generate a news article with proper journalistic structure. Return JSON with title, content (300-500 words), and urlToImage. Include realistic quotes and details while maintaining professional news writing standards.`;\n\n      const response = await this.gemini.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n              urlToImage: { type: \"string\" }\n            },\n            required: [\"title\", \"content\"]\n          }\n        },\n        contents: prompt\n      });\n\n      const articleText = response.text;\n      if (!articleText) {\n        throw new Error(\"Empty response from Gemini\");\n      }\n\n      const article = JSON.parse(articleText);\n      \n      return {\n        title: article.title || \"Generated News Article\",\n        content: article.content || \"Content generation failed.\",\n        urlToImage: article.urlToImage\n      };\n    } catch (error) {\n      console.error('News generation error:', error);\n      throw new Error(`Failed to generate news article: ${error}`);\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":7063},"server/services/newsService.ts":{"content":"import { storage } from '../storage';\nimport { aiService } from './aiService';\nimport { getArticleImage } from '../utils/imageMapping';\nimport type { InsertArticle } from '@shared/schema';\n\ninterface NewsAPIArticle {\n  title: string;\n  description: string;\n  content: string;\n  url: string;\n  urlToImage: string;\n  publishedAt: string;\n  source: {\n    name: string;\n  };\n  author: string;\n}\n\ninterface NewsAPIResponse {\n  articles: NewsAPIArticle[];\n}\n\nclass NewsService {\n  private readonly apiKey: string;\n  private readonly baseUrl = 'https://newsapi.org/v2';\n  private readonly indianNewsSourceUrls = [\n    'https://www.thehindu.com',\n    'https://www.ndtv.com', \n    'https://indianexpress.com',\n    'https://www.business-standard.com'\n  ];\n\n  constructor() {\n    this.apiKey = process.env.NEWS_API_KEY || process.env.NEWSAPI_KEY || '';\n    if (!this.apiKey) {\n      console.warn('NEWS_API_KEY not found in environment variables');\n    }\n  }\n\n  private getDistributedSourceUrl(index: number): string {\n    return this.indianNewsSourceUrls[index % this.indianNewsSourceUrls.length];\n  }\n\n  async fetchLatestNews(category?: string, country = 'in'): Promise<void> {\n    if (!this.apiKey) {\n      throw new Error('News API key not configured');\n    }\n\n    try {\n      const url = new URL(`${this.baseUrl}/top-headlines`);\n      url.searchParams.set('apiKey', this.apiKey);\n      url.searchParams.set('country', country);\n      url.searchParams.set('pageSize', '20');\n      \n      if (category) {\n        url.searchParams.set('category', category);\n      }\n\n      const response = await fetch(url.toString());\n      \n      if (!response.ok) {\n        throw new Error(`News API error: ${response.status} - ${response.statusText}`);\n      }\n\n      const data: NewsAPIResponse = await response.json();\n\n      // Process each article with distributed URLs\n      for (let index = 0; index < data.articles.length; index++) {\n        try {\n          await this.processAndStoreArticle(data.articles[index], index);\n        } catch (error) {\n          console.error('Error processing article:', data.articles[index].title, error);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      throw error;\n    }\n  }\n\n  private async processAndStoreArticle(newsArticle: NewsAPIArticle, index: number = 0): Promise<void> {\n    // Check if article already exists\n    const existingArticles = await storage.getArticles({ search: newsArticle.title, language: 'en' });\n    if (existingArticles.some(a => a.url === newsArticle.url)) {\n      return; // Skip duplicate\n    }\n\n    // Analyze the article with AI\n    const analysis = await aiService.analyzeArticle(\n      newsArticle.title,\n      newsArticle.content || newsArticle.description || ''\n    );\n\n    // Create article object with distributed source URL\n    const article: InsertArticle = {\n      title: newsArticle.title,\n      content: newsArticle.content || newsArticle.description || '',\n      summary: analysis.summary,\n      url: this.getDistributedSourceUrl(index),\n      imageUrl: newsArticle.urlToImage || getArticleImage(analysis.category, newsArticle.title, newsArticle.content || newsArticle.description),\n      source: newsArticle.source.name,\n      author: newsArticle.author,\n      category: analysis.category,\n      publishedAt: new Date(newsArticle.publishedAt),\n      politicalBias: analysis.bias,\n      biasConfidence: analysis.biasConfidence,\n      sentimentScore: analysis.sentimentScore,\n      emotionalTone: analysis.emotionalTone,\n      availableLanguages: [],\n    };\n\n    // Store in database\n    await storage.createArticle(article);\n  }\n\n  async refreshAllCategories(): Promise<void> {\n    const categories = ['general', 'business', 'health', 'science', 'sports', 'technology'];\n    \n    for (const category of categories) {\n      try {\n        await this.fetchLatestNews(category);\n        // Add delay to respect API rate limits\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error(`Error fetching ${category} news:`, error);\n      }\n    }\n  }\n\n  async generateNewsArticles(count: number = 5): Promise<void> {\n    const categories = ['general', 'politics', 'technology', 'health', 'finance', 'sports'];\n    \n    console.log(`Generating ${count} new editorial articles...`);\n    \n    for (let i = 0; i < count; i++) {\n      try {\n        const category = categories[i % categories.length];\n        const generatedArticle = await aiService.generateNewsArticle(category);\n        \n        // Analyze the generated article\n        const analysis = await aiService.analyzeArticle(\n          generatedArticle.title,\n          generatedArticle.content\n        );\n\n        // Create article object with distributed source URL\n        const article: InsertArticle = {\n          title: generatedArticle.title,\n          content: generatedArticle.content,\n          summary: analysis.summary,\n          url: this.getDistributedSourceUrl(i),\n          imageUrl: generatedArticle.urlToImage || getArticleImage(analysis.category, generatedArticle.title, generatedArticle.content),\n          source: 'Editorial Team',\n          author: 'Staff Writer',\n          category: analysis.category,\n          publishedAt: new Date(),\n          politicalBias: analysis.bias,\n          biasConfidence: analysis.biasConfidence,\n          sentimentScore: analysis.sentimentScore,\n          emotionalTone: analysis.emotionalTone,\n          availableLanguages: [],\n        };\n\n        // Store in database\n        await storage.createArticle(article);\n        console.log(`Generated article: ${generatedArticle.title}`);\n        \n        // Add delay between generations\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error(`Error generating article ${i + 1}:`, error);\n      }\n    }\n  }\n\n  async generateAndRefresh(): Promise<void> {\n    try {\n      // Generate editorial content\n      await this.generateNewsArticles(3);\n    } catch (error) {\n      console.error('Error generating editorial articles:', error);\n    }\n    \n    // Then try to fetch from News API if available\n    if (this.apiKey) {\n      try {\n        await this.refreshAllCategories();\n      } catch (error) {\n        console.error('Error fetching from News API:', error);\n      }\n    }\n  }\n}\n\nexport const newsService = new NewsService();\n","size_bytes":6401},"server/services/recommendationService.ts":{"content":"import { recommendationEngine } from './recommendationEngine';\nimport type { Article, UserInteraction } from '@shared/schema';\n\n/**\n * Backward compatibility adapter for the recommendation system\n */\nexport class RecommendationService {\n  constructor() {\n    // Using new modular recommendation engine\n  }\n\n  /**\n   * Build TF-IDF model from all articles\n   */\n  async buildTfIdfModel(articles: Article[]): Promise<void> {\n    await recommendationEngine.initialize(articles);\n  }\n\n\n  /**\n   * Get personalized recommendations for a user\n   */\n  async getRecommendations(\n    userId: number, \n    interactions: UserInteraction[], \n    articles: Article[], \n    excludeArticleIds: number[] = [],\n    limit: number = 10\n  ): Promise<Array<{article: Article, score: number, reason: string}>> {\n    return recommendationEngine.getRecommendations(\n      userId,\n      interactions,\n      articles,\n      excludeArticleIds,\n      limit\n    );\n  }\n\n\n  /**\n   * Update user preferences in storage format\n   */\n  async generateUserPreferencesData(userId: number, interactions: UserInteraction[]) {\n    return recommendationEngine.exportUserPreferences(userId, interactions);\n  }\n}\n\nexport const recommendationService = new RecommendationService();","size_bytes":1237},"server/services/translationService.ts":{"content":"import { storage } from '../storage';\nimport type { InsertTranslation } from '@shared/schema';\n\ninterface GoogleTranslateResponse {\n  data: {\n    translations: Array<{\n      translatedText: string;\n    }>;\n  };\n}\n\nclass TranslationService {\n  private readonly apiKey: string;\n  private readonly baseUrl = 'https://translation.googleapis.com/language/translate/v2';\n\n  constructor() {\n    this.apiKey = process.env.GOOGLE_TRANSLATE_API_KEY || process.env.GOOGLE_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('GOOGLE_TRANSLATE_API_KEY not found in environment variables');\n    }\n  }\n\n  private async translateText(text: string, targetLanguage: string, sourceLanguage = 'en'): Promise<string> {\n    if (!this.apiKey) {\n      throw new Error('Google Translate API key not configured');\n    }\n\n    try {\n      const url = `${this.baseUrl}?key=${this.apiKey}`;\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          q: text,\n          source: sourceLanguage,\n          target: targetLanguage,\n          format: 'text',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Translation API error: ${response.status} - ${response.statusText}`);\n      }\n\n      const data: GoogleTranslateResponse = await response.json();\n      return data.data.translations[0].translatedText;\n    } catch (error) {\n      console.error('Translation error:', error);\n      throw error;\n    }\n  }\n\n  async translateArticle(articleId: number, language: string): Promise<InsertTranslation> {\n    // Check if translation already exists\n    const existingTranslation = await storage.getTranslation(articleId, language);\n    if (existingTranslation) {\n      return existingTranslation;\n    }\n\n    // Get the article\n    const article = await storage.getArticleById(articleId);\n    if (!article) {\n      throw new Error('Article not found');\n    }\n\n    try {\n      // Translate title, content, and summary\n      const [translatedTitle, translatedContent, translatedSummary] = await Promise.all([\n        this.translateText(article.title, language),\n        this.translateText(article.content, language),\n        article.summary ? this.translateText(article.summary, language) : Promise.resolve(''),\n      ]);\n\n      // Create translation\n      const translation: InsertTranslation = {\n        articleId,\n        language,\n        translatedTitle,\n        translatedContent,\n        translatedSummary,\n      };\n\n      const savedTranslation = await storage.createTranslation(translation);\n\n      // Update article's available languages\n      const updatedLanguages = Array.from(new Set([...article.availableLanguages, language]));\n      await storage.updateArticle(articleId, { availableLanguages: updatedLanguages });\n\n      return savedTranslation;\n    } catch (error) {\n      console.error('Error translating article:', error);\n      throw error;\n    }\n  }\n\n  async translateAllArticles(language: string): Promise<{ translated: number; skipped: number; errors: number }> {\n    if (language === 'en') {\n      throw new Error('Cannot translate to English as it is the source language');\n    }\n\n    const allArticles = await storage.getArticles({ language: 'en' }, 1000, 0); // Get all articles\n    let translated = 0;\n    let skipped = 0;\n    let errors = 0;\n\n    console.log(`Starting bulk translation of ${allArticles.length} articles to ${language}`);\n\n    // Process articles in batches to avoid overwhelming the API\n    const batchSize = 5;\n    for (let i = 0; i < allArticles.length; i += batchSize) {\n      const batch = allArticles.slice(i, i + batchSize);\n      \n      const promises = batch.map(async (article) => {\n        try {\n          // Check if translation already exists\n          const existingTranslation = await storage.getTranslation(article.id, language);\n          if (existingTranslation) {\n            skipped++;\n            return { success: true, skipped: true };\n          }\n\n          await this.translateArticle(article.id, language);\n          translated++;\n          return { success: true, skipped: false };\n        } catch (error) {\n          console.error(`Error translating article ${article.id}:`, error);\n          errors++;\n          return { success: false, error };\n        }\n      });\n\n      await Promise.allSettled(promises);\n      \n      // Add a small delay between batches to be respectful to the API\n      if (i + batchSize < allArticles.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n\n    console.log(`Bulk translation completed: ${translated} translated, ${skipped} skipped, ${errors} errors`);\n    return { translated, skipped, errors };\n  }\n\n  async getAvailableLanguages(): Promise<Array<{ code: string; name: string; nativeName: string }>> {\n    return [\n      { code: 'en', name: 'English', nativeName: 'English' },\n      { code: 'hi', name: 'Hindi', nativeName: 'हिंदी' },\n      { code: 'mr', name: 'Marathi', nativeName: 'मराठी' },\n      { code: 'kn', name: 'Kannada', nativeName: 'ಕನ್ನಡ' },\n      { code: 'ta', name: 'Tamil', nativeName: 'தமிழ்' },\n      { code: 'te', name: 'Telugu', nativeName: 'తెలుగు' },\n    ];\n  }\n}\n\nexport const translationService = new TranslationService();\n","size_bytes":5369},"server/utils/imageMapping.ts":{"content":"// Category-based image mapping for news articles\n// Each category has multiple relevant images that can be randomly selected\n\ninterface CategoryImages {\n  [key: string]: string[];\n}\n\nconst categoryImages: CategoryImages = {\n  general: [\n    \"https://images.unsplash.com/photo-1504711434969-e33886168f5c?w=400\", // News stand\n    \"https://images.unsplash.com/photo-1586880244386-8b3e34d8b844?w=400\", // People reading\n    \"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=400\", // Community\n    \"https://images.unsplash.com/photo-1582213782179-e0d53f98f2ca?w=400\", // Discussion\n    \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400\", // Yoga/lifestyle\n    \"https://images.unsplash.com/photo-1509391366360-2e959784a276?w=400\", // Solar panels\n  ],\n  \n  politics: [\n    \"https://images.unsplash.com/photo-1586880244386-8b3e34d8b844?w=400\", // Parliament/Government\n    \"https://images.unsplash.com/photo-1529107386315-e1a2ed48a620?w=400\", // Voting\n    \"https://images.unsplash.com/photo-1569504275102-9ba3e7e4e3d5?w=400\", // Capitol building\n    \"https://images.unsplash.com/photo-1577962917302-cd874c4e31d2?w=400\", // Political rally\n    \"https://images.unsplash.com/photo-1495650962430-d3d9c7e2f453?w=400\", // Government building\n  ],\n  \n  technology: [\n    \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=400\", // AI/Technology\n    \"https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400\", // AI/Robotics\n    \"https://images.unsplash.com/photo-1614728263952-84ea256f9679?w=400\", // Satellites/Space tech\n    \"https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=400\", // Computers\n    \"https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?w=400\", // Transportation tech\n    \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400\", // Data/Tech\n  ],\n  \n  health: [\n    \"https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=400\", // Healthcare\n    \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=400\", // Medical equipment\n    \"https://images.unsplash.com/photo-1551190822-a9333d879b1f?w=400\", // Hospital\n    \"https://images.unsplash.com/photo-1579154204601-01588f351e67?w=400\", // Telemedicine\n    \"https://images.unsplash.com/photo-1530026405186-ed1f139313f8?w=400\", // Medical research\n    \"https://images.unsplash.com/photo-1559757175-0eb30cd8ebb6?w=400\", // Healthcare tech\n  ],\n  \n  finance: [\n    \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=400\", // Stock market\n    \"https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?w=400\", // Banking\n    \"https://images.unsplash.com/photo-1569025690938-a000c1d17d98?w=400\", // Finance charts\n    \"https://images.unsplash.com/photo-1554224155-8d04cb21cd6c?w=400\", // Money/economy\n    \"https://images.unsplash.com/photo-1526304640581-d334cdbbf45e?w=400\", // Business growth\n    \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=400\", // Financial analytics\n  ],\n  \n  sports: [\n    \"https://images.unsplash.com/photo-1531415074968-036ba1b575da?w=400\", // Cricket\n    \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400\", // Women's cricket\n    \"https://images.unsplash.com/photo-1517649763962-0c623066013b?w=400\", // Stadium\n    \"https://images.unsplash.com/photo-1520038410233-7141be7e6f97?w=400\", // Sports team\n    \"https://images.unsplash.com/photo-1546519638-68e109498ffc?w=400\", // Sports action\n    \"https://images.unsplash.com/photo-1593766827228-8737b4534aa5?w=400\", // Trophy/victory\n  ]\n};\n\n/**\n * Get a random image URL for a specific news category\n * @param category - The news category (general, politics, technology, health, finance, sports)\n * @returns A random image URL appropriate for the category\n */\nexport function getCategoryImage(category: string): string {\n  const normalizedCategory = category.toLowerCase();\n  const images = categoryImages[normalizedCategory];\n  \n  if (!images || images.length === 0) {\n    // Fallback to general category if category not found\n    const generalImages = categoryImages.general;\n    return generalImages[Math.floor(Math.random() * generalImages.length)];\n  }\n  \n  // Return a random image from the category\n  return images[Math.floor(Math.random() * images.length)];\n}\n\n/**\n * Get an image URL that matches article content or falls back to category image\n * @param category - The news category\n * @param title - Article title for content-based matching\n * @param content - Article content for content-based matching\n * @returns An appropriate image URL\n */\nexport function getArticleImage(category: string, title: string, content?: string): string {\n  const normalizedCategory = category.toLowerCase();\n  \n  // Content-based image selection for specific keywords\n  const contentText = `${title} ${content || ''}`.toLowerCase();\n  \n  // Special keyword matching for more specific images\n  if (contentText.includes('space') || contentText.includes('isro') || contentText.includes('satellite')) {\n    return \"https://images.unsplash.com/photo-1446776877081-d282a0f896e2?w=400\";\n  }\n  \n  if (contentText.includes('ai') || contentText.includes('artificial intelligence')) {\n    return \"https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400\";\n  }\n  \n  if (contentText.includes('cricket') && contentText.includes('women')) {\n    return \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400\";\n  }\n  \n  if (contentText.includes('yoga') || contentText.includes('योग')) {\n    return \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400\";\n  }\n  \n  if (contentText.includes('solar') || contentText.includes('सौर')) {\n    return \"https://images.unsplash.com/photo-1509391366360-2e959784a276?w=400\";\n  }\n  \n  if (contentText.includes('train') || contentText.includes('railway') || contentText.includes('रेलवे')) {\n    return \"https://images.unsplash.com/photo-1544620347-c4fd4a3d5957?w=400\";\n  }\n  \n  if (contentText.includes('telemedicine') || contentText.includes('digital health')) {\n    return \"https://images.unsplash.com/photo-1579154204601-01588f351e67?w=400\";\n  }\n  \n  if (contentText.includes('parliament') || contentText.includes('supreme court')) {\n    return \"https://images.unsplash.com/photo-1586880244386-8b3e34d8b844?w=400\";\n  }\n  \n  // Fall back to category-based selection\n  return getCategoryImage(normalizedCategory);\n}\n\nexport default {\n  getCategoryImage,\n  getArticleImage\n};","size_bytes":6423},"client/src/components/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Shield } from \"lucide-react\";\n\ninterface HeaderProps {\n  title?: string;\n  subtitle?: string;\n  showBackButton?: boolean;\n  backUrl?: string;\n  badge?: string;\n}\n\nexport function Header({ \n  title = \"Varta.AI\", \n  subtitle = \"Analyze. Summarize. Detect Bias.\",\n  showBackButton = true,\n  backUrl = \"/\",\n  badge\n}: HeaderProps) {\n  return (\n    <header className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\n      <div className=\"max-w-6xl mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 lg:gap-4 min-w-0 flex-1\">\n            {showBackButton && (\n              <Link href={backUrl}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-blue-600 hover:bg-blue-50 flex-shrink-0\">\n                  <ArrowLeft className=\"h-4 w-4 mr-1 lg:mr-2\" />\n                  <span className=\"hidden sm:inline\">Back to News</span>\n                  <span className=\"sm:hidden\">Back</span>\n                </Button>\n              </Link>\n            )}\n            <div className=\"flex items-center gap-2 lg:gap-3 min-w-0\">\n              <Shield className=\"h-5 w-5 lg:h-6 lg:w-6 text-blue-600 flex-shrink-0\" />\n              <div className=\"min-w-0\">\n                <h1 className=\"text-lg lg:text-xl font-semibold text-gray-900 truncate\">{title}</h1>\n                <p className=\"text-xs lg:text-sm text-gray-500 truncate\">{subtitle}</p>\n              </div>\n            </div>\n          </div>\n          \n          {badge && (\n            <div className=\"flex items-center gap-2 lg:gap-3 flex-shrink-0\">\n              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 text-xs\">\n                {badge}\n              </Badge>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":1977},"client/src/components/news-article-card.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Languages, Share2, Bookmark, Smile, Meh, Frown, ChevronDown, ChevronUp, ExternalLink, Calendar, User, MessageSquare } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { VerificationBadge } from \"@/components/verification-badge\";\nimport type { Article, Translation } from \"@shared/schema\";\nimport { BIAS_COLORS, SENTIMENT_COLORS, CATEGORY_COLORS } from \"@/lib/types\";\n\ninterface NewsArticleCardProps {\n  article: Article;\n  onTranslate: (article: Article) => void;\n}\n\nexport function NewsArticleCard({ article, onTranslate }: NewsArticleCardProps) {\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { theme } = useTheme();\n  const { t } = useLanguage();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const formatTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const published = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - published.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} days ago`;\n    return published.toLocaleDateString();\n  };\n\n  const getBiasColor = (bias: string) => {\n    return BIAS_COLORS[bias as keyof typeof BIAS_COLORS] || BIAS_COLORS.neutral;\n  };\n\n  const getCategoryColor = (category: string) => {\n    return CATEGORY_COLORS[category as keyof typeof CATEGORY_COLORS] || CATEGORY_COLORS.general;\n  };\n\n  const getSentimentIcon = () => {\n    switch (article.emotionalTone) {\n      case 'positive': return <Smile className=\"h-3 w-3 text-green-500\" />;\n      case 'negative': return <Frown className=\"h-3 w-3 text-red-500\" />;\n      default: return <Meh className=\"h-3 w-3 text-gray-500\" />;\n    }\n  };\n\n  const getLanguageIndicators = () => {\n    const languageMap: Record<string, { code: string; color: string }> = {\n      'hi': { code: 'हि', color: 'bg-blue-100 text-blue-600' },\n      'mr': { code: 'म', color: 'bg-red-100 text-red-600' },\n      'ta': { code: 'த', color: 'bg-green-100 text-green-600' },\n      'te': { code: 'తె', color: 'bg-purple-100 text-purple-600' },\n    };\n\n    return article.availableLanguages.map((lang) => {\n      const langInfo = languageMap[lang];\n      if (!langInfo) return null;\n      \n      return (\n        <span \n          key={lang}\n          className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-medium border-2 border-white ${langInfo.color}`}\n          title={`Available in ${lang}`}\n        >\n          {langInfo.code}\n        </span>\n      );\n    }).filter(Boolean);\n  };\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: article.title,\n          text: article.summary || '',\n          url: article.url,\n        });\n      } catch (error) {\n        console.log('Share cancelled');\n      }\n    } else {\n      // Fallback to copy to clipboard\n      await navigator.clipboard.writeText(article.url);\n    }\n  };\n\n  const handleAskAI = () => {\n    // Prepare the article content for AI analysis\n    const articleContent = `Title: ${article.title}\\n\\nSummary: ${article.summary || 'No summary available'}\\n\\nContent: ${article.content}\\n\\nSource: ${article.source}\\nPublished: ${new Date(article.publishedAt).toLocaleDateString()}`;\n    \n    // Store the article content in sessionStorage so it can be retrieved by the chat page\n    sessionStorage.setItem('articleForAnalysis', articleContent);\n    \n    // Navigate to the chat page\n    setLocation('/chat');\n  };\n\n  return (\n    <Card className={`hover:shadow-md transition-all duration-300 hover-lift border ${\n      theme === 'creative' ? 'glass-morphism' : 'bg-card border-border'\n    }`}>\n      <div className=\"p-6\">\n        <div className=\"flex flex-wrap items-center gap-2 mb-3\">\n          <Badge \n            style={{ backgroundColor: getCategoryColor(article.category) }}\n            className={`text-white capitalize transition-all duration-200 ${\n              theme === 'creative' ? 'shadow-lg hover:scale-105' : ''\n            }`}\n          >\n            {article.category}\n          </Badge>\n          \n          <div className=\"flex items-center space-x-1\">\n            <div \n              className=\"w-2 h-2 rounded-full\" \n              style={{ backgroundColor: getBiasColor(article.politicalBias) }}\n              title={`${article.politicalBias} bias`}\n            ></div>\n            <span className=\"text-xs text-gray-500 capitalize\">{article.politicalBias}-leaning</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-1\">\n            {getSentimentIcon()}\n            <span className=\"text-xs text-gray-500 capitalize\">{article.emotionalTone} tone</span>\n          </div>\n          \n          <VerificationBadge sourceUrl={article.source} className=\"ml-auto\" />\n          \n          <span className=\"text-xs text-gray-400\">{formatTimeAgo(article.publishedAt)}</span>\n        </div>\n        \n        <div className=\"flex gap-4\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2 line-clamp-2\">\n              {article.title}\n            </h2>\n            \n            {article.summary && (\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4 line-clamp-3\">\n                {article.summary}\n              </p>\n            )}\n\n            {/* Expandable Content */}\n            {isExpanded && (\n              <div className=\"space-y-4 mb-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border-l-4 border-primary\">\n                <div>\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">Full Article</h3>\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-line\">\n                    {article.content}\n                  </p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-600\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2\">\n                      <User className=\"h-4 w-4\" />\n                      Article Details\n                    </h4>\n                    <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>Published: {new Date(article.publishedAt).toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric', \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}</span>\n                      </div>\n                      <div>Source: {article.source}</div>\n                      {article.author && <div>Author: {article.author}</div>}\n                      <div>Category: <span className=\"capitalize\">{article.category}</span></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">AI Analysis</h4>\n                    <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: getBiasColor(article.politicalBias) }}\n                        ></div>\n                        <span>Political Bias: <span className=\"capitalize\">{article.politicalBias}</span> (Confidence: {Math.round(article.biasConfidence * 100)}%)</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {getSentimentIcon()}\n                        <span>Sentiment Score: {article.sentimentScore > 0 ? '+' : ''}{article.sentimentScore.toFixed(2)}</span>\n                      </div>\n                      <div>Emotional Tone: <span className=\"capitalize\">{article.emotionalTone}</span></div>\n                    </div>\n                  </div>\n                </div>\n                \n                {article.url && (\n                  <div className=\"pt-3 border-t border-gray-200 dark:border-gray-600\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full\"\n                      onClick={() => window.open(article.url, '_blank')}\n                    >\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      {t.readMore}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* See More/Less Button */}\n            <div className=\"mb-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                className=\"text-primary hover:text-primary/80 p-0 h-auto font-medium\"\n              >\n                {isExpanded ? (\n                  <>\n                    <ChevronUp className=\"h-4 w-4 mr-1\" />\n                    {t.close}\n                  </>\n                ) : (\n                  <>\n                    <ChevronDown className=\"h-4 w-4 mr-1\" />\n                    {t.readMore}\n                  </>\n                )}\n              </Button>\n            </div>\n            \n            <div className=\"flex flex-wrap items-center justify-between gap-4\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">{article.source}</span>\n                <span className=\"text-sm text-gray-400 dark:text-gray-500\">•</span>\n                {article.author && (\n                  <span className=\"text-sm text-gray-500 dark:text-gray-400\">By {article.author}</span>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {article.availableLanguages.length > 0 && (\n                  <div className=\"flex -space-x-1\">\n                    {getLanguageIndicators()}\n                  </div>\n                )}\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => onTranslate(article)}\n                  className=\"text-primary hover:text-primary/80\"\n                >\n                  <Languages className=\"h-4 w-4 mr-1\" />\n                  {t.translate}\n                </Button>\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={handleAskAI}\n                  className=\"text-purple-600 hover:text-purple-700 transition-colors\"\n                  title=\"Analyze article with AI\"\n                  data-testid=\"button-ask-ai\"\n                >\n                  <MessageSquare className=\"h-4 w-4 mr-1\" />\n                  Ask AI\n                </Button>\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={handleShare}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  <Share2 className=\"h-4 w-4 mr-1\" />\n                  Share\n                </Button>\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setIsBookmarked(!isBookmarked)}\n                  className={isBookmarked ? \"text-yellow-500\" : \"text-gray-500 hover:text-gray-700\"}\n                >\n                  <Bookmark className=\"h-4 w-4 mr-1\" />\n                  Save\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          {article.imageUrl && (\n            <div className=\"w-32 h-24 flex-shrink-0\">\n              <img \n                src={article.imageUrl} \n                alt={article.title}\n                className=\"w-full h-full object-cover rounded-lg\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":13145},"client/src/components/news-filters.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Smile, Meh, Frown, Filter } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport type { FilterState } from \"@shared/schema\";\nimport type { NewsStats } from \"@/lib/types\";\n\ninterface NewsFiltersProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n}\n\nexport function NewsFilters({ filters, onFiltersChange }: NewsFiltersProps) {\n  const { theme } = useTheme();\n  const { t } = useLanguage();\n  const { data: stats } = useQuery<NewsStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  const updateFilter = (key: keyof FilterState, value: any) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value,\n    });\n  };\n\n  const toggleCategory = (category: string) => {\n    const categories = filters.categories || [];\n    if (categories.includes(category)) {\n      updateFilter('categories', categories.filter((c: string) => c !== category));\n    } else {\n      updateFilter('categories', [...categories, category]);\n    }\n  };\n\n  const toggleBias = (bias: string) => {\n    const biasTypes = filters.biasTypes || [];\n    if (biasTypes.includes(bias)) {\n      updateFilter('biasTypes', biasTypes.filter((b: string) => b !== bias));\n    } else {\n      updateFilter('biasTypes', [...biasTypes, bias]);\n    }\n  };\n\n  const toggleSentiment = (sentiment: string) => {\n    const sentiments = filters.sentiments || [];\n    if (sentiments.includes(sentiment)) {\n      updateFilter('sentiments', sentiments.filter((s: string) => s !== sentiment));\n    } else {\n      updateFilter('sentiments', [...sentiments, sentiment]);\n    }\n  };\n\n  const isAllCategoriesSelected = !filters.categories || filters.categories.length === 0;\n  const isAllBiasSelected = !filters.biasTypes || filters.biasTypes.length === 0;\n\n  const getCategoryName = (category: string) => {\n    const categoryMap: { [key: string]: keyof typeof t } = {\n      politics: 'politics',\n      technology: 'technology',\n      sports: 'sports',\n      business: 'business',\n      entertainment: 'entertainment',\n      health: 'health',\n      science: 'science',\n      education: 'education',\n    };\n    return categoryMap[category] ? t[categoryMap[category]] : category;\n  };\n\n  return (\n    <Card className={`p-6 transition-all duration-300 hover-lift ${\n      theme === 'creative' ? 'glass-morphism' : 'bg-card border-border'\n    }`}>\n      <div className=\"flex items-center gap-2 mb-4\">\n        <Filter className={`h-5 w-5 ${\n          theme === 'creative' ? 'text-primary pulse-subtle' : 'text-foreground'\n        }`} />\n        <h3 className=\"font-semibold text-foreground\">{t.filters}</h3>\n      </div>\n      \n      {/* Category Filter */}\n      <div className=\"mb-6\">\n        <h4 className=\"font-medium text-gray-700 mb-3\">{t.categories}</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"all-categories\" \n              checked={isAllCategoriesSelected}\n              onCheckedChange={() => updateFilter('categories', [])}\n            />\n            <Label htmlFor=\"all-categories\" className=\"text-sm text-gray-600\">All Categories</Label>\n          </div>\n          \n          {['general', 'politics', 'technology', 'health', 'finance', 'sports'].map((category) => (\n            <div key={category} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id={category}\n                  checked={filters.categories?.includes(category) || false}\n                  onCheckedChange={() => toggleCategory(category)}\n                />\n                <Label htmlFor={category} className=\"text-sm text-gray-600 capitalize\">{getCategoryName(category)}</Label>\n              </div>\n              <span className=\"text-xs bg-gray-100 px-2 py-1 rounded-full\">\n                {stats?.byCategory?.[category] || 0}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Bias Filter */}\n      <div className=\"mb-6\">\n        <h4 className=\"font-medium text-gray-700 mb-3\">{t.biasTypes}</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"all-bias\" \n              checked={isAllBiasSelected}\n              onCheckedChange={() => updateFilter('biasTypes', [])}\n            />\n            <Label htmlFor=\"all-bias\" className=\"text-sm text-gray-600\">All Bias Types</Label>\n          </div>\n          \n          {[\n            { key: 'neutral', label: t.neutral, color: 'bg-green-500' },\n            { key: 'left', label: t.left, color: 'bg-blue-500' },\n            { key: 'right', label: t.right, color: 'bg-red-500' },\n          ].map((bias) => (\n            <div key={bias.key} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id={bias.key}\n                  checked={filters.biasTypes?.includes(bias.key) || false}\n                  onCheckedChange={() => toggleBias(bias.key)}\n                />\n                <Label htmlFor={bias.key} className=\"text-sm text-gray-600\">{bias.label}</Label>\n              </div>\n              <div className={`w-3 h-3 ${bias.color} rounded-full`}></div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Sentiment Filter */}\n      <div className=\"mb-6\">\n        <h4 className=\"font-medium text-gray-700 mb-3\">{t.sentiments}</h4>\n        <div className=\"space-y-2\">\n          {[\n            { key: 'positive', label: t.positive, icon: Smile, color: 'text-green-500' },\n            { key: 'neutral', label: t.neutral, icon: Meh, color: 'text-gray-500' },\n            { key: 'negative', label: t.negative, icon: Frown, color: 'text-red-500' },\n          ].map((sentiment) => (\n            <div key={sentiment.key} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id={sentiment.key}\n                  checked={filters.sentiments?.includes(sentiment.key) || false}\n                  onCheckedChange={() => toggleSentiment(sentiment.key)}\n                />\n                <Label htmlFor={sentiment.key} className=\"text-sm text-gray-600\">{sentiment.label}</Label>\n              </div>\n              <sentiment.icon className={`h-4 w-4 ${sentiment.color}`} />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Time Filter */}\n      <div className=\"mb-6\">\n        <h4 className=\"font-medium text-gray-700 mb-3\">{t.timeRange}</h4>\n        <Select value={filters.timeRange || 'all'} onValueChange={(value) => updateFilter('timeRange', value === 'all' ? '' : value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select time range\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All time</SelectItem>\n            <SelectItem value=\"Last 24 hours\">{t.today}</SelectItem>\n            <SelectItem value=\"Last week\">{t.thisWeek}</SelectItem>\n            <SelectItem value=\"Last month\">{t.thisMonth}</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":7592},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { X, MessageCircle, Users, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n\n  const handleSectionClick = (section: string) => {\n    if (section === 'chatbot') {\n      setLocation('/chat');\n      onClose();\n    } else if (section === 'community') {\n      setLocation('/community');\n      onClose();\n    } else if (section === 'blockchain') {\n      setLocation('/blockchain');\n      onClose();\n    } else {\n      // For other sections, we'll show placeholder content\n      setActiveSection(activeSection === section ? null : section);\n    }\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 transition-opacity duration-300\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed top-0 right-0 h-full w-80 bg-background border-l border-border z-50\n        transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : 'translate-x-full'}\n        flex flex-col\n      `}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Menu</h2>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Menu Items */}\n        <div className=\"flex-1 p-4\">\n          <nav className=\"space-y-2\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-left h-auto p-3\"\n              onClick={() => handleSectionClick('chatbot')}\n            >\n              <MessageCircle className=\"h-5 w-5 mr-3\" />\n              <div>\n                <div className=\"font-medium\">Chatbot</div>\n                <div className=\"text-sm text-muted-foreground\">AI assistant for news queries</div>\n              </div>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-left h-auto p-3\"\n              onClick={() => handleSectionClick('community')}\n            >\n              <Users className=\"h-5 w-5 mr-3\" />\n              <div>\n                <div className=\"font-medium\">Community Chats & Forums</div>\n                <div className=\"text-sm text-muted-foreground\">Join discussions with other readers</div>\n              </div>\n            </Button>\n            \n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-left h-auto p-3\"\n              onClick={() => handleSectionClick('blockchain')}\n            >\n              <Shield className=\"h-5 w-5 mr-3\" />\n              <div>\n                <div className=\"font-medium\">Verified Sources</div>\n                <div className=\"text-sm text-muted-foreground\">Blockchain-verified news sources</div>\n              </div>\n            </Button>\n          </nav>\n        </div>\n        \n        {/* Active Section Content */}\n        \n        {activeSection === 'community' && (\n          <div className=\"flex-1 border-t border-border p-4\">\n            <div className=\"text-center text-muted-foreground\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">Community Features</h3>\n              <p className=\"text-sm\">Connect with fellow news readers, share opinions, and engage in meaningful discussions about current events.</p>\n              <div className=\"mt-4 space-y-2\">\n                <div className=\"text-sm text-left p-3 bg-muted/50 rounded\">\n                  <strong>Discussion Forums</strong> - Topic-based conversations\n                </div>\n                <div className=\"text-sm text-left p-3 bg-muted/50 rounded\">\n                  <strong>Live Chat Rooms</strong> - Real-time discussions\n                </div>\n                <div className=\"text-sm text-left p-3 bg-muted/50 rounded\">\n                  <strong>Expert AMAs</strong> - Ask journalists anything\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n      </div>\n    </>\n  );\n}","size_bytes":4538},"client/src/components/stats-bar.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RefreshCw, BarChart } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport type { NewsStats } from \"@/lib/types\";\n\ninterface StatsBarProps {\n  onRefresh: () => void;\n  sortBy: string;\n  onSortChange: (value: string) => void;\n}\n\nexport function StatsBar({ onRefresh, sortBy, onSortChange }: StatsBarProps) {\n  const { theme } = useTheme();\n  const { t } = useLanguage();\n  const queryClient = useQueryClient();\n  \n  const { data: stats, isLoading } = useQuery<NewsStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/refresh'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      onRefresh();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card className={`p-4 mb-6 transition-all duration-300 ${\n        theme === 'creative' ? 'glass-morphism' : 'bg-card border-border'\n      }`}>\n        <div className=\"animate-pulse\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"h-12 w-20 bg-muted rounded\"></div>\n              <div className=\"h-12 w-20 bg-muted rounded\"></div>\n              <div className=\"h-12 w-20 bg-muted rounded\"></div>\n            </div>\n            <div className=\"h-10 w-32 bg-muted rounded\"></div>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`p-4 mb-6 hover-lift transition-all duration-300 ${\n      theme === 'creative' ? 'glass-morphism' : 'bg-card border-border'\n    }`}>\n      <div className=\"flex flex-wrap items-center justify-between gap-4\">\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center gap-2\">\n            <BarChart className={`h-5 w-5 ${\n              theme === 'creative' ? 'text-primary pulse-subtle' : 'text-muted-foreground'\n            }`} />\n            <div>\n              <span className={`text-2xl font-bold ${\n                theme === 'creative' ? 'gradient-primary bg-clip-text text-transparent' : 'text-foreground'\n              }`}>\n                {stats?.total || 0}\n              </span>\n              <p className=\"text-sm text-muted-foreground\">{t.totalArticles}</p>\n            </div>\n          </div>\n          <div>\n            <span className=\"text-2xl font-bold text-primary\">{stats?.today || 0}</span>\n            <p className=\"text-sm text-muted-foreground\">{t.todayArticles}</p>\n          </div>\n          <div>\n            <span className=\"text-2xl font-bold text-secondary\">{stats?.translated || 0}</span>\n            <p className=\"text-sm text-muted-foreground\">{t.translatedArticles}</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button \n            onClick={() => refreshMutation.mutate()}\n            disabled={refreshMutation.isPending}\n            className={`hover-lift transition-all duration-300 ${\n              theme === 'creative' \n                ? 'gradient-secondary text-secondary-foreground border-none' \n                : 'bg-primary hover:bg-primary/90'\n            }`}\n          >\n            <RefreshCw className={`mr-2 h-4 w-4 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />\n            {t.refresh}\n          </Button>\n          \n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">{t.sortBy}:</span>\n            <Select value={sortBy} onValueChange={onSortChange}>\n              <SelectTrigger className={`w-32 hover-lift ${\n                theme === 'creative' ? 'glass-morphism' : ''\n              }`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"latest\">{t.latest}</SelectItem>\n                <SelectItem value=\"relevant\">Most Relevant</SelectItem>\n                <SelectItem value=\"translated\">{t.mostTranslated}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4570},"client/src/components/translation-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Copy, Loader2, Languages } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Article, Translation, Language } from \"@shared/schema\";\n\ninterface TranslationModalProps {\n  article: Article | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function TranslationModal({ article, isOpen, onClose }: TranslationModalProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState('hi');\n  const { toast } = useToast();\n\n  const { data: languages } = useQuery<Language[]>({\n    queryKey: ['/api/languages'],\n  });\n\n  const { data: translation, isLoading: isLoadingTranslation } = useQuery<Translation>({\n    queryKey: ['/api/articles', article?.id, 'translations', selectedLanguage],\n    enabled: !!article && isOpen,\n  });\n\n  const translateMutation = useMutation({\n    mutationFn: (data: { articleId: number; language: string }) =>\n      apiRequest('POST', `/api/articles/${data.articleId}/translate`, { language: data.language }),\n    onSuccess: () => {\n      toast({\n        title: \"Translation completed\",\n        description: \"Article has been successfully translated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Translation failed\",\n        description: error.message || \"Failed to translate article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTranslate = () => {\n    if (!article) return;\n    translateMutation.mutate({\n      articleId: article.id,\n      language: selectedLanguage,\n    });\n  };\n\n  const handleCopyTranslation = async () => {\n    if (!translation) return;\n    \n    const textToCopy = `${translation.translatedTitle}\\n\\n${translation.translatedSummary}\\n\\n${translation.translatedContent}`;\n    \n    try {\n      await navigator.clipboard.writeText(textToCopy);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Translation has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy translation to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getLanguageName = (code: string) => {\n    return languages?.find(l => l.code === code)?.nativeName || code;\n  };\n\n  if (!article) return null;\n\n  const isTranslating = translateMutation.isPending;\n  const hasTranslation = translation && !isTranslating;\n  const canTranslate = !hasTranslation && !isLoadingTranslation;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Article Translation</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"overflow-y-auto max-h-[calc(90vh-120px)]\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Original Article */}\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Original (English)</h4>\n              <Card className=\"bg-gray-50 p-4\">\n                <h5 className=\"font-semibold mb-2 line-clamp-2\">{article.title}</h5>\n                {article.summary && (\n                  <p className=\"text-sm text-gray-600 mb-2\">{article.summary}</p>\n                )}\n                <p className=\"text-xs text-gray-500 line-clamp-3\">\n                  {article.content.substring(0, 200)}...\n                </p>\n              </Card>\n            </div>\n            \n            {/* Translation */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-medium text-gray-900\">Translation</h4>\n                <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {languages?.filter(l => l.code !== 'en').map((language) => (\n                      <SelectItem key={language.code} value={language.code}>\n                        {language.nativeName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Card className=\"bg-blue-50 p-4 min-h-[200px] flex flex-col\">\n                {isLoadingTranslation && (\n                  <div className=\"flex items-center justify-center flex-1\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-blue-500\" />\n                    <span className=\"ml-2 text-blue-600\">Loading translation...</span>\n                  </div>\n                )}\n                \n                {isTranslating && (\n                  <div className=\"flex items-center justify-center flex-1\">\n                    <Loader2 className=\"h-6 w-6 animate-spin text-blue-500\" />\n                    <span className=\"ml-2 text-blue-600\">Translating article...</span>\n                  </div>\n                )}\n                \n                {hasTranslation && (\n                  <>\n                    <h5 className=\"font-semibold mb-2\">{translation.translatedTitle}</h5>\n                    {translation.translatedSummary && (\n                      <p className=\"text-sm text-gray-600 mb-2\">{translation.translatedSummary}</p>\n                    )}\n                    <p className=\"text-xs text-gray-500 line-clamp-3\">\n                      {translation.translatedContent.substring(0, 200)}...\n                    </p>\n                  </>\n                )}\n                \n                {canTranslate && (\n                  <div className=\"flex items-center justify-center flex-1\">\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-500 mb-4\">\n                        No translation available for {getLanguageName(selectedLanguage)}\n                      </p>\n                      <Button onClick={handleTranslate} className=\"bg-primary hover:bg-primary/90\">\n                        Translate to {getLanguageName(selectedLanguage)}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </Card>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n          {hasTranslation && (\n            <Button onClick={handleCopyTranslation} className=\"bg-primary hover:bg-primary/90\">\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copy Translation\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7133},"client/src/components/verification-badge.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Shield, ShieldCheck, ShieldX, Info } from 'lucide-react';\nimport { blockchainService, VerifiedSourceInfo } from '@/services/blockchainService';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Badge } from '@/components/ui/badge';\n\ninterface VerificationBadgeProps {\n  sourceUrl: string;\n  className?: string;\n}\n\nexport function VerificationBadge({ sourceUrl, className = \"\" }: VerificationBadgeProps) {\n  const [verificationInfo, setVerificationInfo] = useState<VerifiedSourceInfo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const checkVerification = async () => {\n      if (!sourceUrl) {\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        setError(null);\n        \n        const info = await blockchainService.isSourceVerified(sourceUrl);\n        setVerificationInfo(info);\n      } catch (err) {\n        console.error('Error checking verification:', err);\n        setError('Failed to check verification');\n        setVerificationInfo({ verified: false, trustScore: 0, name: '', category: '' });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkVerification();\n  }, [sourceUrl]);\n\n  if (isLoading) {\n    return (\n      <div className={`inline-flex items-center gap-1 ${className}`}>\n        <Shield className=\"w-4 h-4 text-gray-400 animate-pulse\" />\n        <span className=\"text-xs text-gray-500\">Checking...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div className={`inline-flex items-center gap-1 ${className}`}>\n              <ShieldX className=\"w-4 h-4 text-red-500\" />\n              <span className=\"text-xs text-red-600\">Error</span>\n            </div>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p className=\"text-sm\">Unable to verify source: {error}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  if (!verificationInfo?.verified) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div className={`inline-flex items-center gap-1 ${className}`}>\n              <Shield className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-xs text-gray-500\">Unverified</span>\n            </div>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p className=\"text-sm\">Source not verified on blockchain</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  const getTrustScoreColor = (score: number) => {\n    if (score >= 90) return \"text-green-600 bg-green-50 border-green-200\";\n    if (score >= 80) return \"text-blue-600 bg-blue-50 border-blue-200\";\n    if (score >= 70) return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  const getTrustScoreLabel = (score: number) => {\n    if (score >= 90) return \"Highly Trusted\";\n    if (score >= 80) return \"Trusted\";\n    if (score >= 70) return \"Moderately Trusted\";\n    return \"Low Trust\";\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'newspaper': return '📰';\n      case 'broadcast': return '📺';\n      case 'digital': return '💻';\n      case 'agency': return '🏢';\n      default: return '📄';\n    }\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <div className={`inline-flex items-center gap-2 ${className}`}>\n            <div className=\"flex items-center gap-1\">\n              <ShieldCheck className=\"w-4 h-4 text-green-600\" />\n              <span className=\"text-xs font-medium text-green-700\">Verified</span>\n            </div>\n            \n            <Badge \n              variant=\"outline\" \n              className={`text-xs px-2 py-0.5 ${getTrustScoreColor(verificationInfo.trustScore)}`}\n            >\n              {verificationInfo.trustScore}/100\n            </Badge>\n          </div>\n        </TooltipTrigger>\n        <TooltipContent className=\"max-w-xs\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <ShieldCheck className=\"w-4 h-4 text-green-600\" />\n              <span className=\"font-medium text-green-700\">Blockchain Verified Source</span>\n            </div>\n            \n            {verificationInfo.name && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Source:</span>\n                <span className=\"text-sm\">{verificationInfo.name}</span>\n              </div>\n            )}\n            \n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Trust Score:</span>\n              <span className=\"text-sm font-bold\">{verificationInfo.trustScore}/100</span>\n              <span className=\"text-xs text-gray-600\">({getTrustScoreLabel(verificationInfo.trustScore)})</span>\n            </div>\n            \n            {verificationInfo.category && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Category:</span>\n                <span className=\"text-sm capitalize flex items-center gap-1\">\n                  {getCategoryIcon(verificationInfo.category)}\n                  {verificationInfo.category}\n                </span>\n              </div>\n            )}\n            \n            <div className=\"border-t pt-2 mt-2\">\n              <div className=\"flex items-center gap-1 text-xs text-gray-600\">\n                <Info className=\"w-3 h-3\" />\n                <span>Verified on Polygon Mumbai Testnet</span>\n              </div>\n            </div>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","size_bytes":6008},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '../../../shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('vartaAI_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        localStorage.removeItem('vartaAI_user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('vartaAI_user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('vartaAI_user');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        login,\n        logout,\n        isLoading,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":1506},"client/src/contexts/blockchain-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { blockchainService, SourceData } from '@/services/blockchainService';\n\ninterface BlockchainContextType {\n  isWalletConnected: boolean;\n  currentAccount: string | null;\n  networkInfo: { chainId: string; networkName: string; } | null;\n  verifiedSources: SourceData[];\n  contractInfo: { owner: string; totalSources: number; deployedAt: number; } | null;\n  isLoading: boolean;\n  error: string | null;\n  connectWallet: () => Promise<void>;\n  refreshData: () => Promise<void>;\n  addVerifiedSource: (domain: string, name: string, trustScore: number, category: string) => Promise<boolean>;\n  removeVerifiedSource: (domain: string) => Promise<boolean>;\n  updateTrustScore: (domain: string, newTrustScore: number) => Promise<boolean>;\n}\n\nconst BlockchainContext = createContext<BlockchainContextType | undefined>(undefined);\n\nexport function useBlockchain() {\n  const context = useContext(BlockchainContext);\n  if (context === undefined) {\n    throw new Error('useBlockchain must be used within a BlockchainProvider');\n  }\n  return context;\n}\n\ninterface BlockchainProviderProps {\n  children: ReactNode;\n}\n\nexport function BlockchainProvider({ children }: BlockchainProviderProps) {\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState<string | null>(null);\n  const [networkInfo, setNetworkInfo] = useState<{ chainId: string; networkName: string; } | null>(null);\n  const [verifiedSources, setVerifiedSources] = useState<SourceData[]>([]);\n  const [contractInfo, setContractInfo] = useState<{ owner: string; totalSources: number; deployedAt: number; } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize blockchain data on component mount\n  useEffect(() => {\n    initializeBlockchain();\n    \n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, []);\n\n  const initializeBlockchain = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Check wallet connection\n      const connected = await blockchainService.isWalletConnected();\n      setIsWalletConnected(connected);\n\n      if (connected) {\n        const account = await blockchainService.getCurrentAccount();\n        setCurrentAccount(account);\n      }\n\n      // Get network info\n      const network = await blockchainService.getNetworkInfo();\n      setNetworkInfo(network);\n\n      // Load verified sources and contract info\n      await loadBlockchainData();\n    } catch (err) {\n      console.error('Error initializing blockchain:', err);\n      setError(err instanceof Error ? err.message : 'Failed to initialize blockchain');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    try {\n      // Load verified sources\n      const sources = await blockchainService.getAllVerifiedSources();\n      setVerifiedSources(sources);\n\n      // Load contract info\n      const info = await blockchainService.getContractInfo();\n      setContractInfo(info);\n    } catch (err) {\n      console.error('Error loading blockchain data:', err);\n      // Don't set error here as this might be expected if contract is not deployed\n    }\n  };\n\n  const handleAccountsChanged = async (accounts: string[]) => {\n    if (accounts.length === 0) {\n      setIsWalletConnected(false);\n      setCurrentAccount(null);\n    } else {\n      setIsWalletConnected(true);\n      setCurrentAccount(accounts[0]);\n    }\n  };\n\n  const handleChainChanged = async (chainId: string) => {\n    // Reload the page to reset the dapp state\n    window.location.reload();\n  };\n\n  const connectWallet = async () => {\n    try {\n      setError(null);\n      const accounts = await blockchainService.connectWallet();\n      \n      if (accounts.length > 0) {\n        setIsWalletConnected(true);\n        setCurrentAccount(accounts[0]);\n        \n        // Refresh network info and data\n        const network = await blockchainService.getNetworkInfo();\n        setNetworkInfo(network);\n        \n        await loadBlockchainData();\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to connect wallet';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const refreshData = async () => {\n    await loadBlockchainData();\n  };\n\n  const addVerifiedSource = async (\n    domain: string,\n    name: string,\n    trustScore: number,\n    category: string\n  ): Promise<boolean> => {\n    try {\n      const success = await blockchainService.addVerifiedSource(domain, name, trustScore, category);\n      if (success) {\n        await loadBlockchainData(); // Refresh data\n      }\n      return success;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to add verified source';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const removeVerifiedSource = async (domain: string): Promise<boolean> => {\n    try {\n      const success = await blockchainService.removeVerifiedSource(domain);\n      if (success) {\n        await loadBlockchainData(); // Refresh data\n      }\n      return success;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove verified source';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const updateTrustScore = async (domain: string, newTrustScore: number): Promise<boolean> => {\n    try {\n      const success = await blockchainService.updateTrustScore(domain, newTrustScore);\n      if (success) {\n        await loadBlockchainData(); // Refresh data\n      }\n      return success;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update trust score';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const value: BlockchainContextType = {\n    isWalletConnected,\n    currentAccount,\n    networkInfo,\n    verifiedSources,\n    contractInfo,\n    isLoading,\n    error,\n    connectWallet,\n    refreshData,\n    addVerifiedSource,\n    removeVerifiedSource,\n    updateTrustScore,\n  };\n\n  return (\n    <BlockchainContext.Provider value={value}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n}","size_bytes":6692},"client/src/contexts/language-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport translations, { type SupportedLanguage, type Translations } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: SupportedLanguage;\n  setLanguage: (language: SupportedLanguage) => void;\n  t: Translations;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguageState] = useState<SupportedLanguage>(() => {\n    // Get from localStorage or default to English\n    const saved = localStorage.getItem('ui-language') as SupportedLanguage;\n    const supportedLanguages: SupportedLanguage[] = ['en', 'hi', 'mr', 'ta', 'kn', 'te', 'ml'];\n    return supportedLanguages.includes(saved) ? saved : 'en';\n  });\n\n  const setLanguage = (newLanguage: SupportedLanguage) => {\n    setLanguageState(newLanguage);\n    localStorage.setItem('ui-language', newLanguage);\n  };\n\n  const t = translations[language];\n\n  useEffect(() => {\n    // Set document lang attribute for accessibility\n    document.documentElement.lang = language;\n  }, [language]);\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":1510},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, ReactNode } from 'react';\n\nexport type Theme = 'light';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const theme: Theme = 'light';\n  \n  // No-op setTheme function for backward compatibility\n  const setTheme = () => {};\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove all theme classes and only add light\n    root.classList.remove('dark', 'creative');\n    root.classList.add('light');\n    \n    // Remove any saved theme from localStorage\n    localStorage.removeItem('theme');\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}","size_bytes":1128},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"// Internationalization utilities\nexport type SupportedLanguage = 'en' | 'hi' | 'mr' | 'ta' | 'kn' | 'te' | 'ml';\n\nexport interface Translations {\n  // Header\n  appTitle: string;\n  appSubtitle: string;\n  searchPlaceholder: string;\n  \n  // Navigation & Buttons\n  settings: string;\n  refresh: string;\n  translate: string;\n  close: string;\n  loading: string;\n  \n  // Stats Bar\n  totalArticles: string;\n  todayArticles: string;\n  translatedArticles: string;\n  sortBy: string;\n  latest: string;\n  oldest: string;\n  mostTranslated: string;\n  \n  // Filters\n  filters: string;\n  categories: string;\n  biasTypes: string;\n  sentiments: string;\n  timeRange: string;\n  clearFilters: string;\n  \n  // Categories\n  politics: string;\n  technology: string;\n  sports: string;\n  business: string;\n  entertainment: string;\n  health: string;\n  science: string;\n  education: string;\n  \n  // Bias Types\n  left: string;\n  right: string;\n  center: string;\n  neutral: string;\n  \n  // Sentiments\n  positive: string;\n  negative: string;\n  \n  // Time Ranges\n  today: string;\n  thisWeek: string;\n  thisMonth: string;\n  \n  // Article Card\n  readMore: string;\n  biasScore: string;\n  sentiment: string;\n  \n  // Translation Modal\n  translationFor: string;\n  originalLanguage: string;\n  targetLanguage: string;\n  translating: string;\n  translationError: string;\n  \n  // Bulk Translation\n  translateAll: string;\n  translateAllArticles: string;\n  bulkTranslating: string;\n  bulkTranslationComplete: string;\n  bulkTranslationError: string;\n  \n  // Error Messages\n  errorLoadingArticles: string;\n  noArticlesFound: string;\n  \n  // General\n  of: string;\n  articles: string;\n}\n\nconst translations: Record<SupportedLanguage, Translations> = {\n  en: {\n    // Header\n    appTitle: \"Varta.AI\",\n    appSubtitle: \"Multilingual Bias Detection\",\n    searchPlaceholder: \"Search news articles...\",\n    \n    // Navigation & Buttons\n    settings: \"Settings\",\n    refresh: \"Refresh\",\n    translate: \"Translate\",\n    close: \"Close\",\n    loading: \"Loading...\",\n    \n    // Stats Bar\n    totalArticles: \"Total Articles\",\n    todayArticles: \"Today's Articles\",\n    translatedArticles: \"Translated Articles\",\n    sortBy: \"Sort by\",\n    latest: \"Latest\",\n    oldest: \"Oldest\",\n    mostTranslated: \"Most Translated\",\n    \n    // Filters\n    filters: \"Filters\",\n    categories: \"Categories\",\n    biasTypes: \"Bias Types\",\n    sentiments: \"Sentiments\",\n    timeRange: \"Time Range\",\n    clearFilters: \"Clear Filters\",\n    \n    // Categories\n    politics: \"Politics\",\n    technology: \"Technology\",\n    sports: \"Sports\",\n    business: \"Business\",\n    entertainment: \"Entertainment\",\n    health: \"Health\",\n    science: \"Science\",\n    education: \"Education\",\n    \n    // Bias Types\n    left: \"Left\",\n    right: \"Right\",\n    center: \"Center\",\n    neutral: \"Neutral\",\n    \n    // Sentiments\n    positive: \"Positive\",\n    negative: \"Negative\",\n    \n    // Time Ranges\n    today: \"Today\",\n    thisWeek: \"This Week\",\n    thisMonth: \"This Month\",\n    \n    // Article Card\n    readMore: \"Read More\",\n    biasScore: \"Bias Score\",\n    sentiment: \"Sentiment\",\n    \n    // Translation Modal\n    translationFor: \"Translation for\",\n    originalLanguage: \"Original Language\",\n    targetLanguage: \"Target Language\",\n    translating: \"Translating...\",\n    translationError: \"Translation Error\",\n    \n    // Error Messages\n    errorLoadingArticles: \"Error loading articles\",\n    noArticlesFound: \"No articles found\",\n    \n    // Bulk Translation\n    translateAll: \"Translate All\",\n    translateAllArticles: \"Translate All Articles\",\n    bulkTranslating: \"Translating all articles...\",\n    bulkTranslationComplete: \"All articles translated successfully\",\n    bulkTranslationError: \"Error translating articles\",\n    \n    // General\n    of: \"of\",\n    articles: \"articles\",\n  },\n  \n  hi: {\n    // Header\n    appTitle: \"न्यूज़लेंस\",\n    appSubtitle: \"बहुभाषी पूर्वाग्रह संसूचन\",\n    searchPlaceholder: \"समाचार लेख खोजें...\",\n    \n    // Navigation & Buttons\n    settings: \"सेटिंग्स\",\n    refresh: \"रीफ्रेश\",\n    translate: \"अनुवाद\",\n    close: \"बंद करें\",\n    loading: \"लोड हो रहा है...\",\n    \n    // Stats Bar\n    totalArticles: \"कुल लेख\",\n    todayArticles: \"आज के लेख\",\n    translatedArticles: \"अनुवादित लेख\",\n    sortBy: \"क्रमबद्ध करें\",\n    latest: \"नवीनतम\",\n    oldest: \"पुराना\",\n    mostTranslated: \"सबसे अधिक अनुवादित\",\n    \n    // Filters\n    filters: \"फिल्टर\",\n    categories: \"श्रेणियां\",\n    biasTypes: \"पूर्वाग्रह प्रकार\",\n    sentiments: \"भावनाएं\",\n    timeRange: \"समय सीमा\",\n    clearFilters: \"फिल्टर साफ़ करें\",\n    \n    // Categories\n    politics: \"राजनीति\",\n    technology: \"प्रौद्योगिकी\",\n    sports: \"खेल\",\n    business: \"व्यापार\",\n    entertainment: \"मनोरंजन\",\n    health: \"स्वास्थ्य\",\n    science: \"विज्ञान\",\n    education: \"शिक्षा\",\n    \n    // Bias Types\n    left: \"वाम\",\n    right: \"दक्षिण\",\n    center: \"केंद्र\",\n    neutral: \"तटस्थ\",\n    \n    // Sentiments\n    positive: \"सकारात्मक\",\n    negative: \"नकारात्मक\",\n    \n    // Time Ranges\n    today: \"आज\",\n    thisWeek: \"इस सप्ताह\",\n    thisMonth: \"इस महीने\",\n    \n    // Article Card\n    readMore: \"और पढ़ें\",\n    biasScore: \"पूर्वाग्रह स्कोर\",\n    sentiment: \"भावना\",\n    \n    // Translation Modal\n    translationFor: \"के लिए अनुवाद\",\n    originalLanguage: \"मूल भाषा\",\n    targetLanguage: \"लक्ष्य भाषा\",\n    translating: \"अनुवाद हो रहा है...\",\n    translationError: \"अनुवाद त्रुटि\",\n    \n    // Error Messages\n    errorLoadingArticles: \"लेख लोड करने में त्रुटि\",\n    noArticlesFound: \"कोई लेख नहीं मिला\",\n    \n    // Bulk Translation\n    translateAll: \"सभी अनुवाद करें\",\n    translateAllArticles: \"सभी लेख अनुवाद करें\",\n    bulkTranslating: \"सभी लेख अनुवाद कर रहे हैं...\",\n    bulkTranslationComplete: \"सभी लेख सफलतापूर्वक अनुवादित\",\n    bulkTranslationError: \"लेख अनुवादित करने में त्रुटि\",\n    \n    // General\n    of: \"का\",\n    articles: \"लेख\",\n  },\n  \n  mr: {\n    // Header\n    appTitle: \"न्यूजलेन्स\",\n    appSubtitle: \"बहुभाषिक पूर्वग्रह शोध\",\n    searchPlaceholder: \"बातम्या शोधा...\",\n    \n    // Navigation & Buttons\n    settings: \"सेटिंग्ज\",\n    refresh: \"रिफ्रेश\",\n    translate: \"भाषांतर\",\n    close: \"बंद करा\",\n    loading: \"लोड होत आहे...\",\n    \n    // Stats Bar\n    totalArticles: \"एकूण लेख\",\n    todayArticles: \"आजचे लेख\",\n    translatedArticles: \"भाषांतरित लेख\",\n    sortBy: \"क्रमवारी\",\n    latest: \"नवीनतम\",\n    oldest: \"जुने\",\n    mostTranslated: \"सर्वाधिक भाषांतरित\",\n    \n    // Filters\n    filters: \"फिल्टर\",\n    categories: \"श्रेणी\",\n    biasTypes: \"पूर्वग्रह प्रकार\",\n    sentiments: \"भावना\",\n    timeRange: \"कालावधी\",\n    clearFilters: \"फिल्टर साफ करा\",\n    \n    // Categories\n    politics: \"राजकारण\",\n    technology: \"तंत्रज्ञान\",\n    sports: \"खेळ\",\n    business: \"व्यवसाय\",\n    entertainment: \"मनोरंजन\",\n    health: \"आरोग्य\",\n    science: \"विज्ञान\",\n    education: \"शिक्षण\",\n    \n    // Bias Types\n    left: \"डावे\",\n    right: \"उजवे\",\n    center: \"मध्यम\",\n    neutral: \"तटस्थ\",\n    \n    // Sentiments\n    positive: \"सकारात्मक\",\n    negative: \"नकारात्मक\",\n    \n    // Time Ranges\n    today: \"आज\",\n    thisWeek: \"या आठवड्यात\",\n    thisMonth: \"या महिन्यात\",\n    \n    // Article Card\n    readMore: \"अधिक वाचा\",\n    biasScore: \"पूर्वग्रह स्कोअर\",\n    sentiment: \"भावना\",\n    \n    // Translation Modal\n    translationFor: \"साठी भाषांतर\",\n    originalLanguage: \"मूळ भाषा\",\n    targetLanguage: \"लक्ष्य भाषा\",\n    translating: \"भाषांतर करत आहे...\",\n    translationError: \"भाषांतर त्रुटी\",\n    \n    // Error Messages\n    errorLoadingArticles: \"लेख लोड करताना त्रुटी\",\n    noArticlesFound: \"कोणतेही लेख सापडले नाहीत\",\n    \n    // Bulk Translation\n    translateAll: \"सर्व भाषांतर करा\",\n    translateAllArticles: \"सर्व लेख भाषांतर करा\",\n    bulkTranslating: \"सर्व लेख भाषांतर करत आहे...\",\n    bulkTranslationComplete: \"सर्व लेख यशस्वीरित्या भाषांतरित\",\n    bulkTranslationError: \"लेख भाषांतर करताना त्रुटी\",\n    \n    // General\n    of: \"चे\",\n    articles: \"लेख\",\n  },\n  \n  ta: {\n    // Header\n    appTitle: \"செய்திலென்ஸ்\",\n    appSubtitle: \"பன்மொழி சார்பு கணிப்பு\",\n    searchPlaceholder: \"செய்திக் கட்டுரைகளைத் தேடு...\",\n    \n    // Navigation & Buttons\n    settings: \"அமைப்புகள்\",\n    refresh: \"புதுப்பிக்கவும்\",\n    translate: \"மொழிபெயர்க்கவும்\",\n    close: \"மூடு\",\n    loading: \"ஏற்றுகிறது...\",\n    \n    // Stats Bar\n    totalArticles: \"மொத்த கட்டுரைகள்\",\n    todayArticles: \"இன்றைய கட்டுரைகள்\",\n    translatedArticles: \"மொழிபெயர்க்கப்பட்ட கட்டுரைகள்\",\n    sortBy: \"வரிசைப்படுத்து\",\n    latest: \"சமீபத்தியது\",\n    oldest: \"பழையது\",\n    mostTranslated: \"அதிகம் மொழிபெயர்க்கப்பட்டது\",\n    \n    // Filters\n    filters: \"வடிகட்டிகள்\",\n    categories: \"வகைகள்\",\n    biasTypes: \"சார்பு வகைகள்\",\n    sentiments: \"உணர்வுகள்\",\n    timeRange: \"கால வரம்பு\",\n    clearFilters: \"வடிகட்டிகளை நீக்கு\",\n    \n    // Categories\n    politics: \"அரசியல்\",\n    technology: \"தொழில்நுட்பம்\",\n    sports: \"விளையாட்டு\",\n    business: \"வணிகம்\",\n    entertainment: \"பொழுதுபோக்கு\",\n    health: \"சுகாதாரம்\",\n    science: \"அறிவியல்\",\n    education: \"கல்வி\",\n    \n    // Bias Types\n    left: \"இடது\",\n    right: \"வலது\",\n    center: \"மத்திய\",\n    neutral: \"நடுநிலை\",\n    \n    // Sentiments\n    positive: \"நேர்மறை\",\n    negative: \"எதிர்மறை\",\n    \n    // Time Ranges\n    today: \"இன்று\",\n    thisWeek: \"இந்த வாரம்\",\n    thisMonth: \"இந்த மாதம்\",\n    \n    // Article Card\n    readMore: \"மேலும் படிக்க\",\n    biasScore: \"சார்பு மதிப்பெண்\",\n    sentiment: \"உணர்வு\",\n    \n    // Translation Modal\n    translationFor: \"க்கான மொழிபெயர்ப்பு\",\n    originalLanguage: \"அசல் மொழி\",\n    targetLanguage: \"இலக்கு மொழி\",\n    translating: \"மொழிபெயர்க்கிறது...\",\n    translationError: \"மொழிபெயர்ப்பு பிழை\",\n    \n    // Error Messages\n    errorLoadingArticles: \"கட்டுரைகளை ஏற்றுவதில் பிழை\",\n    noArticlesFound: \"கட்டுரைகள் எதுவும் கிடைக்கவில்லை\",\n    \n    // Bulk Translation\n    translateAll: \"அனைத்தையும் மொழிபெயர்க்கவும்\",\n    translateAllArticles: \"அனைத்து கட்டுரைகளையும் மொழிபெயர்க்கவும்\",\n    bulkTranslating: \"அனைத்து கட்டுரைகளும் மொழிபெயர்க்கப்படுகின்றன...\",\n    bulkTranslationComplete: \"அனைத்து கட்டுரைகளும் வெற்றிகரமாக மொழிபெயர்க்கப்பட்டன\",\n    bulkTranslationError: \"கட்டுரைகளை மொழிபெயர்ப்பதில் பிழை\",\n    \n    // General\n    of: \"இன்\",\n    articles: \"கட்டுரைகள்\",\n  },\n  \n  kn: {\n    // Header\n    appTitle: \"ನ್ಯೂಸ್‌ಲೆನ್ಸ್\",\n    appSubtitle: \"ಬಹುಭಾಷಾ ಪಕ್ಷಪಾತ ಪತ್ತೆ\",\n    searchPlaceholder: \"ಸುದ್ದಿ ಲೇಖನಗಳನ್ನು ಹುಡುಕಿ...\",\n    \n    // Navigation & Buttons\n    settings: \"ಸೆಟ್ಟಿಂಗ್‌ಗಳು\",\n    refresh: \"ರಿಫ್ರೆಶ್\",\n    translate: \"ಅನುವಾದ\",\n    close: \"ಮುಚ್ಚಿ\",\n    loading: \"ಲೋಡ್ ಆಗುತ್ತಿದೆ...\",\n    \n    // Stats Bar\n    totalArticles: \"ಒಟ್ಟು ಲೇಖನಗಳು\",\n    todayArticles: \"ಇಂದಿನ ಲೇಖನಗಳು\",\n    translatedArticles: \"ಅನುವಾದಿತ ಲೇಖನಗಳು\",\n    sortBy: \"ವರ್ಗೀಕರಣ\",\n    latest: \"ಇತ್ತೀಚಿನ\",\n    oldest: \"ಹಳೆಯ\",\n    mostTranslated: \"ಹೆಚ್ಚು ಅನುವಾದಿತ\",\n    \n    // Filters\n    filters: \"ಫಿಲ್ಟರ್‌ಗಳು\",\n    categories: \"ವರ್ಗಗಳು\",\n    biasTypes: \"ಪಕ್ಷಪಾತ ಪ್ರಕಾರಗಳು\",\n    sentiments: \"ಭಾವನೆಗಳು\",\n    timeRange: \"ಸಮಯ ವ್ಯಾಪ್ತಿ\",\n    clearFilters: \"ಫಿಲ್ಟರ್‌ಗಳನ್ನು ತೆರವುಗೊಳಿಸಿ\",\n    \n    // Categories\n    politics: \"ರಾಜಕೀಯ\",\n    technology: \"ತಂತ್ರಜ್ಞಾನ\",\n    sports: \"ಕ್ರೀಡೆ\",\n    business: \"ವ್ಯಾಪಾರ\",\n    entertainment: \"ಮನರಂಜನೆ\",\n    health: \"ಆರೋಗ್ಯ\",\n    science: \"ವಿಜ್ಞಾನ\",\n    education: \"ಶಿಕ್ಷಣ\",\n    \n    // Bias Types\n    left: \"ಎಡ\",\n    right: \"ಬಲ\",\n    center: \"ಮಧ್ಯ\",\n    neutral: \"ತಟಸ್ಥ\",\n    \n    // Sentiments\n    positive: \"ಧನಾತ್ಮಕ\",\n    negative: \"ಋಣಾತ್ಮಕ\",\n    \n    // Time Ranges\n    today: \"ಇಂದು\",\n    thisWeek: \"ಈ ವಾರ\",\n    thisMonth: \"ಈ ತಿಂಗಳು\",\n    \n    // Article Card\n    readMore: \"ಹೆಚ್ಚು ಓದಿ\",\n    biasScore: \"ಪಕ್ಷಪಾತ ಸ್ಕೋರ್\",\n    sentiment: \"ಭಾವನೆ\",\n    \n    // Translation Modal\n    translationFor: \"ಗಾಗಿ ಅನುವಾದ\",\n    originalLanguage: \"ಮೂಲ ಭಾಷೆ\",\n    targetLanguage: \"ಗುರಿ ಭಾಷೆ\",\n    translating: \"ಅನುವಾದ ಮಾಡುತ್ತಿದೆ...\",\n    translationError: \"ಅನುವಾದ ದೋಷ\",\n    \n    // Error Messages\n    errorLoadingArticles: \"ಲೇಖನಗಳನ್ನು ಲೋಡ್ ಮಾಡುವಲ್ಲಿ ದೋಷ\",\n    noArticlesFound: \"ಯಾವುದೇ ಲೇಖನಗಳು ಕಂಡುಬಂದಿಲ್ಲ\",\n    \n    // Bulk Translation\n    translateAll: \"ಎಲ್ಲವನ್ನೂ ಅನುವಾದಿಸಿ\",\n    translateAllArticles: \"ಎಲ್ಲಾ ಲೇಖನಗಳನ್ನು ಅನುವಾದಿಸಿ\",\n    bulkTranslating: \"ಎಲ್ಲಾ ಲೇಖನಗಳನ್ನು ಅನುವಾದಿಸಲಾಗುತ್ತಿದೆ...\",\n    bulkTranslationComplete: \"ಎಲ್ಲಾ ಲೇಖನಗಳನ್ನು ಯಶಸ್ವಿಯಾಗಿ ಅನುವಾದಿಸಲಾಗಿದೆ\",\n    bulkTranslationError: \"ಲೇಖನಗಳನ್ನು ಅನುವಾದಿಸುವಲ್ಲಿ ದೋಷ\",\n    \n    // General\n    of: \"ನ\",\n    articles: \"ಲೇಖನಗಳು\",\n  },\n  \n  te: {\n    // Header\n    appTitle: \"న్యూస్‌లెన్స్\",\n    appSubtitle: \"బహుభాషా పక్షపాత గుర్తింపు\",\n    searchPlaceholder: \"వార్తా వ్యాసాలను వెతకండి...\",\n    \n    // Navigation & Buttons\n    settings: \"సెట్టింగులు\",\n    refresh: \"రిఫ్రెష్\",\n    translate: \"అనువాదం\",\n    close: \"మూసివేయండి\",\n    loading: \"లోడ్ అవుతోంది...\",\n    \n    // Stats Bar\n    totalArticles: \"మొత్తం వ్యాసాలు\",\n    todayArticles: \"నేటి వ్యాసాలు\",\n    translatedArticles: \"అనువాదం చేసిన వ్యాసాలు\",\n    sortBy: \"క్రమపద్ధతి\",\n    latest: \"తాజా\",\n    oldest: \"పాత\",\n    mostTranslated: \"ఎక్కువ అనువాదం\",\n    \n    // Filters\n    filters: \"ఫిల్టర్లు\",\n    categories: \"వర్గాలు\",\n    biasTypes: \"పక్షపాత రకాలు\",\n    sentiments: \"భావనలు\",\n    timeRange: \"సమయ పరిధి\",\n    clearFilters: \"ఫిల్టర్లను క్లియర్ చేయండి\",\n    \n    // Categories\n    politics: \"రాజకీయాలు\",\n    technology: \"సాంకేతికత\",\n    sports: \"క్రీడలు\",\n    business: \"వ్యాపారం\",\n    entertainment: \"వినోదం\",\n    health: \"ఆరోగ్యం\",\n    science: \"శాస్త్రం\",\n    education: \"విద్య\",\n    \n    // Bias Types\n    left: \"వామ\",\n    right: \"కుడి\",\n    center: \"మధ్య\",\n    neutral: \"తటస్థ\",\n    \n    // Sentiments\n    positive: \"సానుకూల\",\n    negative: \"ప్రతికూల\",\n    \n    // Time Ranges\n    today: \"నేడు\",\n    thisWeek: \"ఈ వారం\",\n    thisMonth: \"ఈ నెల\",\n    \n    // Article Card\n    readMore: \"మరింత చదవండి\",\n    biasScore: \"పక్షపాత స్కోర్\",\n    sentiment: \"భావన\",\n    \n    // Translation Modal\n    translationFor: \"కోసం అనువాదం\",\n    originalLanguage: \"మూల భాష\",\n    targetLanguage: \"లక్ష్య భాష\",\n    translating: \"అనువాదం చేస్తోంది...\",\n    translationError: \"అనువాద లోపం\",\n    \n    // Error Messages\n    errorLoadingArticles: \"వ్యాసాలను లోడ్ చేయడంలో లోపం\",\n    noArticlesFound: \"వ్యాసాలు కనుగొనబడలేదు\",\n    \n    // Bulk Translation\n    translateAll: \"అన్నింటినీ అనువదించండి\",\n    translateAllArticles: \"అన్ని వ్యాసాలను అనువదించండి\",\n    bulkTranslating: \"అన్ని వ్యాసాలు అనువదించబడుతున్నాయి...\",\n    bulkTranslationComplete: \"అన్ని వ్యాసాలు విజయవంతంగా అనువదించబడ్డాయి\",\n    bulkTranslationError: \"వ్యాసాలను అనువదించడంలో లోపం\",\n    \n    // General\n    of: \"యొక్క\",\n    articles: \"వ్యాసాలు\",\n  },\n  \n  ml: {\n    // Header\n    appTitle: \"ന്യൂസ്‌ലെൻസ്\",\n    appSubtitle: \"ബഹുഭാഷാ പക്ഷപാത കണ്ടെത്തൽ\",\n    searchPlaceholder: \"വാർത്താ ലേഖനങ്ങൾ തിരയുക...\",\n    \n    // Navigation & Buttons\n    settings: \"ക്രമീകരണങ്ങൾ\",\n    refresh: \"പുതുക്കുക\",\n    translate: \"വിവർത്തനം\",\n    close: \"അടയ്ക്കുക\",\n    loading: \"ലോഡ് ചെയ്യുന്നു...\",\n    \n    // Stats Bar\n    totalArticles: \"മൊത്തം ലേഖനങ്ങൾ\",\n    todayArticles: \"ഇന്നത്തെ ലേഖനങ്ങൾ\",\n    translatedArticles: \"വിവർത്തനം ചെയ്ത ലേഖനങ്ങൾ\",\n    sortBy: \"ക്രമപ്പെടുത്തുക\",\n    latest: \"ഏറ്റവും പുതിയത്\",\n    oldest: \"പഴയത്\",\n    mostTranslated: \"ഏറ്റവും കൂടുതൽ വിവർത്തനം\",\n    \n    // Filters\n    filters: \"ഫിൽട്ടറുകൾ\",\n    categories: \"വിഭാഗങ്ങൾ\",\n    biasTypes: \"പക്ഷപാത തരങ്ങൾ\",\n    sentiments: \"വികാരങ്ങൾ\",\n    timeRange: \"സമയ പരിധി\",\n    clearFilters: \"ഫിൽട്ടറുകൾ മായ്ക്കുക\",\n    \n    // Categories\n    politics: \"രാഷ്ട്രീയം\",\n    technology: \"സാങ്കേതികവിദ്യ\",\n    sports: \"കായികം\",\n    business: \"വ്യാപാരം\",\n    entertainment: \"വിനോദം\",\n    health: \"ആരോഗ്യം\",\n    science: \"ശാസ്ത്രം\",\n    education: \"വിദ്യാഭ്യാസം\",\n    \n    // Bias Types\n    left: \"ഇടത്\",\n    right: \"വലത്\",\n    center: \"മധ്യം\",\n    neutral: \"നിഷ്പക്ഷ\",\n    \n    // Sentiments\n    positive: \"പോസിറ്റീവ്\",\n    negative: \"നെഗറ്റീവ്\",\n    \n    // Time Ranges\n    today: \"ഇന്ന്\",\n    thisWeek: \"ഈ ആഴ്ച\",\n    thisMonth: \"ഈ മാസം\",\n    \n    // Article Card\n    readMore: \"കൂടുതൽ വായിക്കുക\",\n    biasScore: \"പക്ഷപാത സ്കോർ\",\n    sentiment: \"വികാരം\",\n    \n    // Translation Modal\n    translationFor: \"യ്ക്കുള്ള വിവർത്തനം\",\n    originalLanguage: \"മൂല ഭാഷ\",\n    targetLanguage: \"ലക്ഷ്യ ഭാഷ\",\n    translating: \"വിവർത്തനം ചെയ്യുന്നു...\",\n    translationError: \"വിവർത്തന പിശക്\",\n    \n    // Error Messages\n    errorLoadingArticles: \"ലേഖനങ്ങൾ ലോഡ് ചെയ്യുന്നതിൽ പിശക്\",\n    noArticlesFound: \"ലേഖനങ്ങളൊന്നും കണ്ടെത്തിയില്ല\",\n    \n    // Bulk Translation\n    translateAll: \"എല്ലാം വിവർത്തനം ചെയ്യുക\",\n    translateAllArticles: \"എല്ലാ ലേഖനങ്ങളും വിവർത്തനം ചെയ്യുക\",\n    bulkTranslating: \"എല്ലാ ലേഖനങ്ങളും വിവർത്തനം ചെയ്യുന്നു...\",\n    bulkTranslationComplete: \"എല്ലാ ലേഖനങ്ങളും വിജയകരമായി വിവർത്തനം ചെയ്തു\",\n    bulkTranslationError: \"ലേഖനങ്ങൾ വിവർത്തനം ചെയ്യുന്നതിൽ പിശക്\",\n    \n    // General\n    of: \"യുടെ\",\n    articles: \"ലേഖനങ്ങൾ\",\n  },\n};\n\nexport default translations;","size_bytes":24289},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface NewsStats {\n  total: number;\n  today: number;\n  translated: number;\n  byCategory: Record<string, number>;\n  byBias: Record<string, number>;\n  bySentiment: Record<string, number>;\n}\n\n// Import Language from shared schema\nexport type { Language } from \"@shared/schema\";\n\nexport const BIAS_COLORS = {\n  left: 'hsl(207, 90%, 54%)', // blue\n  right: 'hsl(0, 84.2%, 60.2%)', // red\n  neutral: 'hsl(142, 76%, 36%)', // green\n} as const;\n\nexport const SENTIMENT_COLORS = {\n  positive: 'hsl(142, 76%, 36%)', // green\n  negative: 'hsl(0, 84.2%, 60.2%)', // red\n  neutral: 'hsl(240, 5%, 64.9%)', // gray\n} as const;\n\nexport const CATEGORY_COLORS = {\n  politics: 'hsl(271, 81%, 56%)', // purple\n  technology: 'hsl(207, 90%, 54%)', // blue\n  health: 'hsl(142, 76%, 36%)', // green\n  finance: 'hsl(45, 93%, 47%)', // yellow\n  sports: 'hsl(25, 95%, 53%)', // orange\n  general: 'hsl(240, 5%, 64.9%)', // gray\n} as const;\n","size_bytes":922},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/blockchain.tsx":{"content":"import { useState } from 'react';\nimport { useBlockchain } from '@/contexts/blockchain-context';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Shield, \n  ShieldCheck, \n  Wallet, \n  ExternalLink, \n  Plus, \n  Trash2, \n  Edit, \n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Info,\n  Loader2\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Header } from '@/components/header';\n\ninterface AddSourceForm {\n  domain: string;\n  name: string;\n  trustScore: number;\n  category: string;\n}\n\nexport default function BlockchainPage() {\n  const {\n    isWalletConnected,\n    currentAccount,\n    networkInfo,\n    verifiedSources,\n    contractInfo,\n    isLoading,\n    error,\n    connectWallet,\n    refreshData,\n    addVerifiedSource,\n    removeVerifiedSource,\n    updateTrustScore,\n  } = useBlockchain();\n\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [addForm, setAddForm] = useState<AddSourceForm>({\n    domain: '',\n    name: '',\n    trustScore: 85,\n    category: 'newspaper'\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleConnectWallet = async () => {\n    try {\n      await connectWallet();\n      toast({\n        title: \"Wallet Connected\",\n        description: \"Successfully connected to your wallet.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: error instanceof Error ? error.message : \"Failed to connect wallet\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAddSource = async () => {\n    if (!addForm.domain || !addForm.name) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      await addVerifiedSource(addForm.domain, addForm.name, addForm.trustScore, addForm.category);\n      \n      toast({\n        title: \"Source Added\",\n        description: `${addForm.name} has been added to verified sources.`,\n      });\n      \n      setShowAddForm(false);\n      setAddForm({ domain: '', name: '', trustScore: 85, category: 'newspaper' });\n    } catch (error) {\n      toast({\n        title: \"Failed to Add Source\",\n        description: error instanceof Error ? error.message : \"Failed to add verified source\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleRemoveSource = async (domain: string) => {\n    try {\n      await removeVerifiedSource(domain);\n      toast({\n        title: \"Source Removed\",\n        description: `${domain} has been removed from verified sources.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Remove Source\",\n        description: error instanceof Error ? error.message : \"Failed to remove verified source\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getTrustScoreColor = (score: number) => {\n    if (score >= 90) return \"text-green-600 bg-green-50\";\n    if (score >= 80) return \"text-blue-600 bg-blue-50\";\n    if (score >= 70) return \"text-yellow-600 bg-yellow-50\";\n    return \"text-red-600 bg-red-50\";\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'newspaper': return '📰';\n      case 'broadcast': return '📺';\n      case 'digital': return '💻';\n      case 'agency': return '🏢';\n      default: return '📄';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2 flex items-center gap-3\">\n            <Shield className=\"w-8 h-8 text-blue-600\" />\n            Blockchain Verified Sources\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage verified news sources on Polygon Mumbai Testnet using smart contracts\n          </p>\n        </div>\n\n        {/* Wallet Connection Status */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Wallet className=\"w-5 h-5\" />\n              Wallet Connection\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!isWalletConnected ? (\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\n                    Connect your wallet to manage verified sources on the blockchain\n                  </p>\n                  <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      You need MetaMask or another Web3 wallet to interact with the blockchain\n                    </AlertDescription>\n                  </Alert>\n                </div>\n                <Button onClick={handleConnectWallet} className=\"ml-4\">\n                  <Wallet className=\"w-4 h-4 mr-2\" />\n                  Connect Wallet\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"font-medium text-green-700\">Wallet Connected</span>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <strong>Account:</strong>\n                    <p className=\"font-mono text-xs bg-gray-100 dark:bg-gray-800 p-2 rounded mt-1\">\n                      {currentAccount}\n                    </p>\n                  </div>\n                  {networkInfo && (\n                    <div>\n                      <strong>Network:</strong>\n                      <p className=\"mt-1\">{networkInfo.networkName}</p>\n                      <p className=\"text-xs text-gray-500\">Chain ID: {networkInfo.chainId}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Contract Information */}\n        {contractInfo && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Info className=\"w-5 h-5\" />\n                Smart Contract Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <strong>Total Verified Sources:</strong>\n                  <p className=\"text-2xl font-bold text-blue-600\">{contractInfo.totalSources}</p>\n                </div>\n                <div>\n                  <strong>Contract Owner:</strong>\n                  <p className=\"font-mono text-xs bg-gray-100 dark:bg-gray-800 p-2 rounded mt-1\">\n                    {contractInfo.owner}\n                  </p>\n                </div>\n                <div>\n                  <strong>Deployed:</strong>\n                  <p>{new Date(contractInfo.deployedAt * 1000).toLocaleDateString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Add New Source */}\n        {isWalletConnected && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <Plus className=\"w-5 h-5\" />\n                  Add Verified Source\n                </span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowAddForm(!showAddForm)}\n                >\n                  {showAddForm ? 'Cancel' : 'Add Source'}\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            \n            {showAddForm && (\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"domain\">Domain *</Label>\n                      <Input\n                        id=\"domain\"\n                        placeholder=\"example.com\"\n                        value={addForm.domain}\n                        onChange={(e) => setAddForm(prev => ({ ...prev, domain: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"name\">Source Name *</Label>\n                      <Input\n                        id=\"name\"\n                        placeholder=\"Example News\"\n                        value={addForm.name}\n                        onChange={(e) => setAddForm(prev => ({ ...prev, name: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"trustScore\">Trust Score (1-100)</Label>\n                      <Input\n                        id=\"trustScore\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={addForm.trustScore}\n                        onChange={(e) => setAddForm(prev => ({ ...prev, trustScore: parseInt(e.target.value) || 85 }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select\n                        value={addForm.category}\n                        onValueChange={(value) => setAddForm(prev => ({ ...prev, category: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"newspaper\">📰 Newspaper</SelectItem>\n                          <SelectItem value=\"broadcast\">📺 Broadcast</SelectItem>\n                          <SelectItem value=\"digital\">💻 Digital</SelectItem>\n                          <SelectItem value=\"agency\">🏢 News Agency</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    onClick={handleAddSource} \n                    disabled={isSubmitting}\n                    className=\"w-full\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Adding to Blockchain...\n                      </>\n                    ) : (\n                      <>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Verified Source\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        )}\n\n        {/* Verified Sources List */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <ShieldCheck className=\"w-5 h-5\" />\n                Verified Sources ({verifiedSources.length})\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={refreshData}\n                disabled={isLoading}\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n            </CardTitle>\n            <CardDescription>\n              News sources verified on the Polygon Mumbai blockchain\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n                Loading verified sources...\n              </div>\n            ) : verifiedSources.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Shield className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                <p>No verified sources found</p>\n                <p className=\"text-sm\">Add some sources to get started</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {verifiedSources.map((source, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                  >\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"text-2xl\">\n                        {getCategoryIcon(source.category)}\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                          {source.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">{source.domain}</p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge\n                            variant=\"outline\"\n                            className={getTrustScoreColor(source.trustScore)}\n                          >\n                            Trust Score: {source.trustScore}/100\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"capitalize\">\n                            {source.category}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`https://${source.domain}`, '_blank')}\n                      >\n                        <ExternalLink className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      {isWalletConnected && currentAccount === contractInfo?.owner && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveSource(source.domain)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15867},"client/src/pages/blogs.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useRoute } from \"wouter\";\nimport { ArrowLeft, Clock, User, Eye, Calendar, Search, Filter, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  content: string;\n  excerpt: string;\n  slug: string;\n  coverImage?: string;\n  authorName: string;\n  authorImage?: string;\n  authorBio?: string;\n  category: string;\n  tags: string[];\n  readTime: number;\n  publishedAt: Date;\n  views: number;\n}\n\nconst sampleBlogs: BlogPost[] = [\n  {\n    id: '1',\n    title: 'The Hidden Costs of India\\'s Data Protection Bill: What Small Businesses Need to Know',\n    content: `The recently passed Data Protection Bill represents a watershed moment for digital privacy in India. However, beneath the headlines celebrating this milestone lies a complex web of compliance requirements that could fundamentally reshape the startup landscape.\n\n## The Compliance Challenge\n\nFor startups and small businesses, the bill introduces several mandatory requirements:\n\n- **Data Protection Officer (DPO) appointment** - Companies processing significant personal data must designate a qualified DPO\n- **Privacy by design implementation** - Systems must be built with privacy as a foundational principle\n- **Consent management systems** - Explicit user consent tracking and management\n- **Data localization requirements** - Certain categories of data must be stored within Indian borders\n\n## Financial Implications\n\nOur analysis of compliance costs reveals concerning figures:\n\n- Initial setup: ₹5-15 lakhs for basic compliance infrastructure\n- Annual compliance costs: ₹2-8 lakhs depending on data volume\n- Legal consultation fees: ₹1-3 lakhs annually\n- Technology upgrades: ₹3-10 lakhs for privacy-compliant systems\n\n## The Innovation Dilemma\n\nWhile the bill strengthens consumer protection, it creates a paradox for the startup ecosystem. Young companies, already operating on razor-thin margins, must now allocate significant resources to compliance rather than innovation.\n\n## Recommendations for Startups\n\n1. **Start early**: Begin compliance planning now, before the 18-month deadline\n2. **Seek government support**: Advocate for MSME-specific compliance assistance\n3. **Collaborate**: Form industry groups to share compliance costs\n4. **Invest in privacy-first architecture**: Build systems that inherently protect user data\n\nThe bill's success will ultimately depend on how well India balances consumer protection with fostering innovation.`,\n    excerpt: 'An in-depth analysis of how India\\'s new data protection legislation will impact startups and small businesses, including hidden compliance costs and strategic recommendations.',\n    slug: 'data-protection-bill-startup-impact',\n    coverImage: undefined,\n    authorName: 'Dr. Priya Sharma',\n    authorImage: undefined,\n    authorBio: 'Technology policy researcher at IIT Delhi with 12 years of experience in digital governance and startup ecosystem analysis.',\n    category: 'Policy Analysis',\n    tags: ['Data Protection', 'Startups', 'Policy', 'Compliance'],\n    readTime: 8,\n    publishedAt: new Date(Date.now() - 7200000), // 2 hours ago\n    views: 1247\n  },\n  {\n    id: '2',\n    title: 'NavIC vs GPS: Why India\\'s Indigenous Navigation System Could Change Everything',\n    content: `India's Navigation with Indian Constellation (NavIC) system is more than just an alternative to GPS—it represents a strategic shift toward technological sovereignty that could have far-reaching implications for national security, commercial applications, and global positioning dynamics.\n\n## Technical Superiority in Regional Context\n\nNavIC offers several advantages over GPS within the Indian subcontinent:\n\n- **Higher accuracy**: 1-3 meters compared to GPS's 3-5 meters in urban areas\n- **Better signal penetration**: Optimized for Indian geographical and atmospheric conditions\n- **Dual-frequency capability**: L5 and S-band frequencies provide better building penetration\n- **Regional focus**: Concentrated coverage ensures optimal performance in target areas\n\n## Strategic Independence\n\nThe timing of NavIC's civilian rollout is particularly significant given:\n\n- Increasing global tensions affecting satellite access\n- China's BeiDou expansion in the Indo-Pacific region\n- European Galileo system's growing influence\n- Russia's GLONASS reliability concerns during conflicts\n\n## Commercial Applications\n\nEarly adopters are already exploring innovative use cases:\n\n### Transportation & Logistics\n- **Last-mile delivery optimization** in dense urban areas\n- **Fleet management** with centimeter-level precision\n- **Autonomous vehicle development** with Indian-specific mapping\n\n### Financial Services\n- **Transaction verification** through location-based authentication\n- **Rural banking** expansion using precise location services\n- **Insurance assessments** for agricultural and property claims\n\n### Agriculture\n- **Precision farming** techniques adapted for Indian crop patterns\n- **Weather-based crop insurance** with accurate location correlation\n- **Supply chain tracking** from farm to market\n\n## Implementation Challenges\n\nDespite its potential, NavIC faces several hurdles:\n\n1. **Device ecosystem development** - Limited smartphone and automotive integration\n2. **Industry adoption costs** - Retrofitting existing systems requires investment\n3. **International standardization** - Ensuring compatibility with global systems\n4. **Skilled workforce development** - Training engineers and technicians\n\n## Global Implications\n\nNavIC's success could inspire other nations to develop regional navigation systems, potentially fragmenting the GPS-dominated landscape. This could lead to:\n\n- Enhanced global navigation redundancy\n- Reduced single-point-of-failure risks\n- Increased geopolitical bargaining power for system operators\n- New standards for international navigation cooperation\n\nThe next five years will be crucial in determining whether NavIC becomes a niche regional solution or a globally significant navigation system.`,\n    excerpt: 'Exploring how India\\'s NavIC navigation system offers superior regional accuracy and strategic independence, potentially revolutionizing everything from logistics to national security.',\n    slug: 'navic-indigenous-navigation-system-analysis',\n    coverImage: undefined,\n    authorName: 'Rajesh Kumar',\n    authorImage: undefined,\n    authorBio: 'Aerospace engineer and technology journalist covering space technology and satellite systems for over 15 years.',\n    category: 'Technology',\n    tags: ['NavIC', 'GPS', 'Navigation', 'Technology', 'Independence'],\n    readTime: 12,\n    publishedAt: new Date(Date.now() - 21600000), // 6 hours ago\n    views: 892\n  },\n  {\n    id: '3',\n    title: 'The AI Revolution in Bengaluru: Inside India\\'s New Tech Hub\\'s Ambitious Plans',\n    content: `Bengaluru's new AI research center represents more than just another tech facility—it's a strategic bet on India's ability to compete in the global artificial intelligence race. Our exclusive inside look reveals ambitious plans that could reshape India's position in the AI landscape.\n\n## The Vision\n\nThe center, backed by ₹2,500 crores in government funding and private investment, aims to:\n\n- Develop AI solutions specifically for Indian challenges\n- Train 50,000 AI professionals over the next five years\n- Incubate 200+ AI startups annually\n- Create industry-academic partnerships with global tech giants\n\n## Focus Areas\n\n### Language AI\nGiven India's linguistic diversity, the center prioritizes:\n- **Multilingual AI models** supporting 22 official languages\n- **Real-time translation systems** for government services\n- **Voice recognition** optimized for Indian accents and dialects\n\n### Healthcare AI\n- **Diagnostic imaging** for rural healthcare centers\n- **Drug discovery** using Indian genetic databases\n- **Telemedicine platforms** with AI-powered initial screening\n\n### Agricultural Intelligence\n- **Crop yield prediction** using satellite imagery and weather data\n- **Pest and disease identification** through mobile applications\n- **Market price forecasting** for better farmer decision-making\n\n## Global Competition Context\n\nThe timing is critical as:\n\n- China leads in AI publications and patents\n- The US dominates in AI research funding and talent\n- Europe focuses on AI ethics and regulation\n- India seeks to carve out its unique position\n\n## Talent Challenge\n\nDespite the ambitious plans, the center faces a significant talent shortage:\n\n- **Current gap**: 500,000 AI professionals needed by 2025\n- **Education pipeline**: Only 50,000 graduates annually with relevant skills\n- **Brain drain**: 40% of Indian AI talent works abroad\n- **Skill mismatch**: Industry needs vs. academic curriculum gaps\n\n## Strategic Partnerships\n\nKey collaborations include:\n\n### International\n- **MIT collaboration** on federated learning research\n- **Stanford partnership** for AI ethics frameworks\n- **Oxford joint program** for natural language processing\n\n### Domestic\n- **IIT network integration** for research coordination\n- **Industry partnerships** with TCS, Infosys, and Wipro\n- **Startup ecosystem** connection through incubation programs\n\n## Economic Impact Projections\n\nConservative estimates suggest the center could:\n\n- Generate ₹50,000 crores in economic value by 2030\n- Create 300,000 direct and indirect jobs\n- Attract ₹15,000 crores in foreign investment\n- Position India among top 3 global AI hubs\n\nThe success of this initiative could determine whether India becomes an AI leader or remains a technology services provider to global AI companies.`,\n    excerpt: 'An exclusive look inside Bengaluru\\'s new AI research center, examining its ambitious plans to position India as a global leader in artificial intelligence innovation.',\n    slug: 'bengaluru-ai-revolution-tech-hub-analysis',\n    coverImage: undefined,\n    authorName: 'Maria Rodriguez',\n    authorImage: undefined,\n    authorBio: 'Senior technology correspondent covering emerging markets and innovation hubs across Asia-Pacific.',\n    category: 'Innovation',\n    tags: ['AI', 'Bengaluru', 'Technology', 'Innovation', 'Research'],\n    readTime: 10,\n    publishedAt: new Date(Date.now() - 86400000), // 1 day ago\n    views: 2156\n  }\n];\n\nconst categories = ['All', 'Policy Analysis', 'Technology', 'Innovation', 'Opinion', 'Economics'];\n\nexport default function BlogsPage() {\n  const [, params] = useRoute('/blogs/:slug');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [filteredBlogs, setFilteredBlogs] = useState(sampleBlogs);\n\n  useEffect(() => {\n    let filtered = sampleBlogs;\n\n    if (selectedCategory !== 'All') {\n      filtered = filtered.filter(blog => blog.category === selectedCategory);\n    }\n\n    if (searchTerm) {\n      filtered = filtered.filter(blog =>\n        blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        blog.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        blog.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))\n      );\n    }\n\n    setFilteredBlogs(filtered);\n  }, [searchTerm, selectedCategory]);\n\n  const formatDate = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours}h ago`;\n    if (diffDays < 7) return `${diffDays}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  // If we have a slug parameter, show individual blog post\n  if (params?.slug) {\n    const blog = sampleBlogs.find(b => b.slug === params.slug);\n    if (!blog) {\n      return (\n        <div className=\"min-h-screen bg-white flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-black mb-4\">Blog post not found</h1>\n            <Link href=\"/blogs\">\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                Back to Blogs\n              </Button>\n            </Link>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"min-h-screen bg-white\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-blue-100 sticky top-0 z-10\">\n          <div className=\"max-w-4xl mx-auto px-4 py-4\">\n            <Link href=\"/blogs\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50 mb-4\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Blogs & Insights\n              </Button>\n            </Link>\n          </div>\n        </header>\n\n        {/* Blog Content */}\n        <article className=\"max-w-4xl mx-auto px-4 py-8\">\n          {/* Title */}\n          <h1 className=\"text-3xl lg:text-4xl font-bold text-black leading-tight mb-6\">\n            {blog.title}\n          </h1>\n\n          {/* Author Info */}\n          <div className=\"flex items-center gap-4 mb-8 p-4 bg-blue-50 rounded-lg border border-blue-100\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium\">\n                  {blog.authorName.split(' ').map(n => n[0]).join('')}\n                </span>\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-black\">{blog.authorName}</h3>\n              <p className=\"text-sm text-gray-700 mb-2\">{blog.authorBio}</p>\n              <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                <span className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  {formatDate(blog.publishedAt)}\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"h-4 w-4\" />\n                  {blog.readTime} min read\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Eye className=\"h-4 w-4\" />\n                  {blog.views.toLocaleString()} views\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div className=\"flex flex-wrap gap-2 mb-8\">\n            {blog.tags.map(tag => (\n              <Badge key={tag} className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                #{tag}\n              </Badge>\n            ))}\n          </div>\n\n          {/* Content */}\n          <div className=\"prose prose-lg max-w-none\">\n            <div className=\"text-black leading-relaxed whitespace-pre-line\">\n              {blog.content}\n            </div>\n          </div>\n        </article>\n      </div>\n    );\n  }\n\n  // Blog listing page\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-blue-100\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"mb-8\">\n            <div className=\"flex justify-start mb-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to News\n                </Button>\n              </Link>\n            </div>\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl font-bold text-black mb-4\">Blogs & Insights</h1>\n              <p className=\"text-lg text-gray-700 max-w-2xl mx-auto\">\n                Expert opinions, deep dives, and in-depth commentary on the stories that shape our world\n              </p>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search blogs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-blue-200 focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map(category => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className={selectedCategory === category ? \n                    \"bg-blue-600 hover:bg-blue-700 text-white\" : \n                    \"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                  }\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {filteredBlogs.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <h3 className=\"text-xl font-medium text-black mb-2\">No blogs found</h3>\n                <p className=\"text-gray-600\">Try adjusting your search or filter criteria</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {filteredBlogs.map((blog) => (\n                  <Card key={blog.id} className=\"border-blue-100 hover:border-blue-300 transition-all duration-200 hover:shadow-lg\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                          {blog.category}\n                        </Badge>\n                        <span className=\"text-sm text-gray-500\">{formatDate(blog.publishedAt)}</span>\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-black leading-tight line-clamp-2 hover:text-blue-700 transition-colors\">\n                        <Link href={`/blogs/${blog.slug}`}>\n                          {blog.title}\n                        </Link>\n                      </h3>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-gray-700 text-sm mb-4 line-clamp-3\">\n                        {blog.excerpt}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white text-xs font-medium\">\n                            {blog.authorName.split(' ').map(n => n[0]).join('')}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-black\">{blog.authorName}</p>\n                          <div className=\"flex items-center gap-3 text-xs text-gray-500\">\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {blog.readTime} min\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Eye className=\"h-3 w-3\" />\n                              {blog.views}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {blog.tags.slice(0, 2).map(tag => (\n                            <Badge key={tag} variant=\"outline\" className=\"text-xs text-blue-600 border-blue-200\">\n                              #{tag}\n                            </Badge>\n                          ))}\n                          {blog.tags.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs text-gray-500 border-gray-200\">\n                              +{blog.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                        <Link href={`/blogs/${blog.slug}`}>\n                          <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                            Read more\n                          </Button>\n                        </Link>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"space-y-6\">\n              {/* Trending Posts */}\n              <Card className=\"border-blue-100\">\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold text-black flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                    Trending\n                  </h3>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {sampleBlogs.slice(0, 3).map((blog, index) => (\n                      <div key={blog.id} className=\"pb-4 border-b border-blue-50 last:border-b-0\">\n                        <span className=\"text-2xl font-bold text-blue-600\">#{index + 1}</span>\n                        <Link href={`/blogs/${blog.slug}`}>\n                          <h4 className=\"text-sm font-medium text-black hover:text-blue-700 transition-colors line-clamp-2 mt-1\">\n                            {blog.title}\n                          </h4>\n                        </Link>\n                        <div className=\"flex items-center gap-2 mt-2 text-xs text-gray-500\">\n                          <Eye className=\"h-3 w-3\" />\n                          {blog.views.toLocaleString()}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22988},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChatMessages } from \"@/components/chat/chat-messages\";\nimport { ChatInput } from \"@/components/chat/chat-input\";\nimport { NewsArticleInput } from \"@/components/chat/news-article-input\";\nimport { SuggestionCards } from \"@/components/chat/suggestion-cards\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { openRouterService } from \"@/services/openrouterService\";\nimport type { Message } from \"@shared/schema\";\n\n// Generate a unique session ID for this chat session\nconst generateSessionId = () => {\n  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\nexport default function ChatPage() {\n  const [sessionId] = useState(generateSessionId);\n  const [isTyping, setIsTyping] = useState(false);\n  const [articleText, setArticleText] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Check for article content passed from news page\n  useEffect(() => {\n    const storedArticle = sessionStorage.getItem('articleForAnalysis');\n    if (storedArticle) {\n      setArticleText(storedArticle);\n      // Clear the stored article after loading\n      sessionStorage.removeItem('articleForAnalysis');\n      \n      // Show a welcome message when article is pre-loaded\n      const welcomeMessage: Message = {\n        id: 'welcome-' + Date.now().toString(),\n        text: \"I've received the article you selected for analysis. You can ask me questions about it using the suggestion buttons below, or type your own question!\",\n        sender: 'assistant',\n        sessionId,\n        timestamp: new Date()\n      };\n      setMessages([welcomeMessage]);\n    }\n  }, [sessionId]);\n\n  // For now, we'll use local state for messages since the backend might not have the message endpoints\n  // In a real implementation, we'd fetch from the API\n\n  // Send message function with real AI integration\n  const handleSendMessage = async (text: string) => {\n    setIsTyping(true);\n    \n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: articleText \n        ? `Article to analyze:\\n\\n${articleText}\\n\\n---\\n\\nUser question: ${text}`\n        : text,\n      sender: 'user',\n      sessionId,\n      timestamp: new Date()\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    \n    try {\n      // Get real AI response from OpenRouter\n      const aiResponseText = await openRouterService.sendMessage(text, articleText);\n      \n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: aiResponseText,\n        sender: 'assistant',\n        sessionId,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, aiResponse]);\n    } catch (error) {\n      console.error('AI Response Error:', error);\n      \n      // Show error message to user\n      const errorResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: `I apologize, but I'm having trouble connecting to the AI service right now. ${error instanceof Error ? error.message : 'Please try again in a moment.'}`,\n        sender: 'assistant',\n        sessionId,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, errorResponse]);\n      \n      toast({\n        title: \"Connection Issue\",\n        description: \"Unable to get AI response. Please check your connection and try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n\n\n  const handleSuggestionClick = (suggestion: string) => {\n    handleSendMessage(suggestion);\n  };\n\n  const handleClearChat = () => {\n    if (messages.length > 0) {\n      if (confirm('Are you sure you want to clear the conversation?')) {\n        setMessages([]);\n        setArticleText(\"\");\n        toast({\n          title: \"Conversation cleared\",\n          description: \"Your chat history has been cleared.\",\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      {/* Left Panel */}\n      <div className=\"w-80 border-r border-border p-4 space-y-4 hidden lg:block bg-card\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to News\n            </Button>\n          </Link>\n        </div>\n        \n        <NewsArticleInput\n          value={articleText}\n          onChange={setArticleText}\n          onClear={() => setArticleText(\"\")}\n        />\n        \n        <SuggestionCards\n          onSuggestionClick={handleSuggestionClick}\n          hasArticleText={!!articleText}\n        />\n      </div>\n\n      {/* Main Chat Content */}\n      <div className=\"flex-1 flex flex-col bg-card shadow-xl\">\n        {/* Chat Header */}\n        <header className=\"p-4 shadow-lg bg-gradient-to-r from-primary to-primary/80\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n                <Eye className=\"text-white text-lg\" />\n              </div>\n              <div>\n                <h1 className=\"text-white font-bold text-xl\">Varta.AI</h1>\n                <p className=\"text-white/80 text-sm\">\n                  {isTyping ? \"Analyzing...\" : \"Analyze. Summarize. Detect Bias.\"}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-white/80 text-sm hidden md:block\">\n                {messages.length} messages\n              </span>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearChat}\n                className=\"p-2 rounded-lg bg-white/20 hover:bg-white/30 transition-colors duration-200 text-white h-auto\"\n                title=\"Clear conversation\"\n              >\n                Clear Chat\n              </Button>\n            </div>\n          </div>\n        </header>\n        \n        <ChatMessages\n          messages={messages}\n          isTyping={isTyping}\n        />\n        \n        <ChatInput\n          onSendMessage={handleSendMessage}\n          disabled={isTyping}\n        />\n\n        {/* Mobile Article Input - shown on smaller screens */}\n        <div className=\"lg:hidden border-t border-border p-4 space-y-3\">\n          <NewsArticleInput\n            value={articleText}\n            onChange={setArticleText}\n            onClear={() => setArticleText(\"\")}\n          />\n          \n          <SuggestionCards\n            onSuggestionClick={handleSuggestionClick}\n            hasArticleText={!!articleText}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7176},"client/src/pages/community.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Send, Users, MessageSquare, ThumbsUp, Reply, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Message {\n  id: string;\n  user: string;\n  avatar: string;\n  message: string;\n  timestamp: Date;\n  isCurrentUser?: boolean;\n  likes: number;\n  replies: number;\n  articleRef?: string;\n  userRole?: 'journalist' | 'expert' | 'citizen';\n}\n\nexport default function CommunityPage() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      user: 'Dr. Sarah Chen',\n      avatar: 'SC',\n      message: 'The Parliament\\'s data protection bill raises serious concerns about implementation timeline. As a cybersecurity researcher, I\\'ve seen similar legislation fail due to lack of technical clarity. The 18-month compliance window seems unrealistic for smaller organizations.',\n      timestamp: new Date(Date.now() - 1800000), // 30 minutes ago\n      isCurrentUser: false,\n      likes: 12,\n      replies: 3,\n      articleRef: 'Parliament Passes Data Protection Bill',\n      userRole: 'expert'\n    },\n    {\n      id: '2', \n      user: 'Rajesh Kumar',\n      avatar: 'RK',\n      message: 'Valid points @Dr. Sarah Chen. But we can\\'t keep delaying this. The EU\\'s GDPR took years to implement properly, but at least they started somewhere. Indian citizens deserve data protection now, not in another 5 years.',\n      timestamp: new Date(Date.now() - 1500000), // 25 minutes ago\n      isCurrentUser: false,\n      likes: 8,\n      replies: 2,\n      userRole: 'citizen'\n    },\n    {\n      id: '3',\n      user: 'Maria Rodriguez', \n      avatar: 'MR',\n      message: 'As a small business owner, the compliance costs are genuinely scary. We\\'re talking about ₹5-10 lakhs just for initial setup. The bill should have included government subsidies or tax breaks for MSMEs. This could kill innovation in the startup ecosystem.',\n      timestamp: new Date(Date.now() - 1200000), // 20 minutes ago\n      isCurrentUser: false,\n      likes: 15,\n      replies: 4,\n      userRole: 'citizen'\n    },\n    {\n      id: '4',\n      user: 'Alex Thompson',\n      avatar: 'AT', \n      message: 'I\\'ve been covering tech policy for 8 years. The cross-border data transfer clauses are actually more flexible than expected. Unlike China\\'s approach, this allows for \"adequate protection\" agreements. Could be good for IT services exports.',\n      timestamp: new Date(Date.now() - 900000), // 15 minutes ago\n      isCurrentUser: false,\n      likes: 6,\n      replies: 1,\n      userRole: 'journalist'\n    },\n    {\n      id: '5',\n      user: 'Priya Sharma',\n      avatar: 'PS',\n      message: 'The enforcement part is what matters. We\\'ve seen how poorly other digital laws are enforced. Will the Data Protection Board have enough resources? The ₹500 crore penalty sounds impressive but means nothing without proper auditing mechanisms.',\n      timestamp: new Date(Date.now() - 600000), // 10 minutes ago\n      isCurrentUser: false,\n      likes: 9,\n      replies: 2,\n      userRole: 'expert'\n    },\n    {\n      id: '6',\n      user: 'Amit Singh',\n      avatar: 'AS',\n      message: 'Just read the full 200-page document. Section 43 on \"significant data fiduciaries\" is problematic. Who decides what\\'s \"significant\"? This could become another tool for selective enforcement against companies the government doesn\\'t like.',\n      timestamp: new Date(Date.now() - 300000), // 5 minutes ago\n      isCurrentUser: false,\n      likes: 11,\n      replies: 0,\n      userRole: 'citizen'\n    },\n    {\n      id: '7',\n      user: 'Dr. Neha Gupta',\n      avatar: 'NG',\n      message: 'The \"right to be forgotten\" provision is weaker than GDPR. Indian citizens get limited control compared to Europeans. Also, the \"grounds of public interest\" exception is too broad - basically gives government carte blanche to access data.',\n      timestamp: new Date(Date.now() - 120000), // 2 minutes ago\n      isCurrentUser: false,\n      likes: 7,\n      replies: 1,\n      userRole: 'expert'\n    }\n  ]);\n  \n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser] = useState('You');\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || newMessage.length > 500) return;\n\n    const message: Message = {\n      id: Date.now().toString(),\n      user: currentUser,\n      avatar: 'YU',\n      message: newMessage,\n      timestamp: new Date(),\n      isCurrentUser: true,\n      likes: 0,\n      replies: 0,\n      userRole: 'citizen'\n    };\n\n    setMessages(prev => [...prev, message]);\n    setNewMessage('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const formatDate = (date: Date) => {\n    const now = new Date();\n    const diffTime = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffTime / (1000 * 60));\n    \n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getRoleColor = (role?: string) => {\n    switch (role) {\n      case 'expert': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'journalist': return 'bg-green-100 text-green-800 border-green-200';\n      case 'citizen': return 'bg-gray-100 text-gray-800 border-gray-200';\n      default: return 'bg-blue-100 text-blue-800 border-blue-200';\n    }\n  };\n\n  const handleLike = (messageId: string) => {\n    setMessages(prev => prev.map(msg => \n      msg.id === messageId ? { ...msg, likes: msg.likes + 1 } : msg\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\n        <div className=\"max-w-6xl mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2 lg:gap-4 min-w-0 flex-1\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-blue-600 hover:bg-blue-50 flex-shrink-0\">\n                  <ArrowLeft className=\"h-4 w-4 mr-1 lg:mr-2\" />\n                  <span className=\"hidden sm:inline\">Back to News</span>\n                  <span className=\"sm:hidden\">Back</span>\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-2 lg:gap-3 min-w-0\">\n                <MessageSquare className=\"h-5 w-5 lg:h-6 lg:w-6 text-blue-600 flex-shrink-0\" />\n                <div className=\"min-w-0\">\n                  <h1 className=\"text-lg lg:text-xl font-semibold text-gray-900 truncate\">Community Discussions</h1>\n                  <p className=\"text-xs lg:text-sm text-gray-500 truncate\">Parliament Passes Data Protection Bill</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 lg:gap-3 flex-shrink-0\">\n              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 text-xs\">\n                <span className=\"hidden sm:inline\">{messages.length} messages</span>\n                <span className=\"sm:hidden\">{messages.length}</span>\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-green-600 border-green-200 text-xs hidden sm:inline-flex\">\n                24 active users\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Chat Container */}\n      <div className=\"max-w-6xl mx-auto min-h-screen flex flex-col\">\n        {/* Messages Area */}\n        <div className=\"flex-1 overflow-hidden\">\n          <ScrollArea ref={scrollAreaRef} className=\"h-full\">\n            <div className=\"p-2 lg:p-4 space-y-4 lg:space-y-6\">\n              {messages.map((message) => (\n                <div key={message.id} className=\"bg-white rounded-lg border border-gray-200 p-3 lg:p-4 shadow-sm hover:shadow-md transition-shadow\">\n                  <div className=\"flex gap-3 lg:gap-4\">\n                    {/* Avatar */}\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-10 h-10 lg:w-12 lg:h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-medium text-xs lg:text-sm\">\n                          {message.avatar}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    {/* Message Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      {/* User Info */}\n                      <div className=\"flex items-center gap-2 lg:gap-3 mb-2 flex-wrap\">\n                        <span className=\"font-medium text-gray-900 text-sm lg:text-base\">{message.user}</span>\n                        {message.userRole && (\n                          <Badge className={`text-xs ${getRoleColor(message.userRole)}`}>\n                            {message.userRole}\n                          </Badge>\n                        )}\n                        <span className=\"text-xs lg:text-sm text-gray-500\">\n                          {formatDate(message.timestamp)}\n                        </span>\n                      </div>\n                      \n                      {/* Article Reference */}\n                      {message.articleRef && (\n                        <div className=\"mb-3 p-2 bg-blue-50 border-l-4 border-blue-500 rounded-r\">\n                          <span className=\"text-xs text-blue-600 font-medium\">Discussing:</span>\n                          <p className=\"text-sm text-blue-800\">{message.articleRef}</p>\n                        </div>\n                      )}\n                      \n                      {/* Message Text */}\n                      <div className=\"prose prose-sm max-w-none\">\n                        <p className=\"text-gray-800 leading-relaxed whitespace-pre-wrap\">\n                          {message.message}\n                        </p>\n                      </div>\n                      \n                      {/* Interaction Buttons */}\n                      <div className=\"flex items-center gap-4 mt-3 pt-2 border-t border-gray-100\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleLike(message.id)}\n                          className=\"text-gray-500 hover:text-blue-600 hover:bg-blue-50 h-auto p-1\"\n                        >\n                          <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                          <span className=\"text-sm\">{message.likes}</span>\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-gray-500 hover:text-blue-600 hover:bg-blue-50 h-auto p-1\"\n                        >\n                          <Reply className=\"h-4 w-4 mr-1\" />\n                          <span className=\"text-sm\">{message.replies}</span>\n                        </Button>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"text-gray-500 hover:text-blue-600 hover:bg-blue-50 h-auto p-1\"\n                        >\n                          <Share2 className=\"h-4 w-4 mr-1\" />\n                          <span className=\"text-sm\">Share</span>\n                        </Button>\n                        \n                        <div className=\"ml-auto text-xs text-gray-400\">\n                          {formatTime(message.timestamp)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Message Input */}\n        <div className=\"border-t border-gray-200 bg-white sticky bottom-0\">\n          <div className=\"p-3 lg:p-4\">\n            <div className=\"flex gap-2 lg:gap-3 items-end\">\n              <div className=\"flex-shrink-0 hidden sm:block\">\n                <div className=\"w-8 h-8 lg:w-10 lg:h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white font-medium text-xs lg:text-sm\">YU</span>\n                </div>\n              </div>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-2 lg:p-3\">\n                  <Input\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Share your thoughts on this article...\"\n                    className=\"border-0 bg-transparent focus:ring-0 p-0 text-gray-900 placeholder-gray-500 text-sm lg:text-base\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between mt-1 lg:mt-2 gap-2\">\n                  <p className=\"text-xs text-gray-500 truncate\">\n                    <span className=\"hidden sm:inline\">Join the discussion • Be respectful and constructive</span>\n                    <span className=\"sm:hidden\">Be respectful</span>\n                  </p>\n                  <div className=\"flex items-center gap-1 lg:gap-2 flex-shrink-0\">\n                    <span className=\"text-xs text-gray-400\">\n                      {newMessage.length}/500\n                    </span>\n                    <Button \n                      onClick={handleSendMessage}\n                      disabled={!newMessage.trim() || newMessage.length > 500}\n                      size=\"sm\"\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white h-8 px-2 lg:px-3\"\n                    >\n                      <Send className=\"h-3 w-3 lg:h-4 lg:w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Quick Actions */}\n            <div className=\"mt-2 lg:mt-3 flex flex-wrap gap-1 lg:gap-2 overflow-x-auto pb-1\">\n              <Badge \n                variant=\"outline\" \n                className=\"cursor-pointer hover:bg-blue-50 text-blue-600 border-blue-200 text-xs whitespace-nowrap\"\n                onClick={() => setNewMessage(\"I agree with this analysis because \")}\n              >\n                👍 Agree\n              </Badge>\n              <Badge \n                variant=\"outline\" \n                className=\"cursor-pointer hover:bg-orange-50 text-orange-600 border-orange-200 text-xs whitespace-nowrap\"\n                onClick={() => setNewMessage(\"I have concerns about \")}\n              >\n                🤔 Concerns\n              </Badge>\n              <Badge \n                variant=\"outline\" \n                className=\"cursor-pointer hover:bg-green-50 text-green-600 border-green-200 text-xs whitespace-nowrap\"\n                onClick={() => setNewMessage(\"Here's additional context: \")}\n              >\n                💡 Add Context\n              </Badge>\n              <Badge \n                variant=\"outline\" \n                className=\"cursor-pointer hover:bg-purple-50 text-purple-600 border-purple-200 text-xs whitespace-nowrap\"\n                onClick={() => setNewMessage(\"What about the impact on \")}\n              >\n                ❓ Question\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16341},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Menu, Plus, Sparkles, Languages, Loader2, Settings, ArrowRight, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { NewsFilters } from \"@/components/news-filters\";\nimport { NewsArticleCard } from \"@/components/news-article-card\";\nimport { TranslationModal } from \"@/components/translation-modal\";\nimport { StatsBar } from \"@/components/stats-bar\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { useLanguage } from \"@/contexts/language-context\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport type { Article, FilterState, UserPreferences } from \"@shared/schema\";\nimport type { SupportedLanguage } from \"@/lib/i18n\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const [filters, setFilters] = useState<FilterState>({\n    categories: [],\n    biasTypes: [],\n    sentiments: [],\n    timeRange: '',\n    search: '',\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState('latest');\n  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);\n  const [isTranslationModalOpen, setIsTranslationModalOpen] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [showWelcomeBanner, setShowWelcomeBanner] = useState(true);\n\n  const { language, setLanguage, t } = useLanguage();\n  const { user, logout } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Simplified preferences loading - no auto-apply to prevent API loops\n  const { data: userPreferences } = useQuery({\n    queryKey: ['/api/users', user?.id, 'preferences'],\n    enabled: false, // Disabled for now to prevent loops\n    retry: false,\n  });\n\n  const { data: articles = [], isLoading, error } = useQuery<Article[]>({\n    queryKey: ['/api/articles', filters, sortBy, language],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      \n      // Add language parameter to sync content language with UI language\n      params.append('language', language);\n      \n      if (filters.categories && filters.categories.length > 0) {\n        filters.categories.forEach(cat => params.append('categories', cat));\n      }\n      if (filters.biasTypes && filters.biasTypes.length > 0) {\n        filters.biasTypes.forEach(bias => params.append('biasTypes', bias));\n      }\n      if (filters.sentiments && filters.sentiments.length > 0) {\n        filters.sentiments.forEach(sent => params.append('sentiments', sent));\n      }\n      if (filters.timeRange) {\n        params.append('timeRange', filters.timeRange);\n      }\n      if (filters.search) {\n        params.append('search', filters.search);\n      }\n\n      const response = await fetch(`/api/articles?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch articles');\n      }\n      return response.json();\n    },\n  });\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFilters(prev => ({ ...prev, search: searchTerm }));\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n\n  const handleTranslate = (article: Article) => {\n    setSelectedArticle(article);\n    setIsTranslationModalOpen(true);\n  };\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n  };\n\n  // Bulk translate mutation\n  const bulkTranslateMutation = useMutation({\n    mutationFn: async (targetLanguage: string) => {\n      const response = await fetch('/api/articles/translate-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ language: targetLanguage }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to translate articles');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: t.bulkTranslationComplete,\n        description: `${data.translated} articles translated, ${data.skipped} skipped`,\n      });\n      // Refresh articles to show translated content\n      queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n    },\n    onError: (error) => {\n      toast({\n        title: t.bulkTranslationError,\n        description: error.message || \"Failed to translate articles\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBulkTranslate = () => {\n    if (language === 'en') {\n      toast({\n        title: \"Cannot translate to English\",\n        description: \"English is the source language\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkTranslateMutation.mutate(language);\n  };\n\n\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center fade-in\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-2\">Error Loading News</h1>\n          <p className=\"text-muted-foreground mb-4\">Failed to fetch articles. Please try again.</p>\n          <Button onClick={handleRefresh} className=\"hover-lift\">Retry</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background transition-all duration-500\">\n      {/* Header */}\n      <header className=\"glass-morphism backdrop-blur-md border-b border-border sticky top-0 z-50 slide-in-right\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"flex items-center gap-2\">\n                  <h1 className=\"text-xl font-bold text-primary\">\n                    {t.appTitle}\n                  </h1>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">{t.appSubtitle}</span>\n              </div>\n            </div>\n            \n            <div className=\"flex-1 max-w-lg mx-8\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder={t.searchPlaceholder}\n                  className=\"pl-10 transition-all duration-200 hover-lift\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              {/* UI Language Switcher */}\n              <Select value={language} onValueChange={(value: SupportedLanguage) => setLanguage(value)}>\n                <SelectTrigger className=\"w-36 hover-lift\">\n                  <div className=\"flex items-center gap-2\">\n                    <Languages className=\"h-4 w-4\" />\n                    <SelectValue />\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"en\">English</SelectItem>\n                  <SelectItem value=\"hi\">हिंदी</SelectItem>\n                  <SelectItem value=\"mr\">मराठी</SelectItem>\n                  <SelectItem value=\"ta\">தமிழ்</SelectItem>\n                  <SelectItem value=\"kn\">ಕನ್ನಡ</SelectItem>\n                  <SelectItem value=\"te\">తెలుగు</SelectItem>\n                  <SelectItem value=\"ml\">മലയാളം</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Bulk Translate Button */}\n              {language !== 'en' && (\n                <Button\n                  onClick={handleBulkTranslate}\n                  disabled={bulkTranslateMutation.isPending}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"hover-lift\"\n                  title={t.translateAllArticles}\n                >\n                  {bulkTranslateMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      {t.bulkTranslating.split('...')[0]}...\n                    </>\n                  ) : (\n                    <>\n                      <Languages className=\"h-4 w-4 mr-2\" />\n                      {t.translateAll}\n                    </>\n                  )}\n                </Button>\n              )}\n              \n              \n              {/* User Info and Logout */}\n              <div className=\"flex items-center space-x-2 border-l border-border pl-3\">\n                <span className=\"text-sm text-foreground hidden sm:block\">\n                  Welcome, {user?.fullName?.split(' ')[0] || 'User'}\n                </span>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"hover-lift text-black border-blue-600 hover:bg-blue-50\"\n                  onClick={logout}\n                >\n                  Logout\n                </Button>\n              </div>\n              \n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"hover-lift\"\n                onClick={() => setIsSidebarOpen(true)}\n              >\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Welcome Banner for New Users */}\n      {showWelcomeBanner && user && (\n        <div className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white p-4 fade-in\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Settings className=\"h-6 w-6\" />\n              <div>\n                <h3 className=\"font-semibold\">Welcome to Varta.AI, {user.fullName}!</h3>\n                <p className=\"text-sm opacity-90\">Set up your preferences to get personalized news recommendations</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Link href=\"/preferences\">\n                <Button variant=\"secondary\" size=\"sm\" className=\"bg-white/20 hover:bg-white/30 border-white/30\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Set Preferences\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowWelcomeBanner(false)}\n                className=\"text-white hover:bg-white/20 p-2\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex flex-col lg:flex-row gap-6\">\n          {/* Sidebar */}\n          <aside className=\"w-full lg:w-64 flex-shrink-0 fade-in\">\n            <div className=\"sticky top-20\">\n              <NewsFilters filters={filters} onFiltersChange={setFilters} />\n            </div>\n          </aside>\n\n          {/* Main Content */}\n          <main className=\"flex-1 fade-in\">\n            <StatsBar onRefresh={handleRefresh} sortBy={sortBy} onSortChange={setSortBy} />\n\n            {/* Articles */}\n            {isLoading ? (\n              <div className=\"space-y-6 fade-in\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"bg-card rounded-lg shadow-sm p-6 animate-pulse hover-lift\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <div className=\"h-4 w-16 bg-muted rounded\"></div>\n                      <div className=\"h-4 w-20 bg-muted rounded\"></div>\n                    </div>\n                    <div className=\"h-6 w-3/4 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-4 w-full bg-muted rounded mb-1\"></div>\n                    <div className=\"h-4 w-2/3 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : articles.length === 0 ? (\n              <div className=\"bg-card rounded-lg shadow-sm p-8 text-center hover-lift fade-in\">\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">{t.noArticlesFound}</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Try adjusting your filters or search terms to find more articles.\n                </p>\n                <Button onClick={handleRefresh} className=\"hover-lift\">\n                  {t.refresh} {t.articles}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-6 fade-in\">\n                {articles.map((article, index) => (\n                  <div \n                    key={article.id}\n                    className=\"fade-in\"\n                    style={{\n                      animationDelay: `${index * 50}ms`\n                    }}\n                  >\n                    <NewsArticleCard\n                      article={article}\n                      onTranslate={handleTranslate}\n                    />\n                  </div>\n                ))}\n                \n                {/* Load More Button */}\n                <div className=\"flex justify-center mt-8\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleRefresh}\n                    className=\"hover-lift transition-all duration-300\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Load More {t.articles}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </main>\n        </div>\n      </div>\n\n      {/* Translation Modal */}\n      <TranslationModal\n        article={selectedArticle}\n        isOpen={isTranslationModalOpen}\n        onClose={() => {\n          setIsTranslationModalOpen(false);\n          setSelectedArticle(null);\n        }}\n      />\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 right-6 z-40 fade-in\">\n        <Button\n          className=\"w-14 h-14 rounded-full shadow-lg hover-lift float-animation transition-all duration-300 bg-primary hover:bg-primary/90\"\n          onClick={handleRefresh}\n        >\n          <Plus className=\"h-6 w-6\" />\n        </Button>\n      </div>\n\n      {/* Sidebar */}\n      <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":14898},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { loginSchema, LoginData } from \"../../../shared/schema\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (userData) => {\n      login(userData);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      setLocation('/');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center px-4 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-20 left-20 w-32 h-32 bg-cyan-400/10 rounded-full blur-2xl animate-bounce\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 bg-pink-400/10 rounded-full blur-xl animate-bounce delay-500\"></div>\n      </div>\n\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-6 group\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-2xl transform group-hover:scale-110 transition-all duration-300\">\n              <span className=\"text-white font-bold text-xs\">V.AI</span>\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">Varta.AI</h1>\n          </div>\n          <h2 className=\"text-3xl font-bold text-white mb-2 animate-fade-in\">Welcome Back</h2>\n          <p className=\"text-gray-300 text-lg\">Sign in to continue your journey</p>\n        </div>\n\n        {/* Login Form */}\n        <div className=\"bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 p-8 relative shadow-2xl hover:shadow-purple-500/20 transition-all duration-500\">\n          {/* Signup Link in top right */}\n          <Link href=\"/signup\">\n            <div className=\"absolute top-6 right-6 text-sm text-white/70 hover:text-white cursor-pointer font-medium flex items-center gap-2 transition-all duration-300 hover:scale-105 bg-white/10 px-4 py-2 rounded-full backdrop-blur-sm border border-white/20\">\n              Create Account\n              <span className=\"text-base transform group-hover:translate-x-1 transition-transform\">→</span>\n            </div>\n          </Link>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-12\">\n            {/* Email Field */}\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white/90 font-semibold text-sm uppercase tracking-wider\">Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"email\"\n                      className=\"h-14 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/20 text-white placeholder:text-white/50 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/30 focus:bg-white/10 transition-all duration-300 text-lg\"\n                      placeholder=\"Enter your email address\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-300\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Password Field */}\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white/90 font-semibold text-sm uppercase tracking-wider\">Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showPassword ? \"text\" : \"password\"}\n                        className=\"h-14 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/20 text-white placeholder:text-white/50 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/30 focus:bg-white/10 transition-all duration-300 text-lg pr-12\"\n                        placeholder=\"Enter your password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors duration-200\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-6 w-6\" />\n                        ) : (\n                          <Eye className=\"h-6 w-6\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-red-300\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(checked as boolean)}\n                  className=\"border-white/30 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500\"\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm text-white/80 hover:text-white cursor-pointer\">\n                  Remember me\n                </Label>\n              </div>\n              <Link href=\"/forgot-password\">\n                <span className=\"text-sm text-purple-300 hover:text-purple-200 cursor-pointer transition-colors\">\n                  Forgot password?\n                </span>\n              </Link>\n            </div>\n\n            {/* Login Button */}\n            <Button\n              type=\"submit\"\n              disabled={loginMutation.isPending}\n              className=\"w-full h-14 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-bold rounded-2xl transition-all duration-300 shadow-2xl hover:shadow-purple-500/30 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none text-lg\"\n            >\n              {loginMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                  Signing you in...\n                </div>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n\n            {/* Forgot Password Link - Bottom Center */}\n            <div className=\"text-center mt-8\">\n              <Link href=\"/forgot-password\">\n                <span className=\"text-sm text-white/60 hover:text-purple-300 cursor-pointer transition-all duration-300 hover:underline\">\n                  Forgot your password?\n                </span>\n              </Link>\n            </div>\n\n            {/* Sign Up Link */}\n            <div className=\"text-center mt-4\">\n              <span className=\"text-white/70 text-sm\">Don't have an account? </span>\n              <Link href=\"/signup\">\n                <span className=\"text-purple-300 hover:text-purple-200 cursor-pointer font-semibold text-sm transition-all duration-300 hover:underline\">\n                  Create one now\n                </span>\n              </Link>\n            </div>\n          </form>\n        </Form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9720},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/recommendations.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Heart, Eye, Share2, TrendingUp, RotateCcw, Clock, User, Calendar } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Article {\n  id: number;\n  title: string;\n  content: string;\n  summary?: string;\n  source: string;\n  category: string;\n  politicalBias: string;\n  sentimentScore: number;\n  emotionalTone: string;\n  publishedAt: string;\n}\n\ninterface Recommendation {\n  article: Article;\n  score: number;\n  reason: string;\n}\n\ninterface RecommendationResponse {\n  recommendations: Recommendation[];\n  totalInteractions: number;\n  userId: number;\n}\n\ninterface UserInteraction {\n  userId: number;\n  articleId: number;\n  interactionType: 'click' | 'view' | 'share' | 'like';\n  category: string;\n  politicalBias: string;\n  sessionDuration?: number;\n}\n\nexport function RecommendationsPage() {\n  const [userId, setUserId] = useState<number>(1); // Default user for demo\n  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Get current user from localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('vartaAI_user');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      setUserId(user.id);\n    }\n  }, []);\n\n  // Fetch recommendations\n  const { data: recommendationData, isLoading: isLoadingRecommendations, refetch } = useQuery<RecommendationResponse>({\n    queryKey: ['/api/recommend', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/recommend/${userId}?limit=10&excludeViewed=true`);\n      if (!response.ok) throw new Error('Failed to fetch recommendations');\n      return response.json();\n    },\n    enabled: !!userId\n  });\n\n  // Fetch user interactions\n  const { data: interactions } = useQuery<UserInteraction[]>({\n    queryKey: ['/api/users', userId, 'interactions'],\n    queryFn: async () => {\n      const response = await fetch(`/api/users/${userId}/interactions?limit=20`);\n      if (!response.ok) throw new Error('Failed to fetch interactions');\n      return response.json();\n    },\n    enabled: !!userId\n  });\n\n  // Record interaction mutation\n  const recordInteraction = useMutation({\n    mutationFn: async (interaction: UserInteraction) => {\n      const response = await fetch('/api/interact', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(interaction)\n      });\n      if (!response.ok) throw new Error('Failed to record interaction');\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate and refetch recommendations after recording interaction\n      queryClient.invalidateQueries({ queryKey: ['/api/recommend', userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', userId, 'interactions'] });\n    }\n  });\n\n  // Smart refresh recommendations mutation\n  const smartRefreshMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/recommend/${userId}/refresh?count=3`);\n      if (!response.ok) {\n        throw new Error('Failed to get smart recommendations');\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.newRecommendations && data.newRecommendations.length > 0) {\n        toast({\n          title: \"Smart Recommendations Added!\",\n          description: `Found ${data.newRecommendations.length} new articles based on your liked categories: ${data.basedOnCategories.join(', ')}`,\n        });\n        // Refresh the main recommendations to include new ones\n        refetch();\n      } else {\n        toast({\n          title: \"No New Recommendations\",\n          description: data.message || \"No new articles found matching your preferences\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get smart recommendations\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleInteraction = async (article: Article, type: 'click' | 'view' | 'share' | 'like') => {\n    if (!userId) return;\n\n    await recordInteraction.mutateAsync({\n      userId,\n      articleId: article.id,\n      interactionType: type,\n      category: article.category,\n      politicalBias: article.politicalBias,\n      sessionDuration: type === 'view' ? Math.floor(Math.random() * 300) + 30 : undefined\n    });\n  };\n\n  const getBiasColor = (bias: string) => {\n    switch (bias.toLowerCase()) {\n      case 'left': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'right': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'neutral': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  const getSentimentColor = (tone: string) => {\n    switch (tone.toLowerCase()) {\n      case 'positive': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'negative': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'neutral': return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n\n  if (isLoadingRecommendations) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Loading personalized recommendations...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Personalized News Recommendations</h1>\n        <p className=\"text-muted-foreground\">\n          AI-powered recommendations based on your reading preferences using content-based filtering\n        </p>\n        {recommendationData && (\n          <div className=\"mt-4 flex gap-4 text-sm text-muted-foreground\">\n            <span>Total interactions: {recommendationData.totalInteractions}</span>\n            <span>Recommendations: {recommendationData.recommendations.length}</span>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => refetch()}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={recordInteraction.isPending}\n              >\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Refresh All\n              </Button>\n              <Button\n                onClick={() => smartRefreshMutation.mutate()}\n                variant=\"default\"\n                size=\"sm\"\n                disabled={smartRefreshMutation.isPending}\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                {smartRefreshMutation.isPending ? 'Finding...' : 'Smart Refresh'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Main Recommendations */}\n        <div className=\"lg:col-span-2\">\n          <h2 className=\"text-xl font-semibold mb-4\">Recommended for You</h2>\n          \n          {recommendationData?.recommendations.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">No recommendations yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Start reading articles to get personalized recommendations\n                </p>\n                <Button onClick={() => window.location.href = '/'}>\n                  Browse Articles\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-6\">\n              {recommendationData?.recommendations.map((rec, index) => (\n                <Card key={rec.article.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Badge variant=\"outline\">{rec.article.source}</Badge>\n                        <span>•</span>\n                        <span>{rec.article.category}</span>\n                        <span>•</span>\n                        <span>Score: {(rec.score * 100).toFixed(0)}%</span>\n                      </div>\n                    </div>\n                    <CardTitle \n                      className=\"cursor-pointer hover:text-primary\"\n                      onClick={() => {\n                        setSelectedArticle(rec.article);\n                        handleInteraction(rec.article, 'click');\n                      }}\n                    >\n                      {rec.article.title}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground italic\">\n                      {rec.reason}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                      {rec.article.summary || rec.article.content.substring(0, 200) + '...'}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex gap-2\">\n                        <Badge className={getBiasColor(rec.article.politicalBias)}>\n                          {rec.article.politicalBias}\n                        </Badge>\n                        <Badge className={getSentimentColor(rec.article.emotionalTone)}>\n                          {rec.article.emotionalTone}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleInteraction(rec.article, 'view')}\n                          disabled={recordInteraction.isPending}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleInteraction(rec.article, 'like')}\n                          disabled={recordInteraction.isPending}\n                        >\n                          <Heart className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleInteraction(rec.article, 'share')}\n                          disabled={recordInteraction.isPending}\n                        >\n                          <Share2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Recent Interactions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {interactions?.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground\">No interactions yet</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {interactions?.slice(0, 5).map((interaction, index) => (\n                    <div key={index} className=\"flex items-center gap-3 text-sm\">\n                      <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        {interaction.interactionType === 'click' && <Eye className=\"h-4 w-4\" />}\n                        {interaction.interactionType === 'view' && <Eye className=\"h-4 w-4\" />}\n                        {interaction.interactionType === 'like' && <Heart className=\"h-4 w-4\" />}\n                        {interaction.interactionType === 'share' && <Share2 className=\"h-4 w-4\" />}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium capitalize\">{interaction.interactionType}</p>\n                        <p className=\"text-muted-foreground\">\n                          {interaction.category} • {interaction.politicalBias}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Algorithm Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">How It Works</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm text-muted-foreground space-y-2\">\n              <p>Our recommendation system uses:</p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>TF-IDF content analysis</li>\n                <li>Cosine similarity matching</li>\n                <li>Category preferences (20%)</li>\n                <li>Political bias patterns (10%)</li>\n                <li>Content similarity (70%)</li>\n              </ul>\n              <p className=\"mt-3 text-xs\">\n                Recommendations improve as you interact with more articles.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Article Detail Modal */}\n      {selectedArticle && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"mb-2\">{selectedArticle.title}</CardTitle>\n                  <div className=\"flex gap-2 text-sm text-muted-foreground\">\n                    <Badge variant=\"outline\">{selectedArticle.source}</Badge>\n                    <Badge className={getBiasColor(selectedArticle.politicalBias)}>\n                      {selectedArticle.politicalBias}\n                    </Badge>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedArticle(null)}\n                >\n                  ×\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                {selectedArticle.content}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15622},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { signupSchema, SignupData } from \"../../../shared/schema\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SignupPage() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      fullName: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupData) => {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Signup failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (userData) => {\n      login(userData);\n      toast({\n        title: \"Welcome to Varta.AI!\",\n        description: \"Your account has been created successfully. Let's set up your preferences!\",\n      });\n      // Redirect new users directly to preferences page\n      setLocation('/preferences');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupData) => {\n    signupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center px-4 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-20 left-20 w-32 h-32 bg-cyan-400/10 rounded-full blur-2xl animate-bounce\"></div>\n        <div className=\"absolute bottom-20 right-20 w-24 h-24 bg-pink-400/10 rounded-full blur-xl animate-bounce delay-500\"></div>\n      </div>\n\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-6 group\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-2xl transform group-hover:scale-110 transition-all duration-300\">\n              <span className=\"text-white font-bold text-xs\">V.AI</span>\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">Varta.AI</h1>\n          </div>\n          <h2 className=\"text-3xl font-bold text-white mb-2 animate-fade-in\">Join Varta.AI</h2>\n          <p className=\"text-gray-300 text-lg\">Start your journey today</p>\n        </div>\n\n        {/* Signup Form */}\n        <div className=\"bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 p-8 relative shadow-2xl hover:shadow-purple-500/20 transition-all duration-500\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-12\">\n            {/* Full Name Field */}\n            <FormField\n              control={form.control}\n              name=\"fullName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white/90 font-semibold text-sm uppercase tracking-wider\">Full Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"text\"\n                      className=\"h-14 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/20 text-white placeholder:text-white/50 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/30 focus:bg-white/10 transition-all duration-300 text-lg\"\n                      placeholder=\"Enter your full name\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-300\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Email Field */}\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white/90 font-semibold text-sm uppercase tracking-wider\">Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"email\"\n                      className=\"h-14 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/20 text-white placeholder:text-white/50 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/30 focus:bg-white/10 transition-all duration-300 text-lg\"\n                      placeholder=\"Enter your email address\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-300\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Password Field */}\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-white/90 font-semibold text-sm uppercase tracking-wider\">Create Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showPassword ? \"text\" : \"password\"}\n                        className=\"h-14 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/20 text-white placeholder:text-white/50 focus:border-purple-400 focus:ring-2 focus:ring-purple-400/30 focus:bg-white/10 transition-all duration-300 text-lg pr-12\"\n                        placeholder=\"Create a strong password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white/60 hover:text-white transition-colors duration-200\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-6 w-6\" />\n                        ) : (\n                          <Eye className=\"h-6 w-6\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-red-300\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Sign Up Button */}\n            <Button\n              type=\"submit\"\n              disabled={signupMutation.isPending}\n              className=\"w-full h-14 bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white font-bold rounded-2xl transition-all duration-300 shadow-2xl hover:shadow-purple-500/30 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none text-lg\"\n            >\n              {signupMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                  Creating your account...\n                </div>\n              ) : (\n                \"Create Account\"\n              )}\n            </Button>\n\n            {/* Login Link */}\n            <div className=\"text-center mt-6\">\n              <span className=\"text-white/70 text-sm\">Already have an account? </span>\n              <Link href=\"/login\">\n                <span className=\"text-purple-300 hover:text-purple-200 cursor-pointer font-semibold text-sm transition-all duration-300 hover:underline\">\n                  Sign in now\n                </span>\n              </Link>\n            </div>\n          </form>\n        </Form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8815},"client/src/pages/user-preferences.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/contexts/auth-context';\nimport { useLanguage } from '@/contexts/language-context';\nimport { apiRequest } from '@/lib/queryClient';\nimport { userOnboardingSchema, UserOnboardingData, UserPreferences } from '@shared/schema';\nimport type { SupportedLanguage } from '@/lib/i18n';\nimport { Sparkles, Settings, Globe, Heart, ChevronRight, SkipForward } from 'lucide-react';\n\n// Available categories that map to existing system categories\nconst NEWS_CATEGORIES = [\n  { id: 'technology', label: 'Technology', description: 'Latest tech news, gadgets, and innovations' },\n  { id: 'politics', label: 'Politics', description: 'Political news and government updates' },\n  { id: 'sports', label: 'Sports', description: 'Sports news, scores, and highlights' },\n  { id: 'entertainment', label: 'Entertainment', description: 'Movies, music, celebrities, and pop culture' },\n  { id: 'business', label: 'Business', description: 'Business news, markets, and finance' },\n  { id: 'health', label: 'Health', description: 'Health, medical news, and wellness' },\n  { id: 'science', label: 'Science', description: 'Scientific discoveries and research' },\n  { id: 'general', label: 'General', description: 'Breaking news and miscellaneous topics' },\n];\n\n// Available languages with native names\nconst LANGUAGES = [\n  { code: 'en', name: 'English', nativeName: 'English' },\n  { code: 'hi', name: 'Hindi', nativeName: 'हिन्दी' },\n  { code: 'mr', name: 'Marathi', nativeName: 'मराठी' },\n  { code: 'ta', name: 'Tamil', nativeName: 'தமிழ்' },\n  { code: 'te', name: 'Telugu', nativeName: 'తెలుగు' },\n  { code: 'gu', name: 'Gujarati', nativeName: 'ગુજરાતી' },\n  { code: 'bn', name: 'Bengali', nativeName: 'বাংলা' },\n  { code: 'kn', name: 'Kannada', nativeName: 'ಕನ್ನಡ' },\n  { code: 'ml', name: 'Malayalam', nativeName: 'മലയാളം' },\n  { code: 'pa', name: 'Punjabi', nativeName: 'ਪੰਜਾਬੀ' },\n];\n\n// Tone preferences with descriptions\nconst TONE_OPTIONS = [\n  {\n    value: 'neutral',\n    label: 'Factual & Professional',\n    description: 'Objective reporting with balanced perspectives',\n    icon: '📊'\n  },\n  {\n    value: 'opinionated',\n    label: 'Bold & Forward-Thinking',\n    description: 'Strong viewpoints and thought-provoking analysis',\n    icon: '🔥'\n  },\n  {\n    value: 'emotional',\n    label: 'Human-Centered & Relatable',\n    description: 'Stories that connect on an emotional level',\n    icon: '💝'\n  }\n];\n\nexport default function UserPreferencesPage() {\n  const { user } = useAuth();\n  const { setLanguage } = useLanguage();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [dislikedTopicsInput, setDislikedTopicsInput] = useState('');\n\n  // Form setup with validation\n  const form = useForm<UserOnboardingData>({\n    resolver: zodResolver(userOnboardingSchema),\n    defaultValues: {\n      preferredCategories: [],\n      preferredLanguages: ['en'], // Default to English\n      preferredTone: '',\n      dislikedTopics: [],\n    }\n  });\n\n  // Fetch existing user preferences\n  const { data: existingPreferences, isLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, 'preferences'],\n    enabled: !!user?.id,\n  });\n\n  // Auto-populate form if user has existing preferences\n  useEffect(() => {\n    if (existingPreferences && !form.formState.isDirty) {\n      const prefs = existingPreferences as UserPreferences;\n      form.reset({\n        preferredCategories: prefs.preferredCategories || [],\n        preferredLanguages: prefs.preferredLanguages || ['en'],\n        preferredTone: prefs.preferredTone || '',\n        dislikedTopics: prefs.dislikedTopics || [],\n      });\n      setDislikedTopicsInput((prefs.dislikedTopics || []).join(', '));\n    }\n  }, [existingPreferences, form]);\n\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: async (data: UserOnboardingData) => {\n      const dislikedTopicsArray = dislikedTopicsInput\n        .split(',')\n        .map(topic => topic.trim())\n        .filter(topic => topic.length > 0);\n\n      const preferencesData = {\n        userId: user!.id,\n        preferredCategories: data.preferredCategories,\n        preferredLanguages: data.preferredLanguages,\n        preferredTone: data.preferredTone,\n        dislikedTopics: dislikedTopicsArray,\n        hasCompletedOnboarding: true,\n      };\n\n      const response = await apiRequest('POST', `/api/users/${user!.id}/preferences`, preferencesData);\n      return response.json();\n    },\n    onSuccess: (savedPreferences) => {\n      // Apply language preference immediately if selected\n      const form_data = form.getValues();\n      if (form_data.preferredLanguages && form_data.preferredLanguages.length > 0) {\n        const selectedLang = form_data.preferredLanguages[0];\n        setLanguage(selectedLang as SupportedLanguage);\n      }\n      \n      toast({\n        title: \"Preferences Saved!\",\n        description: \"Your news preferences have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', user?.id, 'preferences'] });\n      // Clear the redirect flags when preferences are saved\n      sessionStorage.removeItem('vartaAI_preferences_redirect');\n      sessionStorage.removeItem(`vartaAI_redirected_${user?.id}`);\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save preferences. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Skip onboarding and go to homepage\n  const handleSkip = () => {\n    setLocation('/');\n  };\n\n  const onSubmit = (data: UserOnboardingData) => {\n    savePreferencesMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Loading your preferences...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Sparkles className=\"h-8 w-8 text-blue-600 mr-3\" />\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n              Welcome to Varta.ai\n            </h1>\n          </div>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-2\">\n            Where trusted news meets your preferences\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n            Let's personalize your news experience to match your interests\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            {/* News Categories */}\n            <Card className=\"border-2 border-blue-100 dark:border-blue-900 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-xl\">\n                  <Settings className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  News Categories\n                </CardTitle>\n                <CardDescription>\n                  Choose the topics you're most interested in. We'll prioritize these in your feed.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"preferredCategories\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {NEWS_CATEGORIES.map((category) => (\n                          <FormField\n                            key={category.id}\n                            control={form.control}\n                            name=\"preferredCategories\"\n                            render={({ field }) => (\n                              <FormItem key={category.id}>\n                                <FormControl>\n                                  <div className=\"flex items-start space-x-3 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                                    <Checkbox\n                                      checked={field.value?.includes(category.id)}\n                                      onCheckedChange={(checked) => {\n                                        const currentValue = field.value || [];\n                                        if (checked) {\n                                          field.onChange([...currentValue, category.id]);\n                                        } else {\n                                          field.onChange(currentValue.filter((value) => value !== category.id));\n                                        }\n                                      }}\n                                    />\n                                    <div className=\"flex-1\">\n                                      <FormLabel className=\"text-base font-medium cursor-pointer\">\n                                        {category.label}\n                                      </FormLabel>\n                                      <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                                        {category.description}\n                                      </p>\n                                    </div>\n                                  </div>\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Language Preferences */}\n            <Card className=\"border-2 border-green-100 dark:border-green-900 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-xl\">\n                  <Globe className=\"h-5 w-5 mr-2 text-green-600\" />\n                  Language Preferences\n                </CardTitle>\n                <CardDescription>\n                  Select the languages you'd like to read news in. Articles can be translated automatically.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"preferredLanguages\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n                        {LANGUAGES.map((language) => (\n                          <FormField\n                            key={language.code}\n                            control={form.control}\n                            name=\"preferredLanguages\"\n                            render={({ field }) => (\n                              <FormItem key={language.code}>\n                                <FormControl>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Checkbox\n                                      checked={field.value?.includes(language.code)}\n                                      onCheckedChange={(checked) => {\n                                        const currentValue = field.value || [];\n                                        if (checked) {\n                                          field.onChange([...currentValue, language.code]);\n                                        } else {\n                                          // Ensure at least one language is selected\n                                          const newValue = currentValue.filter((value) => value !== language.code);\n                                          if (newValue.length > 0) {\n                                            field.onChange(newValue);\n                                          }\n                                        }\n                                      }}\n                                    />\n                                    <FormLabel className=\"text-sm cursor-pointer\">\n                                      <div>\n                                        <div className=\"font-medium\">{language.name}</div>\n                                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">{language.nativeName}</div>\n                                      </div>\n                                    </FormLabel>\n                                  </div>\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Tone Preferences */}\n            <Card className=\"border-2 border-purple-100 dark:border-purple-900 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-xl\">\n                  <Heart className=\"h-5 w-5 mr-2 text-purple-600\" />\n                  Preferred Tone\n                </CardTitle>\n                <CardDescription>\n                  Choose the style of news reporting that resonates with you most.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <FormField\n                  control={form.control}\n                  name=\"preferredTone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          className=\"space-y-4\"\n                        >\n                          {TONE_OPTIONS.map((option) => (\n                            <div key={option.value} className=\"flex items-start space-x-3 p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                              <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n                              <FormLabel htmlFor={option.value} className=\"flex-1 cursor-pointer\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <span className=\"text-lg\">{option.icon}</span>\n                                  <span className=\"font-medium text-base\">{option.label}</span>\n                                </div>\n                                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                                  {option.description}\n                                </p>\n                              </FormLabel>\n                            </div>\n                          ))}\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Topics to Avoid */}\n            <Card className=\"border-2 border-orange-100 dark:border-orange-900 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Topics to Avoid</CardTitle>\n                <CardDescription>\n                  List any specific topics or keywords you'd prefer not to see in your news feed. Separate multiple topics with commas.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"e.g., celebrity gossip, sports injuries, natural disasters\"\n                  value={dislikedTopicsInput}\n                  onChange={(e) => setDislikedTopicsInput(e.target.value)}\n                  className=\"min-h-[100px] resize-none\"\n                />\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                  This is optional and helps us filter out content you're not interested in.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 justify-center pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleSkip}\n                className=\"px-6 py-3\"\n              >\n                <SkipForward className=\"h-4 w-4 mr-2\" />\n                Skip for Now\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={savePreferencesMutation.isPending}\n                className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n              >\n                {savePreferencesMutation.isPending ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    Saving...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    Save Preferences\n                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                  </div>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n\n        {/* Display selected preferences summary */}\n        {form.watch('preferredCategories').length > 0 && (\n          <Card className=\"mt-8 bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Your Preferences Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Selected Categories:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {form.watch('preferredCategories').map((categoryId) => {\n                      const category = NEWS_CATEGORIES.find(c => c.id === categoryId);\n                      return category ? (\n                        <Badge key={categoryId} variant=\"secondary\">\n                          {category.label}\n                        </Badge>\n                      ) : null;\n                    })}\n                  </div>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Selected Languages:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {form.watch('preferredLanguages').map((langCode) => {\n                      const language = LANGUAGES.find(l => l.code === langCode);\n                      return language ? (\n                        <Badge key={langCode} variant=\"outline\">\n                          {language.name}\n                        </Badge>\n                      ) : null;\n                    })}\n                  </div>\n                </div>\n\n                {form.watch('preferredTone') && (\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">Preferred Tone:</p>\n                    <Badge variant=\"default\">\n                      {TONE_OPTIONS.find(t => t.value === form.watch('preferredTone'))?.label}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21043},"client/src/services/blockchainService.ts":{"content":"import { ethers } from 'ethers';\nimport Web3 from 'web3';\n\n// Contract ABI for VerifiedSources\nconst CONTRACT_ABI = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"previousOwner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"OwnershipTransferred\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"bytes32\",\n        \"name\": \"domainHash\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"domain\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"SourceRemoved\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"bytes32\",\n        \"name\": \"domainHash\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"domain\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"newTrustScore\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"SourceUpdated\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"bytes32\",\n        \"name\": \"domainHash\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"domain\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"trustScore\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"category\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"SourceVerified\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_domain\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_trustScore\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_category\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"addVerifiedSource\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"getAllVerifiedSources\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string[]\",\n        \"name\": \"domains\",\n        \"type\": \"string[]\"\n      },\n      {\n        \"internalType\": \"string[]\",\n        \"name\": \"names\",\n        \"type\": \"string[]\"\n      },\n      {\n        \"internalType\": \"uint256[]\",\n        \"name\": \"trustScores\",\n        \"type\": \"uint256[]\"\n      },\n      {\n        \"internalType\": \"string[]\",\n        \"name\": \"categories\",\n        \"type\": \"string[]\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"getContractInfo\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"contractOwner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalSources\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"deployedAt\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_domain\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"isSourceVerified\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"verified\",\n        \"type\": \"bool\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"trustScore\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"category\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_domain\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeVerifiedSource\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalVerifiedSources\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_domain\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_newTrustScore\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"updateTrustScore\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"verifiedDomains\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"name\": \"verifiedSources\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"domain\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"verifiedAt\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"isActive\",\n        \"type\": \"bool\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"trustScore\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"category\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\n// Polygon Mumbai Testnet configuration\nconst POLYGON_MUMBAI_CONFIG = {\n  chainId: '0x13881', // 80001 in hex\n  chainName: 'Polygon Mumbai Testnet',\n  rpcUrls: ['https://rpc-mumbai.maticvigil.com/', 'https://polygon-mumbai.g.alchemy.com/v2/demo'],\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  blockExplorerUrls: ['https://mumbai.polygonscan.com/'],\n};\n\n// Contract address (will be updated after deployment)\nconst CONTRACT_ADDRESS = import.meta.env.VITE_VERIFIED_SOURCES_CONTRACT_ADDRESS || '';\n\nexport interface VerifiedSourceInfo {\n  verified: boolean;\n  trustScore: number;\n  name: string;\n  category: string;\n}\n\nexport interface SourceData {\n  domain: string;\n  name: string;\n  trustScore: number;\n  category: string;\n}\n\nclass BlockchainService {\n  private web3: Web3 | null = null;\n  private ethersProvider: ethers.BrowserProvider | null = null;\n  private contract: any = null;\n  private isInitialized = false;\n\n  constructor() {\n    this.initializeConnection();\n  }\n\n  /**\n   * Initialize blockchain connection\n   */\n  private async initializeConnection() {\n    try {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        // Initialize with ethers for better TypeScript support\n        this.ethersProvider = new ethers.BrowserProvider(window.ethereum);\n        \n        // Also initialize Web3 as fallback\n        this.web3 = new Web3(window.ethereum);\n        \n        // Switch to Polygon Mumbai if not already connected\n        await this.switchToPolygonMumbai();\n        \n        // Initialize contract\n        if (CONTRACT_ADDRESS) {\n          this.contract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            CONTRACT_ABI,\n            this.ethersProvider\n          );\n        }\n        \n        this.isInitialized = true;\n      } else {\n        console.warn('MetaMask not detected. Please install MetaMask to use blockchain verification features.');\n      }\n    } catch (error) {\n      console.error('Error initializing blockchain connection:', error);\n    }\n  }\n\n  /**\n   * Switch to Polygon Mumbai Testnet\n   */\n  private async switchToPolygonMumbai() {\n    if (!window.ethereum) return;\n\n    try {\n      // Try to switch to Polygon Mumbai\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: POLYGON_MUMBAI_CONFIG.chainId }],\n      });\n    } catch (switchError: any) {\n      // If the chain is not added, add it\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [POLYGON_MUMBAI_CONFIG],\n          });\n        } catch (addError) {\n          console.error('Failed to add Polygon Mumbai network:', addError);\n          throw addError;\n        }\n      } else {\n        console.error('Failed to switch to Polygon Mumbai network:', switchError);\n        throw switchError;\n      }\n    }\n  }\n\n  /**\n   * Connect wallet\n   */\n  async connectWallet(): Promise<string[]> {\n    if (!window.ethereum) {\n      throw new Error('MetaMask not installed. Please install MetaMask to continue.');\n    }\n\n    try {\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      // Switch to Polygon Mumbai\n      await this.switchToPolygonMumbai();\n\n      // Re-initialize connection after wallet connection\n      await this.initializeConnection();\n\n      return accounts;\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a news source domain is verified on the blockchain\n   */\n  async isSourceVerified(sourceUrl: string): Promise<VerifiedSourceInfo> {\n    if (!this.isInitialized || !this.contract) {\n      // Return default values if blockchain is not initialized\n      return {\n        verified: false,\n        trustScore: 0,\n        name: '',\n        category: ''\n      };\n    }\n\n    try {\n      // Extract domain from URL\n      const domain = this.extractDomain(sourceUrl);\n      \n      // Call smart contract\n      const result = await this.contract.isSourceVerified(domain);\n      \n      return {\n        verified: result[0],\n        trustScore: Number(result[1]),\n        name: result[2],\n        category: result[3]\n      };\n    } catch (error) {\n      console.error('Error checking source verification:', error);\n      return {\n        verified: false,\n        trustScore: 0,\n        name: '',\n        category: ''\n      };\n    }\n  }\n\n  /**\n   * Get all verified sources from blockchain\n   */\n  async getAllVerifiedSources(): Promise<SourceData[]> {\n    if (!this.isInitialized || !this.contract) {\n      return [];\n    }\n\n    try {\n      const result = await this.contract.getAllVerifiedSources();\n      const [domains, names, trustScores, categories] = result;\n\n      return domains.map((domain: string, index: number) => ({\n        domain,\n        name: names[index],\n        trustScore: Number(trustScores[index]),\n        category: categories[index]\n      }));\n    } catch (error) {\n      console.error('Error fetching verified sources:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get contract information\n   */\n  async getContractInfo(): Promise<{\n    owner: string;\n    totalSources: number;\n    deployedAt: number;\n  } | null> {\n    if (!this.isInitialized || !this.contract) {\n      return null;\n    }\n\n    try {\n      const result = await this.contract.getContractInfo();\n      \n      return {\n        owner: result[0],\n        totalSources: Number(result[1]),\n        deployedAt: Number(result[2])\n      };\n    } catch (error) {\n      console.error('Error fetching contract info:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Add a new verified source (owner only)\n   */\n  async addVerifiedSource(\n    domain: string,\n    name: string,\n    trustScore: number,\n    category: string\n  ): Promise<boolean> {\n    if (!this.isInitialized || !this.ethersProvider || !this.contract) {\n      throw new Error('Blockchain not initialized');\n    }\n\n    try {\n      const signer = await this.ethersProvider.getSigner();\n      const contractWithSigner = this.contract.connect(signer);\n      \n      const tx = await contractWithSigner.addVerifiedSource(\n        domain,\n        name,\n        trustScore,\n        category\n      );\n      \n      await tx.wait();\n      return true;\n    } catch (error) {\n      console.error('Error adding verified source:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove a verified source (owner only)\n   */\n  async removeVerifiedSource(domain: string): Promise<boolean> {\n    if (!this.isInitialized || !this.ethersProvider || !this.contract) {\n      throw new Error('Blockchain not initialized');\n    }\n\n    try {\n      const signer = await this.ethersProvider.getSigner();\n      const contractWithSigner = this.contract.connect(signer);\n      \n      const tx = await contractWithSigner.removeVerifiedSource(domain);\n      await tx.wait();\n      return true;\n    } catch (error) {\n      console.error('Error removing verified source:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update trust score of a verified source (owner only)\n   */\n  async updateTrustScore(domain: string, newTrustScore: number): Promise<boolean> {\n    if (!this.isInitialized || !this.ethersProvider || !this.contract) {\n      throw new Error('Blockchain not initialized');\n    }\n\n    try {\n      const signer = await this.ethersProvider.getSigner();\n      const contractWithSigner = this.contract.connect(signer);\n      \n      const tx = await contractWithSigner.updateTrustScore(domain, newTrustScore);\n      await tx.wait();\n      return true;\n    } catch (error) {\n      console.error('Error updating trust score:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Extract domain from URL\n   */\n  private extractDomain(url: string): string {\n    try {\n      // Handle URLs without protocol\n      if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        url = 'https://' + url;\n      }\n      \n      const domain = new URL(url).hostname;\n      \n      // Remove 'www.' prefix if present\n      return domain.startsWith('www.') ? domain.substring(4) : domain;\n    } catch (error) {\n      // If URL parsing fails, return the input string (might be a domain already)\n      return url.replace(/^www\\./, '');\n    }\n  }\n\n  /**\n   * Check if wallet is connected\n   */\n  async isWalletConnected(): Promise<boolean> {\n    if (!window.ethereum) return false;\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts',\n      });\n      return accounts.length > 0;\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current account\n   */\n  async getCurrentAccount(): Promise<string | null> {\n    if (!window.ethereum) return null;\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts',\n      });\n      return accounts.length > 0 ? accounts[0] : null;\n    } catch (error) {\n      console.error('Error getting current account:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get network info\n   */\n  async getNetworkInfo(): Promise<{\n    chainId: string;\n    networkName: string;\n  } | null> {\n    if (!window.ethereum) return null;\n\n    try {\n      const chainId = await window.ethereum.request({\n        method: 'eth_chainId',\n      });\n\n      let networkName = 'Unknown Network';\n      if (chainId === POLYGON_MUMBAI_CONFIG.chainId) {\n        networkName = 'Polygon Mumbai Testnet';\n      }\n\n      return { chainId, networkName };\n    } catch (error) {\n      console.error('Error getting network info:', error);\n      return null;\n    }\n  }\n}\n\n// Global instance\nexport const blockchainService = new BlockchainService();\n\n// Type declaration for window.ethereum\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}","size_bytes":16907},"client/src/services/openrouterService.ts":{"content":"interface OpenRouterMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface OpenRouterResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nclass OpenRouterService {\n  private readonly API_KEY: string;\n  private readonly API_URL = \"https://openrouter.ai/api/v1/chat/completions\";\n  private readonly MODEL = \"openai/gpt-3.5-turbo\";\n\n  constructor() {\n    this.API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY || '';\n    if (!this.API_KEY) {\n      console.warn('OpenRouter API key not found in environment variables');\n    }\n  }\n\n  async sendMessage(userPrompt: string, articleText?: string): Promise<string> {\n    try {\n      const messages: OpenRouterMessage[] = [\n        {\n          role: \"system\",\n          content: \"You are a news analysis assistant that helps users understand media content. Provide objective analysis of articles including bias detection, content summarization, and political perspectives. Focus on factual observations and cite specific examples from the text.\"\n        }\n      ];\n\n      // If there's an article, include it in the context\n      if (articleText && articleText.trim()) {\n        messages.push({\n          role: \"user\",\n          content: `Please analyze this news article:\\n\\n${articleText}\\n\\n---\\n\\nUser question: ${userPrompt}`\n        });\n      } else {\n        messages.push({\n          role: \"user\",\n          content: userPrompt\n        });\n      }\n\n      const requestData = {\n        model: this.MODEL,\n        messages: messages,\n        temperature: 0.7,\n        max_tokens: 1000\n      };\n\n      const response = await fetch(this.API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${this.API_KEY}`,\n          \"HTTP-Referer\": window.location.origin,\n          \"X-Title\": \"Varta.AI Chat\"\n        },\n        body: JSON.stringify(requestData)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`OpenRouter API Error ${response.status}: ${response.statusText}\\n${errorText}`);\n      }\n\n      const data: OpenRouterResponse = await response.json();\n      return data.choices?.[0]?.message?.content || \"Unable to generate response. Please try again.\";\n\n    } catch (error) {\n      console.error('OpenRouter API Error:', error);\n      \n      // Provide a fallback response that's still helpful\n      if (articleText && articleText.trim()) {\n        return this.getFallbackResponse(userPrompt, articleText);\n      }\n      \n      throw new Error(`Failed to get AI response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private getFallbackResponse(userPrompt: string, articleText: string): string {\n    const prompt = userPrompt.toLowerCase();\n    \n    if (prompt.includes('bias') || prompt.includes('biased')) {\n      return `Based on initial analysis, the article shows certain patterns worth examining:\n\n**Language Analysis:**\n- Word choices and tone throughout the piece\n- Balance of factual reporting vs. opinion\n- Attribution and source diversity\n\n**Perspective Review:**\n- How issues are framed and presented\n- Which viewpoints are included or omitted\n- Context provided for complex topics\n\nFor detailed analysis, please check your connection and try again.`;\n    }\n    \n    if (prompt.includes('summarize') || prompt.includes('summary')) {\n      return `**Key Points:**\n\nThe article covers several important aspects:\n- Main developments and facts presented\n- Key people and organizations involved\n- Potential impact and implications\n\n**Context:** Current events with multiple perspectives requiring careful analysis.\n\nPlease retry for a complete summary.`;\n    }\n    \n    if (prompt.includes('political') || prompt.includes('support')) {\n      return `**Political Context:**\n\nThe article demonstrates:\n- Overall perspective and tone\n- Language that may suggest certain viewpoints\n- Coverage balance and representation\n\n**Initial Assessment:** The content reflects a particular approach to the topics covered.\n\nPlease try again for detailed political analysis.`;\n    }\n    \n    if (prompt.includes('emotional') || prompt.includes('language')) {\n      return `**Emotional Language Analysis:**\n\nI've examined the text for emotional content:\n- Specific word choices that carry emotional weight\n- Tone and sentiment throughout the article\n- Use of charged or neutral language\n\n**Findings:** The article contains varying levels of emotional language that require detailed analysis.\n\nFor precise identification of emotional language patterns, please retry your request.`;\n    }\n    \n    if (prompt.includes('percentage') || prompt.includes('analyze bias percentage')) {\n      return `**Detailed Bias Analysis:**\n\n**Left Bias:** ~% - [Analysis would include specific examples]\n**Right Bias:** ~% - [Analysis would include specific examples]\n**Neutrality:** ~% - [Analysis would include specific examples]\n**Factual Content:** ~% - [Analysis would include specific examples]\n**Emotional Language:** ~% - [Analysis would include specific examples]\n\nFor accurate percentage calculations and detailed reasoning, please try your analysis request again.`;\n    }\n    \n    return \"Article received for analysis. Please check your connection and try again for detailed insights.\";\n  }\n}\n\nexport const openRouterService = new OpenRouterService();","size_bytes":5409},"client/src/components/chat/chat-header.tsx":{"content":"import { Moon, Sun, Trash2, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/contexts/theme-context\";\n\ninterface ChatHeaderProps {\n  onClearChat: () => void;\n  messageCount: number;\n  isTyping: boolean;\n}\n\nexport function ChatHeader({ onClearChat, messageCount, isTyping }: ChatHeaderProps) {\n  const { theme, setTheme } = useTheme();\n  \n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <header className=\"bg-gradient-to-r from-blue-600 to-cyan-600 dark:from-blue-700 dark:to-cyan-700 p-4 shadow-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n            <Eye className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-white font-bold text-xl\">Varta.AI</h1>\n            <p className=\"text-blue-100 text-sm\">\n              {isTyping ? \"Analyzing...\" : \"Analyze. Summarize. Detect Bias.\"}\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-blue-100 text-sm hidden md:block\">\n            {messageCount} messages\n          </span>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"p-2 rounded-lg bg-white/20 hover:bg-white/30 transition-colors duration-200 text-white h-auto\"\n          >\n            {theme === \"dark\" ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClearChat}\n            className=\"p-2 rounded-lg bg-white/20 hover:bg-white/30 transition-colors duration-200 text-white h-auto\"\n            title=\"Clear conversation\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2083},"client/src/components/chat/chat-input.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send, Smile } from \"lucide-react\";\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  disabled: boolean;\n}\n\nexport function ChatInput({ onSendMessage, disabled }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const maxLength = 2000;\n  const isNearLimit = message.length > 1800;\n\n  const handleSubmit = () => {\n    const trimmedMessage = message.trim();\n    if (!trimmedMessage || disabled) return;\n    \n    onSendMessage(trimmedMessage);\n    setMessage(\"\");\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  const adjustTextareaHeight = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 120; // ~5 lines\n      textarea.style.height = Math.min(scrollHeight, maxHeight) + 'px';\n    }\n  };\n\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [message]);\n\n  return (\n    <div className=\"p-4 bg-white dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700\">\n      <div className=\"flex items-end space-x-3\">\n        <div className=\"flex-1 relative\">\n          <Textarea\n            ref={textareaRef}\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message here...\"\n            className=\"w-full px-4 py-3 pr-12 border border-slate-300 dark:border-slate-600 rounded-2xl bg-slate-50 dark:bg-slate-700 text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none transition-all duration-200 min-h-[52px]\"\n            maxLength={maxLength}\n            disabled={disabled}\n            rows={1}\n          />\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-3 bottom-3 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 h-auto p-1\"\n          >\n            <Smile className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <Button\n          onClick={handleSubmit}\n          disabled={!message.trim() || disabled}\n          className=\"bg-gradient-to-r from-indigo-600 to-violet-600 hover:from-indigo-700 hover:to-violet-700 text-white p-3 rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none h-auto\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      \n      <div className=\"flex justify-between items-center mt-2 text-xs text-slate-500 dark:text-slate-400\">\n        <span>Press Enter to send • Shift+Enter for new line</span>\n        <span className={isNearLimit ? 'text-red-500' : ''}>\n          {message.length}/{maxLength}\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3234},"client/src/components/chat/chat-messages.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { MessageBubble } from \"./message-bubble\";\nimport { TypingIndicator } from \"./typing-indicator\";\nimport { Eye } from \"lucide-react\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatMessagesProps {\n  messages: Message[];\n  isTyping: boolean;\n}\n\nexport function ChatMessages({ messages, isTyping }: ChatMessagesProps) {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping]);\n\n  return (\n    <div className=\"flex-1 p-4 overflow-y-auto bg-slate-50 dark:bg-slate-900 space-y-4\" style={{ maxHeight: 'calc(100vh - 180px)' }}>\n      {/* Welcome message */}\n      {messages.length === 0 && (\n        <div className=\"animate-in slide-in-from-bottom-2 duration-500\">\n          <div className=\"flex items-start space-x-3 max-w-3xl\">\n            <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center\">\n              <Eye className=\"text-white text-sm\" />\n            </div>\n            <div className=\"bg-white dark:bg-slate-700 rounded-2xl rounded-tl-md p-4 shadow-sm border border-slate-200 dark:border-slate-600 max-w-md\">\n              <p className=\"text-slate-700 dark:text-slate-200 leading-relaxed\">\n                Welcome to <strong>Varta.AI</strong>! I'm here to help you analyze news articles with precision and clarity.\n              </p>\n              <p className=\"text-slate-700 dark:text-slate-200 leading-relaxed mt-2\">\n                <strong>Analyze. Summarize. Detect Bias.</strong>\n              </p>\n              <p className=\"text-slate-600 dark:text-slate-300 text-sm mt-3\">\n                Paste a news article in the text area and use the suggestion cards to get started, or ask me any questions about bias detection, political analysis, or content summarization.\n              </p>\n              <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-3 flex items-center space-x-1\">\n                <Eye className=\"w-3 h-3\" />\n                <span>Varta.AI</span>\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Messages */}\n      {messages.map((message) => (\n        <MessageBubble key={message.id} message={message} />\n      ))}\n\n      {/* Typing indicator */}\n      {isTyping && <TypingIndicator />}\n\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n","size_bytes":2536},"client/src/components/chat/chat-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Plus, MessageSquare, Trash2, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ChatSession } from \"@shared/schema\";\n\ninterface ChatSidebarProps {\n  currentSessionId: string;\n  onSessionSelect: (sessionId: string) => void;\n  onNewSession: () => void;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ChatSidebar({ \n  currentSessionId, \n  onSessionSelect, \n  onNewSession, \n  isOpen, \n  onClose \n}: ChatSidebarProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch chat sessions\n  const { data: sessions = [], isLoading } = useQuery<ChatSession[]>({\n    queryKey: ['/api/sessions'],\n    refetchInterval: false,\n  });\n\n  // Delete session mutation\n  const deleteSessionMutation = useMutation({\n    mutationFn: async (sessionId: string) => {\n      const response = await apiRequest('DELETE', `/api/sessions/${sessionId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions'] });\n      toast({\n        title: \"Session deleted\",\n        description: \"Chat session has been deleted.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting session\",\n        description: error instanceof Error ? error.message : \"Failed to delete session.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteSession = (sessionId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (confirm('Are you sure you want to delete this chat session?')) {\n      deleteSessionMutation.mutate(sessionId);\n      if (sessionId === currentSessionId) {\n        onNewSession();\n      }\n    }\n  };\n\n  const sidebarClasses = `\n    fixed top-0 left-0 h-full w-80 bg-white dark:bg-slate-800 shadow-xl z-50 transform transition-transform duration-300 ease-in-out\n    md:relative md:transform-none md:shadow-none md:z-auto\n    ${isOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}\n  `;\n\n  return (\n    <>\n      {/* Mobile backdrop */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\" \n          onClick={onClose}\n        />\n      )}\n      \n      <div className={sidebarClasses}>\n        <div className=\"flex flex-col h-full border-r border-slate-200 dark:border-slate-700\">\n          {/* Header */}\n          <div className=\"p-4 border-b border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"font-semibold text-slate-700 dark:text-slate-300\">Chat History</h2>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onNewSession}\n                  className=\"h-auto p-2\"\n                  title=\"New Chat\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onClose}\n                  className=\"h-auto p-2 md:hidden\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Sessions list */}\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-3 space-y-2\">\n              {isLoading ? (\n                <div className=\"text-center text-slate-500 dark:text-slate-400 py-8\">\n                  Loading sessions...\n                </div>\n              ) : sessions.length === 0 ? (\n                <div className=\"text-center text-slate-500 dark:text-slate-400 py-8\">\n                  <MessageSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">No chat sessions yet</p>\n                  <p className=\"text-xs mt-1\">Start a new conversation!</p>\n                </div>\n              ) : (\n                sessions.map((session) => (\n                  <Card \n                    key={session.id}\n                    className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                      session.id === currentSessionId \n                        ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                        : 'hover:bg-slate-50 dark:hover:bg-slate-700'\n                    }`}\n                    onClick={() => {\n                      onSessionSelect(session.id);\n                      onClose();\n                    }}\n                  >\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-medium text-sm text-slate-700 dark:text-slate-300 truncate\">\n                            {session.title || 'Untitled Chat'}\n                          </h3>\n                          <p className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                            {format(new Date(session.timestamp), 'MMM d, h:mm a')}\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => handleDeleteSession(session.id, e)}\n                          className=\"h-auto p-1 text-slate-400 hover:text-red-500 ml-2 flex-shrink-0\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6159},"client/src/components/chat/message-bubble.tsx":{"content":"import { Clock, Copy, Bot, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Message } from \"@shared/schema\";\n\ninterface MessageBubbleProps {\n  message: Message;\n}\n\nexport function MessageBubble({ message }: MessageBubbleProps) {\n  const { toast } = useToast();\n  const isUser = message.sender === 'user';\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(message.text);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Message has been copied to your clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Unable to copy message to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatTime = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className={`flex items-start space-x-3 max-w-3xl animate-in slide-in-from-bottom-2 duration-300 ${isUser ? 'ml-auto flex-row-reverse space-x-reverse' : ''}`}>\n      <div className={`flex-shrink-0 w-8 h-8 bg-gradient-to-br ${isUser ? 'from-emerald-500 to-teal-500' : 'from-indigo-500 to-violet-500'} rounded-full flex items-center justify-center`}>\n        {isUser ? <User className=\"text-white text-sm\" /> : <Bot className=\"text-white text-sm\" />}\n      </div>\n      \n      <div className={`message-bubble group relative max-w-md rounded-2xl p-4 shadow-sm ${\n        isUser \n          ? 'bg-gradient-to-br from-indigo-600 to-violet-600 text-white rounded-tr-md' \n          : 'bg-white dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-tl-md'\n      }`}>\n        <p className={`leading-relaxed whitespace-pre-wrap ${\n          isUser ? 'text-white' : 'text-slate-700 dark:text-slate-200'\n        }`}>\n          {message.text}\n        </p>\n        \n        <div className=\"flex items-center justify-between mt-2\">\n          <p className={`text-xs flex items-center space-x-1 ${\n            isUser ? 'text-indigo-100' : 'text-slate-500 dark:text-slate-400'\n          }`}>\n            <Clock className=\"w-3 h-3\" />\n            <span>{formatTime(message.timestamp)}</span>\n          </p>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleCopy}\n            className={`opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-auto p-1 ${\n              isUser \n                ? 'text-indigo-100 hover:text-white hover:bg-white/10' \n                : 'text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-600'\n            }`}\n          >\n            <Copy className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2878},"client/src/components/chat/news-article-input.tsx":{"content":"import { useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { FileText, Trash2 } from \"lucide-react\";\n\ninterface NewsArticleInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onClear: () => void;\n}\n\nexport function NewsArticleInput({ value, onChange, onClear }: NewsArticleInputProps) {\n  const maxLength = 5000;\n  const isNearLimit = value.length > 4500;\n\n  return (\n    <Card className=\"border border-slate-200 dark:border-slate-700\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <FileText className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n            <h3 className=\"font-medium text-slate-700 dark:text-slate-300\">News Article</h3>\n          </div>\n          {value && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClear}\n              className=\"text-slate-500 hover:text-red-500 h-auto p-1\"\n            >\n              <Trash2 className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n        \n        <Textarea\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder=\"Paste News Article Here...\"\n          className=\"min-h-[120px] max-h-[300px] resize-none border-slate-300 dark:border-slate-600 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          maxLength={maxLength}\n        />\n        \n        <div className=\"flex justify-between items-center mt-2 text-xs text-slate-500 dark:text-slate-400\">\n          <span>Paste your news article to analyze</span>\n          <span className={isNearLimit ? 'text-red-500' : ''}>\n            {value.length}/{maxLength}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1955},"client/src/components/chat/suggestion-cards.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Scale, FileText, Users, Heart, BarChart3 } from \"lucide-react\";\n\ninterface SuggestionCardsProps {\n  onSuggestionClick: (suggestion: string) => void;\n  hasArticleText: boolean;\n}\n\nexport function SuggestionCards({ onSuggestionClick, hasArticleText }: SuggestionCardsProps) {\n  const suggestions = [\n    {\n      icon: Scale,\n      text: \"Is this article biased?\",\n      prompt: hasArticleText ? \"Is this article biased? Please analyze the content for any political, ideological, or emotional bias.\" : \"Is this article biased?\",\n      color: \"from-red-500 to-orange-500\"\n    },\n    {\n      icon: FileText,\n      text: \"Summarize this news\",\n      prompt: hasArticleText ? \"Please provide a comprehensive summary of this news article, highlighting the main points and key information.\" : \"Summarize this news\",\n      color: \"from-blue-500 to-cyan-500\"\n    },\n    {\n      icon: Users,\n      text: \"Which political side does this support?\",\n      prompt: hasArticleText ? \"Which political side does this article support? Analyze the political leanings and perspectives presented.\" : \"Which political side does this support?\",\n      color: \"from-purple-500 to-pink-500\"\n    },\n    {\n      icon: Heart,\n      text: \"Any emotional language in this?\",\n      prompt: hasArticleText ? \"Identify any emotional language in this article. Point out specific words, phrases, or techniques used to evoke emotional responses.\" : \"Any emotional language in this?\",\n      color: \"from-green-500 to-emerald-500\"\n    },\n    {\n      icon: BarChart3,\n      text: \"Analyze bias percentage\",\n      prompt: hasArticleText ? \"Give a detailed bias analysis of this news article in terms of Left Bias %, Right Bias %, Neutrality %, Factual Content %, and Emotional Language %. Provide specific percentages and explain your reasoning.\" : \"Analyze bias percentage (Left, Right, Neutral, Factual, Emotional)\",\n      color: \"from-amber-500 to-yellow-500\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-3\">\n      <h3 className=\"text-sm font-medium text-slate-600 dark:text-slate-400 mb-3\">\n        Quick Analysis Options\n      </h3>\n      <div className=\"grid grid-cols-1 gap-2\">\n        {suggestions.map((suggestion, index) => {\n          const IconComponent = suggestion.icon;\n          return (\n            <Card \n              key={index} \n              className=\"border border-slate-200 dark:border-slate-700 hover:shadow-md transition-all duration-200 cursor-pointer group\"\n              onClick={() => onSuggestionClick(suggestion.prompt)}\n            >\n              <CardContent className=\"p-3\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start h-auto p-0 text-left group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 rounded-lg bg-gradient-to-r ${suggestion.color} flex items-center justify-center flex-shrink-0`}>\n                      <IconComponent className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <span className=\"text-sm font-medium\">{suggestion.text}</span>\n                  </div>\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":3456},"client/src/components/chat/typing-indicator.tsx":{"content":"import { Bot } from \"lucide-react\";\n\nexport function TypingIndicator() {\n  return (\n    <div className=\"flex items-start space-x-3 max-w-3xl animate-in slide-in-from-bottom-2 duration-300\">\n      <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-indigo-500 to-violet-500 rounded-full flex items-center justify-center\">\n        <Bot className=\"text-white text-sm\" />\n      </div>\n      <div className=\"bg-white dark:bg-slate-700 rounded-2xl rounded-tl-md p-4 shadow-sm border border-slate-200 dark:border-slate-600\">\n        <div className=\"flex space-x-1\">\n          <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce\"></div>\n          <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce [animation-delay:0.1s]\"></div>\n          <div className=\"w-2 h-2 bg-slate-400 rounded-full animate-bounce [animation-delay:0.2s]\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":909},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","size_bytes":1583},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7288},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","size_bytes":1144},"client/src/styles/theme.css":{"content":"/* ===============================================\n   COMPREHENSIVE CSS REPLACEMENT FOR TAILWIND\n   =============================================== */\n\n/* Reset and Base Styles */\n* {\n  box-sizing: border-box;\n  border: 0 solid var(--border);\n}\n\nbody {\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: var(--background);\n  color: var(--foreground);\n  line-height: 1.5;\n  margin: 0;\n  padding: 0;\n}\n\n/* ===============================================\n   THEME VARIABLES\n   =============================================== */\n\n:root {\n  /* Light Theme */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(45, 93%, 47%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Chart Colors */\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  \n  /* Sidebar Colors */\n  --sidebar-background: var(--background);\n  --sidebar-foreground: var(--foreground);\n  --sidebar-primary: var(--primary);\n  --sidebar-primary-foreground: var(--primary-foreground);\n  --sidebar-accent: var(--accent);\n  --sidebar-accent-foreground: var(--accent-foreground);\n  --sidebar-border: var(--border);\n  --sidebar-ring: var(--ring);\n}\n\n\n/* ===============================================\n   SPACING UTILITIES\n   =============================================== */\n\n.m-0 { margin: 0; }\n.m-1 { margin: 0.25rem; }\n.m-2 { margin: 0.5rem; }\n.m-3 { margin: 0.75rem; }\n.m-4 { margin: 1rem; }\n.m-5 { margin: 1.25rem; }\n.m-6 { margin: 1.5rem; }\n.m-8 { margin: 2rem; }\n.m-10 { margin: 2.5rem; }\n.m-12 { margin: 3rem; }\n.m-16 { margin: 4rem; }\n.m-20 { margin: 5rem; }\n.m-auto { margin: auto; }\n\n.mx-0 { margin-left: 0; margin-right: 0; }\n.mx-1 { margin-left: 0.25rem; margin-right: 0.25rem; }\n.mx-2 { margin-left: 0.5rem; margin-right: 0.5rem; }\n.mx-3 { margin-left: 0.75rem; margin-right: 0.75rem; }\n.mx-4 { margin-left: 1rem; margin-right: 1rem; }\n.mx-6 { margin-left: 1.5rem; margin-right: 1.5rem; }\n.mx-8 { margin-left: 2rem; margin-right: 2rem; }\n.mx-auto { margin-left: auto; margin-right: auto; }\n\n.my-0 { margin-top: 0; margin-bottom: 0; }\n.my-1 { margin-top: 0.25rem; margin-bottom: 0.25rem; }\n.my-2 { margin-top: 0.5rem; margin-bottom: 0.5rem; }\n.my-3 { margin-top: 0.75rem; margin-bottom: 0.75rem; }\n.my-4 { margin-top: 1rem; margin-bottom: 1rem; }\n.my-6 { margin-top: 1.5rem; margin-bottom: 1.5rem; }\n.my-8 { margin-top: 2rem; margin-bottom: 2rem; }\n\n.mt-0 { margin-top: 0; }\n.mt-1 { margin-top: 0.25rem; }\n.mt-2 { margin-top: 0.5rem; }\n.mt-3 { margin-top: 0.75rem; }\n.mt-4 { margin-top: 1rem; }\n.mt-6 { margin-top: 1.5rem; }\n.mt-8 { margin-top: 2rem; }\n.mt-12 { margin-top: 3rem; }\n.mt-16 { margin-top: 4rem; }\n.mt-auto { margin-top: auto; }\n\n.mr-0 { margin-right: 0; }\n.mr-1 { margin-right: 0.25rem; }\n.mr-2 { margin-right: 0.5rem; }\n.mr-3 { margin-right: 0.75rem; }\n.mr-4 { margin-right: 1rem; }\n.mr-6 { margin-right: 1.5rem; }\n.mr-8 { margin-right: 2rem; }\n.mr-auto { margin-right: auto; }\n\n.mb-0 { margin-bottom: 0; }\n.mb-1 { margin-bottom: 0.25rem; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-3 { margin-bottom: 0.75rem; }\n.mb-4 { margin-bottom: 1rem; }\n.mb-6 { margin-bottom: 1.5rem; }\n.mb-8 { margin-bottom: 2rem; }\n.mb-12 { margin-bottom: 3rem; }\n\n.ml-0 { margin-left: 0; }\n.ml-1 { margin-left: 0.25rem; }\n.ml-2 { margin-left: 0.5rem; }\n.ml-3 { margin-left: 0.75rem; }\n.ml-4 { margin-left: 1rem; }\n.ml-6 { margin-left: 1.5rem; }\n.ml-8 { margin-left: 2rem; }\n.ml-auto { margin-left: auto; }\n\n.p-0 { padding: 0; }\n.p-1 { padding: 0.25rem; }\n.p-2 { padding: 0.5rem; }\n.p-3 { padding: 0.75rem; }\n.p-4 { padding: 1rem; }\n.p-5 { padding: 1.25rem; }\n.p-6 { padding: 1.5rem; }\n.p-8 { padding: 2rem; }\n.p-10 { padding: 2.5rem; }\n.p-12 { padding: 3rem; }\n\n.px-0 { padding-left: 0; padding-right: 0; }\n.px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }\n.px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }\n.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }\n.px-4 { padding-left: 1rem; padding-right: 1rem; }\n.px-5 { padding-left: 1.25rem; padding-right: 1.25rem; }\n.px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }\n.px-8 { padding-left: 2rem; padding-right: 2rem; }\n\n.py-0 { padding-top: 0; padding-bottom: 0; }\n.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }\n.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n.py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }\n.py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n.py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; }\n.py-8 { padding-top: 2rem; padding-bottom: 2rem; }\n\n.pt-0 { padding-top: 0; }\n.pt-1 { padding-top: 0.25rem; }\n.pt-2 { padding-top: 0.5rem; }\n.pt-4 { padding-top: 1rem; }\n.pt-6 { padding-top: 1.5rem; }\n.pt-8 { padding-top: 2rem; }\n\n.pr-0 { padding-right: 0; }\n.pr-1 { padding-right: 0.25rem; }\n.pr-2 { padding-right: 0.5rem; }\n.pr-4 { padding-right: 1rem; }\n.pr-6 { padding-right: 1.5rem; }\n.pr-8 { padding-right: 2rem; }\n\n.pb-0 { padding-bottom: 0; }\n.pb-1 { padding-bottom: 0.25rem; }\n.pb-2 { padding-bottom: 0.5rem; }\n.pb-4 { padding-bottom: 1rem; }\n.pb-6 { padding-bottom: 1.5rem; }\n.pb-8 { padding-bottom: 2rem; }\n\n.pl-0 { padding-left: 0; }\n.pl-1 { padding-left: 0.25rem; }\n.pl-2 { padding-left: 0.5rem; }\n.pl-4 { padding-left: 1rem; }\n.pl-6 { padding-left: 1.5rem; }\n.pl-8 { padding-left: 2rem; }\n\n/* ===============================================\n   LAYOUT UTILITIES\n   =============================================== */\n\n.block { display: block; }\n.inline-block { display: inline-block; }\n.inline { display: inline; }\n.flex { display: flex; }\n.inline-flex { display: inline-flex; }\n.table { display: table; }\n.table-cell { display: table-cell; }\n.grid { display: grid; }\n.hidden { display: none; }\n\n.flex-row { flex-direction: row; }\n.flex-row-reverse { flex-direction: row-reverse; }\n.flex-col { flex-direction: column; }\n.flex-col-reverse { flex-direction: column-reverse; }\n\n.flex-wrap { flex-wrap: wrap; }\n.flex-wrap-reverse { flex-wrap: wrap-reverse; }\n.flex-nowrap { flex-wrap: nowrap; }\n\n.items-start { align-items: flex-start; }\n.items-end { align-items: flex-end; }\n.items-center { align-items: center; }\n.items-baseline { align-items: baseline; }\n.items-stretch { align-items: stretch; }\n\n.justify-start { justify-content: flex-start; }\n.justify-end { justify-content: flex-end; }\n.justify-center { justify-content: center; }\n.justify-between { justify-content: space-between; }\n.justify-around { justify-content: space-around; }\n.justify-evenly { justify-content: space-evenly; }\n\n.flex-1 { flex: 1 1 0%; }\n.flex-auto { flex: 1 1 auto; }\n.flex-initial { flex: 0 1 auto; }\n.flex-none { flex: none; }\n\n.grow { flex-grow: 1; }\n.grow-0 { flex-grow: 0; }\n.shrink { flex-shrink: 1; }\n.shrink-0 { flex-shrink: 0; }\n\n.gap-0 { gap: 0; }\n.gap-1 { gap: 0.25rem; }\n.gap-2 { gap: 0.5rem; }\n.gap-3 { gap: 0.75rem; }\n.gap-4 { gap: 1rem; }\n.gap-5 { gap: 1.25rem; }\n.gap-6 { gap: 1.5rem; }\n.gap-8 { gap: 2rem; }\n\n.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }\n.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }\n.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }\n.grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }\n.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }\n.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }\n\n/* ===============================================\n   POSITIONING UTILITIES\n   =============================================== */\n\n.static { position: static; }\n.fixed { position: fixed; }\n.absolute { position: absolute; }\n.relative { position: relative; }\n.sticky { position: sticky; }\n\n.inset-0 { top: 0; right: 0; bottom: 0; left: 0; }\n.inset-y-0 { top: 0; bottom: 0; }\n.inset-x-0 { left: 0; right: 0; }\n\n.top-0 { top: 0; }\n.top-1 { top: 0.25rem; }\n.top-2 { top: 0.5rem; }\n.top-4 { top: 1rem; }\n.top-auto { top: auto; }\n\n.right-0 { right: 0; }\n.right-1 { right: 0.25rem; }\n.right-2 { right: 0.5rem; }\n.right-4 { right: 1rem; }\n.right-auto { right: auto; }\n\n.bottom-0 { bottom: 0; }\n.bottom-1 { bottom: 0.25rem; }\n.bottom-2 { bottom: 0.5rem; }\n.bottom-4 { bottom: 1rem; }\n.bottom-auto { bottom: auto; }\n\n.left-0 { left: 0; }\n.left-1 { left: 0.25rem; }\n.left-2 { left: 0.5rem; }\n.left-4 { left: 1rem; }\n.left-auto { left: auto; }\n\n.z-0 { z-index: 0; }\n.z-10 { z-index: 10; }\n.z-20 { z-index: 20; }\n.z-30 { z-index: 30; }\n.z-40 { z-index: 40; }\n.z-50 { z-index: 50; }\n\n/* ===============================================\n   SIZE UTILITIES\n   =============================================== */\n\n.w-0 { width: 0; }\n.w-1 { width: 0.25rem; }\n.w-2 { width: 0.5rem; }\n.w-3 { width: 0.75rem; }\n.w-4 { width: 1rem; }\n.w-5 { width: 1.25rem; }\n.w-6 { width: 1.5rem; }\n.w-8 { width: 2rem; }\n.w-10 { width: 2.5rem; }\n.w-12 { width: 3rem; }\n.w-16 { width: 4rem; }\n.w-20 { width: 5rem; }\n.w-24 { width: 6rem; }\n.w-32 { width: 8rem; }\n.w-40 { width: 10rem; }\n.w-48 { width: 12rem; }\n.w-56 { width: 14rem; }\n.w-64 { width: 16rem; }\n.w-72 { width: 18rem; }\n.w-80 { width: 20rem; }\n.w-96 { width: 24rem; }\n.w-auto { width: auto; }\n.w-px { width: 1px; }\n.w-full { width: 100%; }\n.w-screen { width: 100vw; }\n.w-min { width: min-content; }\n.w-max { width: max-content; }\n.w-fit { width: fit-content; }\n\n.h-0 { height: 0; }\n.h-1 { height: 0.25rem; }\n.h-2 { height: 0.5rem; }\n.h-3 { height: 0.75rem; }\n.h-4 { height: 1rem; }\n.h-5 { height: 1.25rem; }\n.h-6 { height: 1.5rem; }\n.h-8 { height: 2rem; }\n.h-10 { height: 2.5rem; }\n.h-12 { height: 3rem; }\n.h-16 { height: 4rem; }\n.h-20 { height: 5rem; }\n.h-24 { height: 6rem; }\n.h-32 { height: 8rem; }\n.h-40 { height: 10rem; }\n.h-48 { height: 12rem; }\n.h-56 { height: 14rem; }\n.h-64 { height: 16rem; }\n.h-72 { height: 18rem; }\n.h-80 { height: 20rem; }\n.h-96 { height: 24rem; }\n.h-auto { height: auto; }\n.h-px { height: 1px; }\n.h-full { height: 100%; }\n.h-screen { height: 100vh; }\n\n.min-w-0 { min-width: 0; }\n.min-w-full { min-width: 100%; }\n.min-w-min { min-width: min-content; }\n.min-w-max { min-width: max-content; }\n.min-w-fit { min-width: fit-content; }\n\n.min-h-0 { min-height: 0; }\n.min-h-full { min-height: 100%; }\n.min-h-screen { min-height: 100vh; }\n\n.max-w-none { max-width: none; }\n.max-w-xs { max-width: 20rem; }\n.max-w-sm { max-width: 24rem; }\n.max-w-md { max-width: 28rem; }\n.max-w-lg { max-width: 32rem; }\n.max-w-xl { max-width: 36rem; }\n.max-w-2xl { max-width: 42rem; }\n.max-w-3xl { max-width: 48rem; }\n.max-w-4xl { max-width: 56rem; }\n.max-w-5xl { max-width: 64rem; }\n.max-w-6xl { max-width: 72rem; }\n.max-w-7xl { max-width: 80rem; }\n.max-w-full { max-width: 100%; }\n.max-w-min { max-width: min-content; }\n.max-w-max { max-width: max-content; }\n.max-w-fit { max-width: fit-content; }\n\n.max-h-0 { max-height: 0; }\n.max-h-full { max-height: 100%; }\n.max-h-screen { max-height: 100vh; }\n\n/* ===============================================\n   COLOR UTILITIES\n   =============================================== */\n\n.bg-transparent { background-color: transparent; }\n.bg-current { background-color: currentColor; }\n.bg-black { background-color: rgb(0 0 0); }\n.bg-white { background-color: rgb(255 255 255); }\n.bg-background { background-color: var(--background); }\n.bg-foreground { background-color: var(--foreground); }\n.bg-card { background-color: var(--card); }\n.bg-card-foreground { background-color: var(--card-foreground); }\n.bg-popover { background-color: var(--popover); }\n.bg-popover-foreground { background-color: var(--popover-foreground); }\n.bg-primary { background-color: var(--primary); }\n.bg-primary-foreground { background-color: var(--primary-foreground); }\n.bg-secondary { background-color: var(--secondary); }\n.bg-secondary-foreground { background-color: var(--secondary-foreground); }\n.bg-muted { background-color: var(--muted); }\n.bg-muted-foreground { background-color: var(--muted-foreground); }\n.bg-accent { background-color: var(--accent); }\n.bg-accent-foreground { background-color: var(--accent-foreground); }\n.bg-destructive { background-color: var(--destructive); }\n.bg-destructive-foreground { background-color: var(--destructive-foreground); }\n.bg-border { background-color: var(--border); }\n.bg-input { background-color: var(--input); }\n.bg-ring { background-color: var(--ring); }\n\n.text-transparent { color: transparent; }\n.text-current { color: currentColor; }\n.text-black { color: rgb(0 0 0); }\n.text-white { color: rgb(255 255 255); }\n.text-background { color: var(--background); }\n.text-foreground { color: var(--foreground); }\n.text-card { color: var(--card); }\n.text-card-foreground { color: var(--card-foreground); }\n.text-popover { color: var(--popover); }\n.text-popover-foreground { color: var(--popover-foreground); }\n.text-primary { color: var(--primary); }\n.text-primary-foreground { color: var(--primary-foreground); }\n.text-secondary { color: var(--secondary); }\n.text-secondary-foreground { color: var(--secondary-foreground); }\n.text-muted { color: var(--muted); }\n.text-muted-foreground { color: var(--muted-foreground); }\n.text-accent { color: var(--accent); }\n.text-accent-foreground { color: var(--accent-foreground); }\n.text-destructive { color: var(--destructive); }\n.text-destructive-foreground { color: var(--destructive-foreground); }\n.text-border { color: var(--border); }\n.text-input { color: var(--input); }\n.text-ring { color: var(--ring); }\n\n.border-transparent { border-color: transparent; }\n.border-current { border-color: currentColor; }\n.border-black { border-color: rgb(0 0 0); }\n.border-white { border-color: rgb(255 255 255); }\n.border-background { border-color: var(--background); }\n.border-foreground { border-color: var(--foreground); }\n.border-card { border-color: var(--card); }\n.border-card-foreground { border-color: var(--card-foreground); }\n.border-popover { border-color: var(--popover); }\n.border-popover-foreground { border-color: var(--popover-foreground); }\n.border-primary { border-color: var(--primary); }\n.border-primary-foreground { border-color: var(--primary-foreground); }\n.border-secondary { border-color: var(--secondary); }\n.border-secondary-foreground { border-color: var(--secondary-foreground); }\n.border-muted { border-color: var(--muted); }\n.border-muted-foreground { border-color: var(--muted-foreground); }\n.border-accent { border-color: var(--accent); }\n.border-accent-foreground { border-color: var(--accent-foreground); }\n.border-destructive { border-color: var(--destructive); }\n.border-destructive-foreground { border-color: var(--destructive-foreground); }\n.border { border-color: var(--border); }\n.border-input { border-color: var(--input); }\n.border-ring { border-color: var(--ring); }\n\n/* ===============================================\n   BORDER UTILITIES\n   =============================================== */\n\n.border-0 { border-width: 0; }\n.border-2 { border-width: 2px; }\n.border { border-width: 1px; }\n\n.border-t-0 { border-top-width: 0; }\n.border-t-2 { border-top-width: 2px; }\n.border-t { border-top-width: 1px; }\n\n.border-r-0 { border-right-width: 0; }\n.border-r-2 { border-right-width: 2px; }\n.border-r { border-right-width: 1px; }\n\n.border-b-0 { border-bottom-width: 0; }\n.border-b-2 { border-bottom-width: 2px; }\n.border-b { border-bottom-width: 1px; }\n\n.border-l-0 { border-left-width: 0; }\n.border-l-2 { border-left-width: 2px; }\n.border-l { border-left-width: 1px; }\n\n.border-solid { border-style: solid; }\n.border-dashed { border-style: dashed; }\n.border-dotted { border-style: dotted; }\n.border-double { border-style: double; }\n.border-none { border-style: none; }\n\n.rounded-none { border-radius: 0; }\n.rounded-sm { border-radius: calc(var(--radius) - 4px); }\n.rounded { border-radius: var(--radius); }\n.rounded-md { border-radius: calc(var(--radius) - 2px); }\n.rounded-lg { border-radius: var(--radius); }\n.rounded-xl { border-radius: calc(var(--radius) + 4px); }\n.rounded-2xl { border-radius: calc(var(--radius) + 8px); }\n.rounded-3xl { border-radius: calc(var(--radius) + 12px); }\n.rounded-full { border-radius: 9999px; }\n\n.rounded-t-none { border-top-left-radius: 0; border-top-right-radius: 0; }\n.rounded-t-sm { border-top-left-radius: calc(var(--radius) - 4px); border-top-right-radius: calc(var(--radius) - 4px); }\n.rounded-t { border-top-left-radius: var(--radius); border-top-right-radius: var(--radius); }\n.rounded-t-md { border-top-left-radius: calc(var(--radius) - 2px); border-top-right-radius: calc(var(--radius) - 2px); }\n.rounded-t-lg { border-top-left-radius: var(--radius); border-top-right-radius: var(--radius); }\n\n/* ===============================================\n   TYPOGRAPHY UTILITIES\n   =============================================== */\n\n.text-xs { font-size: 0.75rem; line-height: 1rem; }\n.text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n.text-base { font-size: 1rem; line-height: 1.5rem; }\n.text-lg { font-size: 1.125rem; line-height: 1.75rem; }\n.text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n.text-2xl { font-size: 1.5rem; line-height: 2rem; }\n.text-3xl { font-size: 1.875rem; line-height: 2.25rem; }\n.text-4xl { font-size: 2.25rem; line-height: 2.5rem; }\n.text-5xl { font-size: 3rem; line-height: 1; }\n.text-6xl { font-size: 3.75rem; line-height: 1; }\n\n.font-thin { font-weight: 100; }\n.font-extralight { font-weight: 200; }\n.font-light { font-weight: 300; }\n.font-normal { font-weight: 400; }\n.font-medium { font-weight: 500; }\n.font-semibold { font-weight: 600; }\n.font-bold { font-weight: 700; }\n.font-extrabold { font-weight: 800; }\n.font-black { font-weight: 900; }\n\n.italic { font-style: italic; }\n.not-italic { font-style: normal; }\n\n.leading-3 { line-height: 0.75rem; }\n.leading-4 { line-height: 1rem; }\n.leading-5 { line-height: 1.25rem; }\n.leading-6 { line-height: 1.5rem; }\n.leading-7 { line-height: 1.75rem; }\n.leading-8 { line-height: 2rem; }\n.leading-9 { line-height: 2.25rem; }\n.leading-10 { line-height: 2.5rem; }\n.leading-none { line-height: 1; }\n.leading-tight { line-height: 1.25; }\n.leading-snug { line-height: 1.375; }\n.leading-normal { line-height: 1.5; }\n.leading-relaxed { line-height: 1.625; }\n.leading-loose { line-height: 2; }\n\n.text-left { text-align: left; }\n.text-center { text-align: center; }\n.text-right { text-align: right; }\n.text-justify { text-align: justify; }\n\n.uppercase { text-transform: uppercase; }\n.lowercase { text-transform: lowercase; }\n.capitalize { text-transform: capitalize; }\n.normal-case { text-transform: none; }\n\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.text-ellipsis { text-overflow: ellipsis; }\n.text-clip { text-overflow: clip; }\n\n.whitespace-normal { white-space: normal; }\n.whitespace-nowrap { white-space: nowrap; }\n.whitespace-pre { white-space: pre; }\n.whitespace-pre-line { white-space: pre-line; }\n.whitespace-pre-wrap { white-space: pre-wrap; }\n\n/* ===============================================\n   SHADOW & OPACITY UTILITIES\n   =============================================== */\n\n.shadow-sm { box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); }\n.shadow { box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); }\n.shadow-md { box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }\n.shadow-lg { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); }\n.shadow-xl { box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1); }\n.shadow-2xl { box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25); }\n.shadow-inner { box-shadow: inset 0 2px 4px 0 rgb(0 0 0 / 0.05); }\n.shadow-none { box-shadow: 0 0 #0000; }\n\n.opacity-0 { opacity: 0; }\n.opacity-5 { opacity: 0.05; }\n.opacity-10 { opacity: 0.1; }\n.opacity-20 { opacity: 0.2; }\n.opacity-25 { opacity: 0.25; }\n.opacity-30 { opacity: 0.3; }\n.opacity-40 { opacity: 0.4; }\n.opacity-50 { opacity: 0.5; }\n.opacity-60 { opacity: 0.6; }\n.opacity-70 { opacity: 0.7; }\n.opacity-75 { opacity: 0.75; }\n.opacity-80 { opacity: 0.8; }\n.opacity-90 { opacity: 0.9; }\n.opacity-95 { opacity: 0.95; }\n.opacity-100 { opacity: 1; }\n\n/* ===============================================\n   OVERFLOW UTILITIES\n   =============================================== */\n\n.overflow-auto { overflow: auto; }\n.overflow-hidden { overflow: hidden; }\n.overflow-visible { overflow: visible; }\n.overflow-scroll { overflow: scroll; }\n\n.overflow-x-auto { overflow-x: auto; }\n.overflow-x-hidden { overflow-x: hidden; }\n.overflow-x-visible { overflow-x: visible; }\n.overflow-x-scroll { overflow-x: scroll; }\n\n.overflow-y-auto { overflow-y: auto; }\n.overflow-y-hidden { overflow-y: hidden; }\n.overflow-y-visible { overflow-y: visible; }\n.overflow-y-scroll { overflow-y: scroll; }\n\n/* ===============================================\n   INTERACTION UTILITIES\n   =============================================== */\n\n.cursor-auto { cursor: auto; }\n.cursor-default { cursor: default; }\n.cursor-pointer { cursor: pointer; }\n.cursor-wait { cursor: wait; }\n.cursor-text { cursor: text; }\n.cursor-move { cursor: move; }\n.cursor-help { cursor: help; }\n.cursor-not-allowed { cursor: not-allowed; }\n\n.select-none { user-select: none; }\n.select-text { user-select: text; }\n.select-all { user-select: all; }\n.select-auto { user-select: auto; }\n\n.pointer-events-none { pointer-events: none; }\n.pointer-events-auto { pointer-events: auto; }\n\n/* ===============================================\n   PSEUDO-CLASS UTILITIES\n   =============================================== */\n\n.hover\\:bg-accent:hover { background-color: var(--accent); }\n.hover\\:bg-muted:hover { background-color: var(--muted); }\n.hover\\:bg-primary:hover { background-color: var(--primary); }\n.hover\\:bg-secondary:hover { background-color: var(--secondary); }\n.hover\\:bg-destructive:hover { background-color: var(--destructive); }\n\n.hover\\:text-accent-foreground:hover { color: var(--accent-foreground); }\n.hover\\:text-muted-foreground:hover { color: var(--muted-foreground); }\n.hover\\:text-primary-foreground:hover { color: var(--primary-foreground); }\n.hover\\:text-secondary-foreground:hover { color: var(--secondary-foreground); }\n.hover\\:text-destructive-foreground:hover { color: var(--destructive-foreground); }\n\n.focus\\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }\n.focus\\:ring-2:focus { box-shadow: 0 0 0 2px var(--ring); }\n.focus\\:ring-offset-2:focus { box-shadow: 0 0 0 2px var(--background), 0 0 0 4px var(--ring); }\n\n.focus-visible\\:outline-none:focus-visible { outline: 2px solid transparent; outline-offset: 2px; }\n.focus-visible\\:ring-2:focus-visible { box-shadow: 0 0 0 2px var(--ring); }\n.focus-visible\\:ring-ring:focus-visible { box-shadow: 0 0 0 2px var(--ring); }\n.focus-visible\\:ring-offset-2:focus-visible { box-shadow: 0 0 0 2px var(--background), 0 0 0 4px var(--ring); }\n\n.disabled\\:opacity-50:disabled { opacity: 0.5; }\n.disabled\\:pointer-events-none:disabled { pointer-events: none; }\n\n/* ===============================================\n   TRANSITION UTILITIES\n   =============================================== */\n\n.transition-none { transition-property: none; }\n.transition-all { transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition-opacity { transition-property: opacity; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition-shadow { transition-property: box-shadow; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n.transition-transform { transition-property: transform; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }\n\n.duration-75 { transition-duration: 75ms; }\n.duration-100 { transition-duration: 100ms; }\n.duration-150 { transition-duration: 150ms; }\n.duration-200 { transition-duration: 200ms; }\n.duration-300 { transition-duration: 300ms; }\n.duration-500 { transition-duration: 500ms; }\n.duration-700 { transition-duration: 700ms; }\n.duration-1000 { transition-duration: 1000ms; }\n\n.ease-linear { transition-timing-function: linear; }\n.ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }\n.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }\n.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }\n\n/* ===============================================\n   TRANSFORM UTILITIES\n   =============================================== */\n\n.transform { transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.transform-gpu { transform: translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.transform-none { transform: none; }\n\n.rotate-0 { --tw-rotate: 0deg; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.rotate-45 { --tw-rotate: 45deg; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.rotate-90 { --tw-rotate: 90deg; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.rotate-180 { --tw-rotate: 180deg; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n\n.scale-0 { --tw-scale-x: 0; --tw-scale-y: 0; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-50 { --tw-scale-x: .5; --tw-scale-y: .5; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-75 { --tw-scale-x: .75; --tw-scale-y: .75; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-90 { --tw-scale-x: .9; --tw-scale-y: .9; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-95 { --tw-scale-x: .95; --tw-scale-y: .95; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-100 { --tw-scale-x: 1; --tw-scale-y: 1; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-105 { --tw-scale-x: 1.05; --tw-scale-y: 1.05; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-110 { --tw-scale-x: 1.1; --tw-scale-y: 1.1; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-125 { --tw-scale-x: 1.25; --tw-scale-y: 1.25; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.scale-150 { --tw-scale-x: 1.5; --tw-scale-y: 1.5; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n\n.translate-x-0 { --tw-translate-x: 0px; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-x-1 { --tw-translate-x: 0.25rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-x-2 { --tw-translate-x: 0.5rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-x-3 { --tw-translate-x: 0.75rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-x-4 { --tw-translate-x: 1rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-x-5 { --tw-translate-x: 1.25rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n\n.translate-y-0 { --tw-translate-y: 0px; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-y-1 { --tw-translate-y: 0.25rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.translate-y-2 { --tw-translate-y: 0.5rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n.-translate-y-2 { --tw-translate-y: -0.5rem; transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }\n\n/* ===============================================\n   ANIMATION UTILITIES\n   =============================================== */\n\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes ping {\n  75%, 100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\n\n@keyframes pulse {\n  50% {\n    opacity: .5;\n  }\n}\n\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(-25%);\n    animation-timing-function: cubic-bezier(0.8,0,1,1);\n  }\n  50% {\n    transform: none;\n    animation-timing-function: cubic-bezier(0,0,0.2,1);\n  }\n}\n\n.animate-spin { animation: spin 1s linear infinite; }\n.animate-ping { animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite; }\n.animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }\n.animate-bounce { animation: bounce 1s infinite; }\n\n/* ===============================================\n   PLUGIN-SPECIFIC ANIMATIONS\n   =============================================== */\n\n/* Accordion animations */\n@keyframes accordion-down {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-accordion-content-height);\n  }\n}\n\n@keyframes accordion-up {\n  from {\n    height: var(--radix-accordion-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\n\n.animate-accordion-down { animation: accordion-down 0.2s ease-out; }\n.animate-accordion-up { animation: accordion-up 0.2s ease-out; }\n\n/* Data-state animations for shadcn components */\n.data-\\[state\\=open\\]\\:animate-in[data-state=\"open\"] { animation: fadeIn 150ms ease-out; }\n.data-\\[state\\=closed\\]\\:animate-out[data-state=\"closed\"] { animation: fadeOut 150ms ease-in; }\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n    transform: scale(1);\n  }\n  to {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n}\n\n/* Slide animations */\n@keyframes slideInFromTop {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInFromRight {\n  from {\n    opacity: 0;\n    transform: translateX(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInFromBottom {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideInFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.slide-in-from-top-2 { animation: slideInFromTop 150ms ease-out; }\n.slide-in-from-right { animation: slideInFromRight 150ms ease-out; }\n.slide-in-from-bottom-2 { animation: slideInFromBottom 150ms ease-out; }\n.slide-in-from-left-1\\/2 { animation: slideInFromLeft 150ms ease-out; }\n\n.fade-in-0 { animation: fadeIn 150ms ease-out; }\n.zoom-in-95 { animation: zoomIn 150ms ease-out; }\n\n@keyframes zoomIn {\n  from {\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n/* ===============================================\n   CUSTOM UTILITIES\n   =============================================== */\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.gradient-primary {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(45, 93%, 47%) 100%);\n}\n\n.gradient-secondary {\n  background: linear-gradient(135deg, hsl(45, 93%, 47%) 0%, hsl(207, 90%, 54%) 100%);\n}\n\n.gradient-accent {\n  background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(330, 60%, 45%) 100%);\n}\n\n.glass-morphism {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.hover-lift {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n.pulse-subtle {\n  animation: pulse-subtle 2s infinite;\n}\n\n@keyframes pulse-subtle {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n.float-animation {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-5px);\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-in;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.slide-in-right {\n  animation: slideInRight 0.3s ease-out;\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n\n/* ===============================================\n   PROSE UTILITIES (for typography plugin replacement)\n   =============================================== */\n\n.prose {\n  color: var(--foreground);\n  max-width: 65ch;\n}\n\n.prose h1 {\n  color: var(--foreground);\n  font-weight: 800;\n  font-size: 2.25em;\n  margin-top: 0;\n  margin-bottom: 0.8888889em;\n  line-height: 1.1111111;\n}\n\n.prose h2 {\n  color: var(--foreground);\n  font-weight: 700;\n  font-size: 1.5em;\n  margin-top: 2em;\n  margin-bottom: 1em;\n  line-height: 1.3333333;\n}\n\n.prose h3 {\n  color: var(--foreground);\n  font-weight: 600;\n  font-size: 1.25em;\n  margin-top: 1.6em;\n  margin-bottom: 0.6em;\n  line-height: 1.6;\n}\n\n.prose p {\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n}\n\n.prose a {\n  color: var(--primary);\n  text-decoration: underline;\n  font-weight: 500;\n}\n\n.prose strong {\n  color: var(--foreground);\n  font-weight: 600;\n}\n\n.prose ol {\n  counter-reset: list-counter;\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n  padding-left: 1.625em;\n}\n\n.prose ul {\n  margin-top: 1.25em;\n  margin-bottom: 1.25em;\n  padding-left: 1.625em;\n}\n\n.prose li {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.prose blockquote {\n  font-weight: 500;\n  font-style: italic;\n  color: var(--muted-foreground);\n  border-left-width: 0.25rem;\n  border-left-color: var(--border);\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  margin-top: 1.6em;\n  margin-bottom: 1.6em;\n  padding-left: 1em;\n}\n\n.prose code {\n  color: var(--foreground);\n  font-weight: 600;\n  font-size: 0.875em;\n  background-color: var(--muted);\n  padding: 0.2em 0.4em;\n  border-radius: 0.25rem;\n}\n\n.prose pre {\n  color: var(--foreground);\n  background-color: var(--muted);\n  overflow-x: auto;\n  font-size: 0.875em;\n  line-height: 1.7142857;\n  margin-top: 1.7142857em;\n  margin-bottom: 1.7142857em;\n  border-radius: 0.375rem;\n  padding: 0.8571429em 1.1428571em;\n}\n\n.prose-lg {\n  font-size: 1.125rem;\n  line-height: 1.7777778;\n}\n\n.prose-lg h1 {\n  font-size: 2.6666667em;\n  margin-top: 0;\n  margin-bottom: 0.8333333em;\n  line-height: 1;\n}\n\n.prose-lg h2 {\n  font-size: 1.6666667em;\n  margin-top: 1.8666667em;\n  margin-bottom: 1.0666667em;\n  line-height: 1.3333333;\n}\n\n.prose-lg p {\n  margin-top: 1.3333333em;\n  margin-bottom: 1.3333333em;\n}\n\n/* ===============================================\n   RESPONSIVE UTILITIES\n   =============================================== */\n\n@media (min-width: 640px) {\n  .sm\\:block { display: block; }\n  .sm\\:hidden { display: none; }\n  .sm\\:flex { display: flex; }\n  .sm\\:grid { display: grid; }\n  \n  .sm\\:flex-row { flex-direction: row; }\n  .sm\\:flex-col { flex-direction: column; }\n  \n  .sm\\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n  .sm\\:text-base { font-size: 1rem; line-height: 1.5rem; }\n  .sm\\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }\n  .sm\\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n  \n  .sm\\:w-auto { width: auto; }\n  .sm\\:w-full { width: 100%; }\n  \n  .sm\\:max-w-sm { max-width: 24rem; }\n  .sm\\:max-w-md { max-width: 28rem; }\n  .sm\\:max-w-lg { max-width: 32rem; }\n  \n  .sm\\:p-4 { padding: 1rem; }\n  .sm\\:p-6 { padding: 1.5rem; }\n  \n  .sm\\:px-4 { padding-left: 1rem; padding-right: 1rem; }\n  .sm\\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }\n  \n  .sm\\:py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }\n  .sm\\:py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n}\n\n@media (min-width: 768px) {\n  .md\\:block { display: block; }\n  .md\\:hidden { display: none; }\n  .md\\:flex { display: flex; }\n  .md\\:grid { display: grid; }\n  \n  .md\\:flex-row { flex-direction: row; }\n  .md\\:flex-col { flex-direction: column; }\n  \n  .md\\:text-base { font-size: 1rem; line-height: 1.5rem; }\n  .md\\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }\n  .md\\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n  .md\\:text-2xl { font-size: 1.5rem; line-height: 2rem; }\n  \n  .md\\:w-auto { width: auto; }\n  .md\\:w-full { width: 100%; }\n  .md\\:w-1\\/2 { width: 50%; }\n  .md\\:w-1\\/3 { width: 33.333333%; }\n  .md\\:w-2\\/3 { width: 66.666667%; }\n  \n  .md\\:max-w-md { max-width: 28rem; }\n  .md\\:max-w-lg { max-width: 32rem; }\n  .md\\:max-w-xl { max-width: 36rem; }\n  .md\\:max-w-2xl { max-width: 42rem; }\n  \n  .md\\:p-6 { padding: 1.5rem; }\n  .md\\:p-8 { padding: 2rem; }\n  \n  .md\\:px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }\n  .md\\:px-8 { padding-left: 2rem; padding-right: 2rem; }\n  \n  .md\\:py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n  .md\\:py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; }\n}\n\n@media (min-width: 1024px) {\n  .lg\\:block { display: block; }\n  .lg\\:hidden { display: none; }\n  .lg\\:flex { display: flex; }\n  .lg\\:grid { display: grid; }\n  \n  .lg\\:flex-row { flex-direction: row; }\n  .lg\\:flex-col { flex-direction: column; }\n  \n  .lg\\:text-lg { font-size: 1.125rem; line-height: 1.75rem; }\n  .lg\\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n  .lg\\:text-2xl { font-size: 1.5rem; line-height: 2rem; }\n  .lg\\:text-3xl { font-size: 1.875rem; line-height: 2.25rem; }\n  \n  .lg\\:w-auto { width: auto; }\n  .lg\\:w-full { width: 100%; }\n  .lg\\:w-1\\/2 { width: 50%; }\n  .lg\\:w-1\\/3 { width: 33.333333%; }\n  .lg\\:w-2\\/3 { width: 66.666667%; }\n  .lg\\:w-1\\/4 { width: 25%; }\n  .lg\\:w-3\\/4 { width: 75%; }\n  \n  .lg\\:max-w-lg { max-width: 32rem; }\n  .lg\\:max-w-xl { max-width: 36rem; }\n  .lg\\:max-w-2xl { max-width: 42rem; }\n  .lg\\:max-w-4xl { max-width: 56rem; }\n  \n  .lg\\:p-8 { padding: 2rem; }\n  .lg\\:p-10 { padding: 2.5rem; }\n  \n  .lg\\:px-8 { padding-left: 2rem; padding-right: 2rem; }\n  .lg\\:px-10 { padding-left: 2.5rem; padding-right: 2.5rem; }\n  \n  .lg\\:py-6 { padding-top: 1.5rem; padding-bottom: 1.5rem; }\n  .lg\\:py-8 { padding-top: 2rem; padding-bottom: 2rem; }\n}\n\n@media (min-width: 1280px) {\n  .xl\\:block { display: block; }\n  .xl\\:hidden { display: none; }\n  .xl\\:flex { display: flex; }\n  .xl\\:grid { display: grid; }\n  \n  .xl\\:text-xl { font-size: 1.25rem; line-height: 1.75rem; }\n  .xl\\:text-2xl { font-size: 1.5rem; line-height: 2rem; }\n  .xl\\:text-3xl { font-size: 1.875rem; line-height: 2.25rem; }\n  .xl\\:text-4xl { font-size: 2.25rem; line-height: 2.5rem; }\n  \n  .xl\\:max-w-2xl { max-width: 42rem; }\n  .xl\\:max-w-4xl { max-width: 56rem; }\n  .xl\\:max-w-6xl { max-width: 72rem; }\n}","size_bytes":42729},"server/data/dataSeed.ts":{"content":"import { storage } from '../storage';\nimport { seedArticles } from './seedData';\n\nexport async function initializeDatabase(): Promise<void> {\n  try {\n    console.log('Initializing database with seed data...');\n    \n    // Check if articles already exist\n    const existingArticles = await storage.getArticles({ language: 'en' }, 10, 0);\n    \n    if (existingArticles.length > 0) {\n      console.log(`Database already contains ${existingArticles.length} articles, skipping seed`);\n      return;\n    }\n    \n    // Insert seed articles\n    for (const article of seedArticles) {\n      await storage.createArticle(article);\n    }\n    \n    console.log(`Successfully seeded database with ${seedArticles.length} articles`);\n    \n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    throw error;\n  }\n}","size_bytes":824},"server/data/seedData.ts":{"content":"import type { InsertArticle } from '@shared/schema';\n\nconst newsSourceUrls = [\n  'https://www.thehindu.com',\n  'https://www.ndtv.com', \n  'https://indianexpress.com',\n  'https://www.business-standard.com',\n  'https://timesofindia.indiatimes.com',\n  'https://economictimes.indiatimes.com'\n];\n\nconst getSourceUrl = (index: number): string => {\n  return newsSourceUrls[index % newsSourceUrls.length];\n};\n\nexport const seedArticles: InsertArticle[] = [\n  {\n    title: \"Digital Infrastructure Expansion Accelerates Across Rural India\",\n    content: \"India's digital transformation continues with significant investments in rural connectivity infrastructure. The latest government initiative aims to bridge the digital divide through comprehensive broadband expansion programs. Industry experts highlight the potential economic impact of enhanced digital access in remote areas.\",\n    summary: \"Government launches major rural digital connectivity initiative\",\n    url: getSourceUrl(0),\n    imageUrl: \"https://images.unsplash.com/photo-1606868306217-dbf5046868d2?w=400\",\n    source: \"Tech Today India\",\n    author: \"Priya Sharma\",\n    category: \"technology\",\n    publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    politicalBias: \"neutral\",\n    biasConfidence: 0.8,\n    sentimentScore: 0.6,\n    emotionalTone: \"positive\",\n    availableLanguages: [],\n  },\n  {\n    title: \"Healthcare Innovation Shows Promise in Metropolitan Areas\",\n    content: \"Healthcare technology adoption accelerates in urban centers with new telemedicine platforms gaining traction. Medical professionals report improved patient outcomes through digital health solutions. The integration of advanced diagnostic tools continues to reshape healthcare delivery across major cities.\",\n    summary: \"Urban healthcare embraces digital transformation\",\n    url: getSourceUrl(1),\n    imageUrl: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=400\",\n    source: \"Health India Today\",\n    author: \"Dr. Meera Singh\",\n    category: \"health\",\n    publishedAt: new Date(Date.now() - 4 * 60 * 60 * 1000),\n    politicalBias: \"neutral\",\n    biasConfidence: 0.8,\n    sentimentScore: 0.7,\n    emotionalTone: \"positive\",\n    availableLanguages: [],\n  },\n  {\n    title: \"Financial Services Sector Sees Regulatory Updates\",\n    content: \"Recent policy changes in financial services aim to enhance consumer protection and market stability. Industry stakeholders express varied responses to the new regulatory framework. The measures focus on transparency and accountability in financial transactions.\",\n    summary: \"New financial regulations emphasize consumer protection\",\n    url: getSourceUrl(2),\n    imageUrl: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=400\",\n    source: \"Economic Times\",\n    author: \"Sunita Patel\",\n    category: \"finance\",\n    publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000),\n    politicalBias: \"neutral\",\n    biasConfidence: 0.7,\n    sentimentScore: 0.4,\n    emotionalTone: \"neutral\",\n    availableLanguages: [],\n  },\n  {\n    title: \"Sports Infrastructure Development Gains Momentum\",\n    content: \"Investment in sports facilities continues across multiple states with focus on youth development programs. Community sports initiatives see increased participation rates. Local authorities emphasize the importance of accessible recreational facilities for public health.\",\n    summary: \"Sports facility development supports community wellness\",\n    url: getSourceUrl(3),\n    imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400\",\n    source: \"Sports Central\",\n    author: \"Anil Mehta\",\n    category: \"sports\",\n    publishedAt: new Date(Date.now() - 8 * 60 * 60 * 1000),\n    politicalBias: \"neutral\",\n    biasConfidence: 0.9,\n    sentimentScore: 0.6,\n    emotionalTone: \"positive\",\n    availableLanguages: [],\n  },\n  {\n    title: \"Educational Technology Integration Shows Mixed Results\",\n    content: \"Schools nationwide report varying success rates with digital learning platforms. Educators highlight both opportunities and challenges in technology adoption. Student engagement metrics indicate the need for balanced approaches to educational innovation.\",\n    summary: \"Educational institutions evaluate digital learning effectiveness\",\n    url: getSourceUrl(4),\n    imageUrl: \"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=400\",\n    source: \"Education News\",\n    author: \"Meera Patel\",\n    category: \"general\",\n    publishedAt: new Date(Date.now() - 10 * 60 * 60 * 1000),\n    politicalBias: \"neutral\",\n    biasConfidence: 0.8,\n    sentimentScore: 0.3,\n    emotionalTone: \"neutral\",\n    availableLanguages: [],\n  }\n];","size_bytes":4676},"server/ml/tfidfProcessor.ts":{"content":"/**\n * TF-IDF processing utilities for content-based recommendations\n */\n\nimport { preprocessText, calculateTermFrequency, buildVocabulary } from '../utils/textProcessor';\nimport type { Article } from '@shared/schema';\n\nexport interface TfIdfModel {\n  vocabulary: string[];\n  documentTermMatrix: Map<number, Map<string, number>>;\n  articleVectors: Map<number, number[]>;\n}\n\nexport class TfIdfProcessor {\n  private model: TfIdfModel | null = null;\n\n  /**\n   * Build TF-IDF model from articles\n   */\n  buildModel(articles: Article[]): TfIdfModel {\n    const documentTermMatrix = new Map<number, Map<string, number>>();\n    const processedDocs: string[][] = [];\n\n    // Process each article and build term frequency maps\n    for (let i = 0; i < articles.length; i++) {\n      const article = articles[i];\n      const text = `${article.title} ${article.content} ${article.summary || ''}`;\n      const tokens = preprocessText(text);\n      const termFreq = calculateTermFrequency(tokens);\n      \n      documentTermMatrix.set(i, termFreq);\n      processedDocs.push(tokens);\n    }\n\n    // Build vocabulary\n    const vocabulary = buildVocabulary(processedDocs);\n    \n    // Create TF-IDF vectors\n    const articleVectors = new Map<number, number[]>();\n    for (let i = 0; i < articles.length; i++) {\n      const vector = this.createTfIdfVector(i, articles.length, vocabulary, documentTermMatrix);\n      articleVectors.set(articles[i].id, vector);\n    }\n\n    this.model = {\n      vocabulary,\n      documentTermMatrix,\n      articleVectors\n    };\n\n    return this.model;\n  }\n\n  /**\n   * Create TF-IDF vector for a document\n   */\n  private createTfIdfVector(\n    docIndex: number, \n    totalDocs: number, \n    vocabulary: string[],\n    documentTermMatrix: Map<number, Map<string, number>>\n  ): number[] {\n    const vector = new Array(vocabulary.length).fill(0);\n    const docTerms = documentTermMatrix.get(docIndex);\n    \n    if (!docTerms) return vector;\n    \n    const docLength = Array.from(docTerms.values()).reduce((sum, freq) => sum + freq, 0);\n    \n    for (let i = 0; i < vocabulary.length; i++) {\n      const term = vocabulary[i];\n      const termFreq = docTerms.get(term) || 0;\n      \n      if (termFreq > 0) {\n        const tf = termFreq / docLength;\n        \n        // Calculate IDF\n        let docsWithTerm = 0;\n        for (let j = 0; j < totalDocs; j++) {\n          const otherDocTerms = documentTermMatrix.get(j);\n          if (otherDocTerms && otherDocTerms.has(term)) {\n            docsWithTerm++;\n          }\n        }\n        \n        const idf = Math.log(totalDocs / (docsWithTerm + 1));\n        vector[i] = tf * idf;\n      }\n    }\n    \n    return vector;\n  }\n\n  /**\n   * Get article vector by ID\n   */\n  getArticleVector(articleId: number): number[] | null {\n    return this.model?.articleVectors.get(articleId) || null;\n  }\n\n  /**\n   * Get vocabulary\n   */\n  getVocabulary(): string[] {\n    return this.model?.vocabulary || [];\n  }\n\n  /**\n   * Check if model is built\n   */\n  isModelReady(): boolean {\n    return this.model !== null;\n  }\n}","size_bytes":3050},"server/ml/userProfiler.ts":{"content":"/**\n * User profiling utilities for personalized recommendations\n */\n\nimport { calculateTimeDecay } from '../utils/mathUtils';\nimport type { UserInteraction } from '@shared/schema';\n\nexport interface UserProfile {\n  categories: Record<string, number>;\n  biasTypes: Record<string, number>;\n  tfIdfVector: number[];\n  totalInteractions: number;\n}\n\nexport interface UserProfileData {\n  preferredCategories: string[];\n  preferredBiasTypes: string[];\n  tfIdfProfile: string;\n}\n\nconst INTERACTION_WEIGHTS: Record<string, number> = {\n  'click': 1.0,\n  'view': 2.0,\n  'share': 3.0,\n  'like': 2.5\n};\n\nexport class UserProfiler {\n  /**\n   * Build comprehensive user profile from interactions\n   */\n  buildProfile(\n    interactions: UserInteraction[], \n    articleVectors: Map<number, number[]>,\n    vocabularySize: number\n  ): UserProfile {\n    const profile: UserProfile = {\n      categories: {},\n      biasTypes: {},\n      tfIdfVector: new Array(vocabularySize).fill(0),\n      totalInteractions: 0\n    };\n\n    let totalWeight = 0;\n\n    for (const interaction of interactions) {\n      const weight = INTERACTION_WEIGHTS[interaction.interactionType] || 1.0;\n      const timeDecayFactor = calculateTimeDecay(new Date(interaction.timestamp));\n      const finalWeight = weight * timeDecayFactor;\n\n      // Update category preferences\n      profile.categories[interaction.category] = \n        (profile.categories[interaction.category] || 0) + finalWeight;\n\n      // Update bias preferences\n      profile.biasTypes[interaction.politicalBias] = \n        (profile.biasTypes[interaction.politicalBias] || 0) + finalWeight;\n\n      // Update TF-IDF profile\n      const articleVector = articleVectors.get(interaction.articleId);\n      if (articleVector) {\n        for (let i = 0; i < profile.tfIdfVector.length; i++) {\n          profile.tfIdfVector[i] += articleVector[i] * finalWeight;\n        }\n      }\n\n      totalWeight += finalWeight;\n      profile.totalInteractions++;\n    }\n\n    // Normalize vectors and preferences\n    this.normalizeProfile(profile, totalWeight);\n    \n    return profile;\n  }\n\n  /**\n   * Normalize profile data\n   */\n  private normalizeProfile(profile: UserProfile, totalWeight: number): void {\n    // Normalize TF-IDF vector\n    if (totalWeight > 0) {\n      for (let i = 0; i < profile.tfIdfVector.length; i++) {\n        profile.tfIdfVector[i] /= totalWeight;\n      }\n    }\n\n    // Normalize category preferences\n    const totalCategoryWeight = Object.values(profile.categories).reduce((sum, val) => sum + val, 0);\n    if (totalCategoryWeight > 0) {\n      Object.keys(profile.categories).forEach(key => {\n        profile.categories[key] /= totalCategoryWeight;\n      });\n    }\n\n    // Normalize bias preferences\n    const totalBiasWeight = Object.values(profile.biasTypes).reduce((sum, val) => sum + val, 0);\n    if (totalBiasWeight > 0) {\n      Object.keys(profile.biasTypes).forEach(key => {\n        profile.biasTypes[key] /= totalBiasWeight;\n      });\n    }\n  }\n\n  /**\n   * Convert profile to storage format\n   */\n  exportProfileData(profile: UserProfile, vocabulary: string[]): UserProfileData {\n    const sortedCategories = Object.entries(profile.categories)\n      .sort(([,a], [,b]) => b - a)\n      .map(([category]) => category)\n      .slice(0, 5);\n\n    const sortedBiasTypes = Object.entries(profile.biasTypes)\n      .sort(([,a], [,b]) => b - a)\n      .map(([bias]) => bias)\n      .slice(0, 3);\n\n    return {\n      preferredCategories: sortedCategories,\n      preferredBiasTypes: sortedBiasTypes,\n      tfIdfProfile: JSON.stringify({\n        vector: profile.tfIdfVector,\n        vocabulary,\n        totalInteractions: profile.totalInteractions\n      })\n    };\n  }\n}","size_bytes":3678},"server/services/recommendationEngine.ts":{"content":"/**\n * Streamlined recommendation engine using modular components\n */\n\nimport { cosineSimilarity } from '../utils/mathUtils';\nimport { TfIdfProcessor } from '../ml/tfidfProcessor';\nimport { UserProfiler, type UserProfile } from '../ml/userProfiler';\nimport type { Article, UserInteraction } from '@shared/schema';\n\ninterface ArticleFeatures {\n  id: number;\n  category: string;\n  politicalBias: string;\n  sentimentScore: number;\n}\n\ninterface Recommendation {\n  article: Article;\n  score: number;\n  reason: string;\n}\n\nexport class RecommendationEngine {\n  private tfidfProcessor: TfIdfProcessor;\n  private userProfiler: UserProfiler;\n  private userProfiles: Map<number, UserProfile>;\n  private articleFeatures: Map<number, ArticleFeatures>;\n\n  constructor() {\n    this.tfidfProcessor = new TfIdfProcessor();\n    this.userProfiler = new UserProfiler();\n    this.userProfiles = new Map();\n    this.articleFeatures = new Map();\n  }\n\n  /**\n   * Initialize the recommendation engine with articles\n   */\n  async initialize(articles: Article[]): Promise<void> {\n    // Build TF-IDF model\n    this.tfidfProcessor.buildModel(articles);\n\n    // Cache article features\n    this.articleFeatures.clear();\n    for (const article of articles) {\n      this.articleFeatures.set(article.id, {\n        id: article.id,\n        category: article.category,\n        politicalBias: article.politicalBias,\n        sentimentScore: article.sentimentScore\n      });\n    }\n  }\n\n  /**\n   * Generate personalized recommendations\n   */\n  async getRecommendations(\n    userId: number,\n    interactions: UserInteraction[],\n    articles: Article[],\n    excludeIds: number[] = [],\n    limit: number = 10\n  ): Promise<Recommendation[]> {\n    \n    // Build or update user profile\n    if (!this.userProfiles.has(userId) || interactions.length > 0) {\n      await this.buildUserProfile(userId, interactions);\n    }\n\n    const userProfile = this.userProfiles.get(userId);\n    if (!userProfile || !this.tfidfProcessor.isModelReady()) {\n      return this.getFallbackRecommendations(articles, limit);\n    }\n\n    // Generate recommendations\n    const candidates: Recommendation[] = [];\n    \n    for (const article of articles) {\n      if (excludeIds.includes(article.id)) continue;\n\n      const score = this.calculateRecommendationScore(userProfile, article);\n      const reason = this.generateReason(userProfile, article, score);\n\n      candidates.push({ article, score, reason });\n    }\n\n    // Sort and diversify\n    candidates.sort((a, b) => b.score - a.score);\n    return this.diversifyRecommendations(candidates, limit);\n  }\n\n  /**\n   * Build user profile from interactions\n   */\n  private async buildUserProfile(userId: number, interactions: UserInteraction[]): Promise<void> {\n    if (!this.tfidfProcessor.isModelReady()) {\n      throw new Error('TF-IDF model not initialized');\n    }\n\n    const articleVectors = new Map<number, number[]>();\n    for (const interaction of interactions) {\n      const vector = this.tfidfProcessor.getArticleVector(interaction.articleId);\n      if (vector) {\n        articleVectors.set(interaction.articleId, vector);\n      }\n    }\n\n    const vocabularySize = this.tfidfProcessor.getVocabulary().length;\n    const profile = this.userProfiler.buildProfile(interactions, articleVectors, vocabularySize);\n    \n    this.userProfiles.set(userId, profile);\n  }\n\n  /**\n   * Calculate recommendation score for an article\n   */\n  private calculateRecommendationScore(profile: UserProfile, article: Article): number {\n    const articleVector = this.tfidfProcessor.getArticleVector(article.id);\n    if (!articleVector) return 0;\n\n    // Content similarity (70% weight)\n    const contentScore = cosineSimilarity(profile.tfIdfVector, articleVector);\n    \n    // Category preference (20% weight)\n    const categoryScore = profile.categories[article.category] || 0;\n    \n    // Bias preference (10% weight)\n    const biasScore = profile.biasTypes[article.politicalBias] || 0;\n    \n    return (contentScore * 0.7) + (categoryScore * 0.2) + (biasScore * 0.1);\n  }\n\n  /**\n   * Generate explanation for recommendation\n   */\n  private generateReason(profile: UserProfile, article: Article, score: number): string {\n    const topCategory = this.getTopPreference(profile.categories);\n    \n    if (article.category === topCategory) {\n      return `You frequently read ${topCategory} articles`;\n    } else if (score > 0.7) {\n      return \"Highly relevant to your interests\";\n    } else if (score > 0.5) {\n      return \"Similar to articles you've enjoyed\";\n    }\n    \n    return \"Based on your reading preferences\";\n  }\n\n  /**\n   * Get top preference from a preference map\n   */\n  private getTopPreference(preferences: Record<string, number>): string {\n    return Object.keys(preferences)\n      .reduce((a, b) => preferences[a] > preferences[b] ? a : b, '');\n  }\n\n  /**\n   * Apply diversification to avoid category clustering\n   */\n  private diversifyRecommendations(recommendations: Recommendation[], limit: number): Recommendation[] {\n    const result: Recommendation[] = [];\n    const categoryCount: Record<string, number> = {};\n    const maxPerCategory = Math.max(2, Math.floor(limit / 3));\n\n    for (const rec of recommendations) {\n      const category = rec.article.category;\n      const currentCount = categoryCount[category] || 0;\n\n      if (currentCount < maxPerCategory || result.length < limit * 0.7) {\n        result.push(rec);\n        categoryCount[category] = currentCount + 1;\n      }\n\n      if (result.length >= limit) break;\n    }\n\n    return result;\n  }\n\n  /**\n   * Fallback recommendations for new users\n   */\n  private getFallbackRecommendations(articles: Article[], limit: number): Recommendation[] {\n    return articles\n      .map(article => ({\n        article,\n        score: Math.abs(article.sentimentScore) + this.getRecencyBonus(article),\n        reason: \"Trending article\"\n      }))\n      .sort((a, b) => b.score - a.score)\n      .slice(0, limit);\n  }\n\n  /**\n   * Calculate recency bonus for articles\n   */\n  private getRecencyBonus(article: Article): number {\n    const daysOld = Math.min(7, Math.max(0, \n      (Date.now() - new Date(article.publishedAt).getTime()) / (1000 * 60 * 60 * 24)\n    ));\n    return 1 - (daysOld / 7);\n  }\n\n  /**\n   * Export user preferences for storage\n   */\n  async exportUserPreferences(userId: number, interactions: UserInteraction[]) {\n    await this.buildUserProfile(userId, interactions);\n    const profile = this.userProfiles.get(userId);\n    \n    if (!profile) {\n      throw new Error('User profile not found');\n    }\n\n    const vocabulary = this.tfidfProcessor.getVocabulary();\n    return this.userProfiler.exportProfileData(profile, vocabulary);\n  }\n}\n\nexport const recommendationEngine = new RecommendationEngine();","size_bytes":6747},"server/utils/mathUtils.ts":{"content":"/**\n * Mathematical utilities for similarity calculations and ML operations\n */\n\n/**\n * Calculate cosine similarity between two vectors\n */\nexport function cosineSimilarity(vectorA: number[], vectorB: number[]): number {\n  if (vectorA.length !== vectorB.length) return 0;\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < vectorA.length; i++) {\n    dotProduct += vectorA[i] * vectorB[i];\n    normA += vectorA[i] * vectorA[i];\n    normB += vectorB[i] * vectorB[i];\n  }\n\n  normA = Math.sqrt(normA);\n  normB = Math.sqrt(normB);\n\n  if (normA === 0 || normB === 0) return 0;\n\n  return dotProduct / (normA * normB);\n}\n\n/**\n * Normalize a vector to unit length\n */\nexport function normalizeVector(vector: number[]): number[] {\n  const norm = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));\n  if (norm === 0) return vector;\n  return vector.map(val => val / norm);\n}\n\n/**\n * Calculate time decay factor for interactions\n */\nexport function calculateTimeDecay(timestamp: Date, halfLifeDays: number = 30): number {\n  const daysSince = Math.max(1, \n    (Date.now() - timestamp.getTime()) / (1000 * 60 * 60 * 24)\n  );\n  return Math.exp(-daysSince / halfLifeDays);\n}\n\n/**\n * Calculate weighted average\n */\nexport function weightedAverage(values: number[], weights: number[]): number {\n  if (values.length !== weights.length || values.length === 0) return 0;\n  \n  const totalWeight = weights.reduce((sum, w) => sum + w, 0);\n  if (totalWeight === 0) return 0;\n  \n  const weightedSum = values.reduce((sum, val, i) => sum + val * weights[i], 0);\n  return weightedSum / totalWeight;\n}","size_bytes":1607},"server/utils/textProcessor.ts":{"content":"/**\n * Text processing utilities for content analysis\n */\n\nconst ENGLISH_STOPWORDS = new Set([\n  'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', \n  'with', 'by', 'this', 'that', 'is', 'are', 'was', 'were', 'be', 'been', \n  'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', \n  'should', 'it', 'they', 'them', 'their', 'there', 'where', 'when', 'what', \n  'who', 'how', 'why', 'can', 'may', 'might', 'must', 'shall', 'from', 'up', \n  'out', 'down', 'off', 'over', 'under', 'again', 'further', 'then', 'once'\n]);\n\n/**\n * Clean and tokenize text for analysis\n */\nexport function preprocessText(text: string): string[] {\n  const tokens = text.toLowerCase()\n    .replace(/[^\\w\\s\\u0900-\\u097F]/g, ' ')\n    .split(/\\s+/)\n    .filter(token => token.length > 0);\n  \n  return tokens.filter(token => \n    !ENGLISH_STOPWORDS.has(token) && \n    token.length > 2 && \n    /^[a-zA-Z\\u0900-\\u097F]+$/.test(token)\n  );\n}\n\n/**\n * Calculate term frequency for a document\n */\nexport function calculateTermFrequency(tokens: string[]): Map<string, number> {\n  const termFreq = new Map<string, number>();\n  tokens.forEach(token => {\n    termFreq.set(token, (termFreq.get(token) || 0) + 1);\n  });\n  return termFreq;\n}\n\n/**\n * Build vocabulary from multiple documents\n */\nexport function buildVocabulary(documents: string[][]): string[] {\n  const allTerms = new Set<string>();\n  documents.forEach(doc => {\n    doc.forEach(term => allTerms.add(term));\n  });\n  return Array.from(allTerms).sort();\n}","size_bytes":1515},"README.md":{"content":"# Varta.AI\n\nA modern multilingual news platform that helps users stay informed with trusted, unbiased news coverage.\n\n## What is Varta.AI?\n\nVarta.AI aggregates news from trusted Indian sources and provides intelligent insights to help you understand the stories that matter. With built-in bias detection, automatic translation to multiple Indian languages, and blockchain-verified sources, we make it easier to navigate today's complex information landscape.\n\n## Features\n\n- **Smart News Analysis**: Our AI examines articles for potential bias, sentiment, and credibility\n- **Multilingual Support**: Read news in Hindi, Marathi, Tamil, Kannada, Telugu, Malayalam, or English\n- **Personalized Feed**: Get recommendations based on your reading preferences\n- **Verified Sources**: Blockchain verification ensures you're reading from trusted publishers\n- **Community Discussions**: Join conversations about the news that matters to you\n\n## Getting Started\n\nThis project is built with modern web technologies and runs on Node.js. The application consists of a React frontend and an Express.js backend.\n\n### Prerequisites\n\n- Node.js (18 or higher)\n- PostgreSQL database\n- API keys for external services (NewsAPI, Google AI)\n\n### Running the Application\n\n1. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n2. Start the development server:\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at `http://localhost:5000`.\n\n## Technology Stack\n\n- **Frontend**: React 18 with TypeScript, Wouter for routing, TailwindCSS for styling\n- **Backend**: Express.js with TypeScript, Drizzle ORM for database operations\n- **Database**: PostgreSQL (Neon serverless)\n- **AI Services**: Google Gemini for content analysis, Google Translate for multilingual support\n- **Blockchain**: Polygon testnet for source verification\n\n## Project Structure\n\n```\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Application pages\n│   │   ├── services/       # Frontend service layer\n│   │   └── contexts/       # React context providers\n├── server/                 # Express.js backend\n│   ├── services/           # Business logic services\n│   ├── ml/                 # Machine learning utilities\n│   ├── utils/              # Helper functions\n│   └── data/               # Data seeding and management\n├── shared/                 # Shared TypeScript schemas\n└── contracts/              # Smart contracts for blockchain verification\n```\n\n## Contributing\n\nWe welcome contributions! Please feel free to submit issues and pull requests.\n\n## License\n\nThis project is licensed under the MIT License.","size_bytes":2776}},"version":1}